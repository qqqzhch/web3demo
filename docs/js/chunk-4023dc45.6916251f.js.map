{"version":3,"sources":["webpack:///./src/contactLogic/readbalance.js","webpack:///./node_modules/core-js/modules/es.string.sub.js","webpack:///./src/contactLogic/buildr/validate.js","webpack:///./src/contactLogic/buildr/liquity.js","webpack:///./src/contactLogic/buildr/balance.js"],"names":["readSwapBalance","chainID","library","account","TokenA","TokenB","TokenAContract","useTokenContractMulticall","TokenBContract","callList","balanceOf","ethcallProvider","Provider","init","all","TokenAamount","TokenBamount","coinInfo","getChainCoinInfo","symbol","coinName","getBalance","getToken","tokensymbol","coinA","_","find","tokens","chainId","Token","address","decimals","getTokenImg","logoURI","$","createHTML","forcedStringHTMLMethod","target","proto","forced","sub","this","mcrPercent","Percent","MINIMUM_COLLATERAL_RATIO","toString","ccrPercent","CRITICAL_COLLATERAL_RATIO","validateTroveCreation","state","depositCollateral","resultingTrove","recoveryMode","wouldTriggerRecoveryMode","accountBalance","price","debt","lt","LUSD_MINIMUM_DEBT","stableName","isOpenableInRecoveryMode","collateralRatioIsBelowMinimum","gt","prettify","validateTroveClosure","repayLUSD","numberOfTroves","lusdBalance","validateTroveAdjustment","withdrawCollateral","borrowLUSD","originalTrove","collateralRatioIsBelowCritical","collateralRatio","liquityValidate","trove","borrowingRate","depositAmount","borrowAmount","edited","Trove","collateral","setCollateral","setDebt","total","change","whatChanged","apply","subtract","add","sysNextInfocontext","type","errorDescription","params","require","EthersLiquity","_connectByChainId","frontendTag","AddressZero","minFeeRate","gasLimit","config","liquidationRatio","LUSD_LIQUIDATION_RESERVE","getMaxBorrowingRate","liquityState","fetchLiquityEntity","connection","getSigner","undefined","userAddress","useStore","liquity","_from","getGasEstimate","borrowLUSDAmount","populate","openTrove","tx","estimateGas","rawPopulatedTransaction","originalGasEstimate","maxBorrowingRate","send","transaction","base","closeTrove","feeFrom","original","mul","Decimal","ZERO","calcTroveIndicators","debtAmount","borrowingFee","isEmpty","liquidationReserve","typeOptions","deposit","withdraw","borrow","repay","fetchAdjustBalanace","coinAmount","unit","adjustTrove","getCollateralPools","chainCoinInfo","collPools","filter","v","map","pool","isERC20","isNative","token"],"mappings":"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","file":"js/chunk-4023dc45.6916251f.js","sourcesContent":["\nimport { Contract, Provider } from '@webfans/ethers-multicall';\nimport { ethers } from 'ethers';\nimport tokens from \"@/constants/token.json\";\nimport _ from 'underscore';\n\nimport { useTokenContractMulticall \n} from \"../contacthelp/useContractMulticall.js\";\n\nimport {  Token, \n} from \"@webfans/uniswapsdk\";\n\nimport getChainCoinInfo from '@/constants/networkCoinconfig.js';\n\nexport async function readSwapBalance(chainID,library, account,TokenA,TokenB){\n    console.log('readSwapBalance');\n     const  TokenAContract = useTokenContractMulticall(TokenA);\n     const  TokenBContract = useTokenContractMulticall(TokenB);\n\n    const callList=[\n        TokenAContract.balanceOf(account),\n        TokenBContract.balanceOf(account)\n    ];\n\n    const ethcallProvider = new Provider(library,chainID);\n    await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n    let [TokenAamount,TokenBamount] = await ethcallProvider.all(callList);\n    const coinInfo = getChainCoinInfo(chainID);\n\n    if(TokenA.symbol==coinInfo.coinName){\n        TokenAamount = await library.getBalance(account);\n    }\n\n    if(TokenB.symbol==coinInfo.coinName){\n        TokenBamount = await library.getBalance(account);\n    }\n\n    return{\n        TokenAamount,TokenBamount\n    };\n\n}\n\nexport function getToken(tokensymbol,chainID){\n    console.log(tokens);\n    const coinA= _.find(tokens.tokens,{chainId:chainID,symbol:tokensymbol});\n    const TokenA = new Token(coinA.chainId,coinA.address,coinA.decimals,coinA.symbol);\n    return TokenA;\n}\n\nexport function getTokenImg(tokensymbol,chainID){\n    \n    const coinA= _.find(tokens.tokens,{chainId:chainID,symbol:tokensymbol});\n    if(coinA){\n        return coinA.logoURI;\n    }else{\n        return '';\n\n    }\n    \n}\n\n","'use strict';\nvar $ = require('../internals/export');\nvar createHTML = require('../internals/create-html');\nvar forcedStringHTMLMethod = require('../internals/string-html-forced');\n\n// `String.prototype.sub` method\n// https://tc39.es/ecma262/#sec-string.prototype.sub\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {\n  sub: function sub() {\n    return createHTML(this, 'sub', '', '');\n  }\n});\n","import {\n  Percent,\n  Trove,\n  // LUSD_MINIMUM_DEBT, //系统最小债务\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n} from \"@liquity/lib-base\";\n\nimport { stableName, LUSD_MINIMUM_DEBT } from './liquity';\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\nconst validateTroveCreation = ({ depositCollateral }, {\n  resultingTrove,\n  recoveryMode,\n  wouldTriggerRecoveryMode\n}, state) => {\n  const { accountBalance, price } = state;\n  if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n    return `Debt must be at least ${LUSD_MINIMUM_DEBT.toString()} ${stableName}`;\n  }\n  if (recoveryMode){\n    if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n      return `You're not allowed to open a Trove with less than ${ccrPercent} Collateral\n                Ratio during recovery mode. Please increase your Trove's Collateral Ratio.`;\n\n\n    }\n  }else{\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return `Collateral ratio must be at least ${mcrPercent}.`;\n    }\n    if (wouldTriggerRecoveryMode) {\n      return `You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall\n                      below ${ccrPercent}. Please increase your Trove's Collateral Ratio.`;\n    }\n  }\n  if (depositCollateral.gt(accountBalance)) {\n    return `The amount you're trying to deposit exceeds your balance by\n                    ${depositCollateral.sub(accountBalance).prettify()} BNB.`;\n  }\n  return null;\n};\n\nconst validateTroveClosure = ({ repayLUSD },{recoveryMode,wouldTriggerRecoveryMode}, state) => {\n  const { numberOfTroves, lusdBalance } = state;\n  if (numberOfTroves === 1) {\n    return `You're not allowed to close your Trove when there are no other vaults in the system.`;\n  }\n  if (recoveryMode) {\n    return `You're not allowed to close your Trove during recovery mode.`;\n  }\n  if (repayLUSD?.gt(lusdBalance)) {\n    return`You need ${repayLUSD.sub(lusdBalance).prettify()} ${stableName} more to close your Trove` ;\n  }\n  if (wouldTriggerRecoveryMode) {\n    return `You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to\n        fall below ${ccrPercent}. Please wait until the Total Collateral Ratio\n        increases.`;\n  }\n  return null;\n};\nconst validateTroveAdjustment = ({ depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD }, {originalTrove,\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode}, state) => {\n  const {price, accountBalance, lusdBalance} = state;\n  if (recoveryMode) {\n    if (withdrawCollateral) {\n      return `You're not allowed to withdraw collateral during recovery mode.`;\n    }\n    if (borrowLUSD){\n      if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n        return `Your collateral ratio must be at least ${ccrPercent} to borrow during\n                    recovery mode. Please improve your collateral ratio.`;\n      }\n      if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n        return `You're not allowed to decrease your collateral ratio during recovery mode.`;\n      }\n    }\n  }else{\n    if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n      return  `Collateral ratio must be at least ${mcrPercent}.`;\n    }\n    if (wouldTriggerRecoveryMode) {\n      return `The adjustment you're trying to make would cause the Total Collateral Ratio to\n            fall below ${ccrPercent} . Please increase your Trove's Collateral Ratio.\n            `;\n    }\n  }\n  if (repayLUSD) {\n    if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n      return ` Debt must be at least ${LUSD_MINIMUM_DEBT.toString()} ${stableName}` ;\n    }\n    if (repayLUSD.gt(lusdBalance)) {\n      return `The amount you're trying to repay exceeds your balance by ${repayLUSD.sub(lusdBalance).prettify()}`;\n    }\n  }\n  if (depositCollateral&&depositCollateral.gt(accountBalance)) {\n    return `The amount you're trying to deposit exceeds your balance by\n                ${depositCollateral.sub(accountBalance).prettify()} BNB`;\n  }\n  return null;\n};\n\nexport const liquityValidate = ({trove, borrowingRate, state, depositAmount, borrowAmount}) => {\n  const originalTrove = trove;\n  let edited = new Trove(originalTrove.collateral, originalTrove.debt);\n  edited = edited.setCollateral(depositAmount);\n  edited = edited.setDebt(borrowAmount);\n\n  //edited.setDebt(LUSD_MINIMUM_DEBT)\n  // const original = originalTrove;\n  // const borrowingRate = this.$data.borrowingRate ;\n  const { total, price } = state;\n  const change = originalTrove.whatChanged(edited, borrowingRate);\n  console.log(change);\n  if (!change) {\n    //没有变化\n    return '';\n  }\n  const resultingTrove = originalTrove.apply(change, borrowingRate);\n  const recoveryMode = total.collateralRatioIsBelowCritical(price);\n  const wouldTriggerRecoveryMode = total\n    .subtract(originalTrove)\n    .add(resultingTrove)\n    .collateralRatioIsBelowCritical(price);\n  const sysNextInfocontext = {\n    resultingTrove,\n    recoveryMode,\n    wouldTriggerRecoveryMode\n  };\n  console.log(sysNextInfocontext);\n  if (change.type === \"invalidCreation\") {\n    // Trying to create a Trove with negative net debt\n    return `Debt must be at least ${LUSD_MINIMUM_DEBT.toString()}`;\n  }\n\n  const errorDescription =\n    change.type === \"creation\"\n      ? validateTroveCreation(change.params, sysNextInfocontext, state)\n      : change.type === \"closure\"\n      ? validateTroveClosure(change.params, sysNextInfocontext, state)\n      : validateTroveAdjustment(change.params, sysNextInfocontext, state);\n  console.log('errorDescription',errorDescription);\n\n  return errorDescription || '';\n};\n\n","const { EthersLiquity,  _connectByChainId } = require(\"@webfans/lib-ethers\");\nimport {\n  Percent,\n  Difference,\n  Decimalish,\n  Decimal,\n  Trove,\n  LiquityStoreState,\n  // LUSD_LIQUIDATION_RESERVE,\n  // LUSD_MINIMUM_DEBT, //系统最小债务\n  MINIMUM_COLLATERAL_RATIO,\n  CRITICAL_COLLATERAL_RATIO,\n} from \"@liquity/lib-base\";\nimport { AddressZero } from '@ethersproject/constants';\nimport config  from '@/config/config.js';\n\nconst mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\nconst ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n\n/**********Liquity config start***************/\n// 业务地址\n// const frontendTag = '0xc7B375ce501a2432A25d584dF1f40c73c83f9534';\nconst frontendTag = AddressZero;\n// 最低费率0.5%\nconst minFeeRate = 0.005;\n// Gas Limit\nconsole.log('gasLimit');\nconst gasLimit = config.gasLimit;\nconst openGasLimit = 8000000;\n\nexport const stableName = 'LAI';\n\nconst liquidationRatio = 1.1;\n// 清算保证金\nconst LUSD_LIQUIDATION_RESERVE = 20;\n\nexport const LUSD_MINIMUM_DEBT = 200;\n\n/**********Liquity config end***************/\n\n/**\n * 获取最大借贷利率\n * */\nexport const getMaxBorrowingRate = (liquityState) => {\n  return liquityState.borrowingRate.add(minFeeRate).toString();\n};\n\n/**\n * fetch Liquity Entity\n *\n * */\nexport const fetchLiquityEntity = ({library, account, chainID}) => {\n  const connection =  _connectByChainId(library, account?library.getSigner(account):undefined, chainID, {\n    userAddress: account,\n    frontendTag,\n    useStore: \"blockPolled\"\n  });\n  // console.log(connection);\n  const liquity = EthersLiquity._from(connection);\n\n  return liquity;\n};\n\n\n/**\n * Gas Estimate\n * */\n\nexport const getGasEstimate = async ({liquity, library, account, chainID, depositAmount, borrowLUSDAmount}) => {\n  liquity = liquity || fetchLiquityEntity({library, account, chainID});\n\n  const tx = await liquity.populate.openTrove({\n    depositCollateral: depositAmount,\n    borrowLUSD: borrowLUSDAmount,\n  });\n\n  let originalGasEstimate;\n\n  try {\n    originalGasEstimate = await library.estimateGas(tx.rawPopulatedTransaction);\n    originalGasEstimate = originalGasEstimate.add(50000).toString();\n    // console.log('originalGasEstimate',originalGasEstimate, originalGasEstimate.toString(), 99999);\n  } catch (e) {\n    console.log(e, 8888);\n  }\n\n  return originalGasEstimate;\n};\n\n\n/**\n * open Trove\n * */\n\nexport const openTrove = async ({library, account, chainID, depositAmount, borrowLUSDAmount, liquityState}) => {\n  const liquity = fetchLiquityEntity({library, account, chainID});\n  const maxBorrowingRate = getMaxBorrowingRate(liquityState);\n\n  const originalGasEstimate = await getGasEstimate({liquity, library, account, chainID, depositAmount, borrowLUSDAmount});\n\n  const transaction = await liquity.send.openTrove({\n    depositCollateral: depositAmount,\n    borrowLUSD: borrowLUSDAmount,\n  }, maxBorrowingRate,{ gasLimit: originalGasEstimate });\n\n  return {\n    base: `Deposit: ${depositAmount} BNB, Debt: ${borrowLUSDAmount} ${stableName}`,\n    transaction\n  };\n};\n\n/**\n * close Trove\n * */\n\nexport const closeTrove = async ({library, account, chainID}) => {\n  const liquity = fetchLiquityEntity({library, account, chainID});\n  const transaction = await liquity.send.closeTrove({gasLimit: gasLimit});\n  return {\n    base: `Close Vault`,\n    transaction\n  };\n};\n\n\n\n/**\n * calc fee\n * liquidationReserve : 清算准备金 200 LUSD\n * price：清算价格\n * borrowingRate： 借贷利率\n * borrowingFee： 借贷费用\n * collateralRatio： 当前抵押率\n * liquidationRatio: 清算抵押率\n * */\n\nconst feeFrom  = (original, edited, borrowingRate) => {\n  const change = original.whatChanged(edited, borrowingRate);\n  if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n    return change.params.borrowLUSD.mul(borrowingRate);\n  } else {\n    return Decimal.ZERO;\n  }\n};\n\nexport const calcTroveIndicators = (liquityState, depositAmount, debtAmount) => {\n  const originalTrove = liquityState.trove;\n  let edited = new Trove(originalTrove.collateral, originalTrove.debt);\n\n  const { price, borrowingRate } = liquityState;\n\n  edited = edited.setCollateral(depositAmount);\n  edited = edited.setDebt(debtAmount);\n\n  const borrowingFee = feeFrom(originalTrove, edited, borrowingRate).toString();\n  const collateralRatio = !edited.isEmpty ? edited.collateralRatio(price).toString() : '';\n  // const originalCollateralRatio = !originalTrove.isEmpty ? originalTrove.collateralRatio(price) : undefined;\n  // const collateralRatioChange = Difference.between(collateralRatio, originalCollateralRatio);\n\n  return {\n    stableName,\n    liquidationReserve: LUSD_LIQUIDATION_RESERVE,\n    price,\n    borrowingRate,\n    borrowingFee,\n    collateralRatio,\n    liquidationRatio\n  };\n};\n\n/**\n * adjust Balance\n *\n * type:\n * deposit 存\n * Withdraw 取\n * Borrow 借\n * Repay 还\n * */\n\nconst typeOptions = {\n  deposit: 'Deposit',\n  withdraw: 'Withdraw',\n  borrow: 'Borrow',\n  repay: 'Repay',\n};\n\nexport const fetchAdjustBalanace = async ({library, account, chainID, liquityState, type, coinAmount, unit}) => {\n  const liquity = fetchLiquityEntity({library, account, chainID});\n  const maxBorrowingRate = getMaxBorrowingRate(liquityState);\n\n  let params = {};\n  switch (type) {\n    case 'deposit': params = { depositCollateral: coinAmount }; break;\n    case 'withdraw': params = { withdrawCollateral: coinAmount }; break;\n    case 'borrow': params = { borrowLUSD: coinAmount }; break;\n    case 'repay': params = { repayLUSD: coinAmount }; break;\n  }\n\n  const transaction = await liquity.send.adjustTrove(params, maxBorrowingRate,{ gasLimit });\n  return {\n    base: `${typeOptions[type]} ${coinAmount} ${unit}`,\n    transaction,\n  };\n};\n","import collPools from '@/constants/Collateralpool.json';\nimport {getCollateralStateToken, getCollateralToken, getProxyToActionsToken, getTokenBySymbol} from \"./tokens\";\nimport { getNameHex } from './create';\nimport {\n  useCollateralContractRead,\n  useCollateralStateRead,\n  useProxyActionsContractRead,\n  useProxyActionsContractSigna,\n} from \"./contractApi\";\nimport {calculateGasMargin} from \"../../contacthelp/utils\";\nimport getChainCoinInfo from '../../constants/networkCoinconfig';\n\n/**\n *  合约池列表\n *  state: true 启用，false 未启用\n *  native: true 原生代币，false 非原生\n *  只有erc20standard='false'的token为非标准ERC20合约。\n * */\n\nexport const getCollateralPools = (chainID) => {\n  const chainCoinInfo = getChainCoinInfo(chainID);\n  // return collPools.map((pool) => {\n  //   let isERC20 = true;\n  //   if(pool.token === 'LAMB') {\n  //     const token = getTokenBySymbol(chainID, pool.token);\n  //     isERC20 = !(token['erc20standard'] === 'false');\n  //   }\n  //   return {\n  //     ...pool,\n  //     isNative: pool.token === 'LAMB' ? false : chainCoinInfo.coinName === pool.token,\n  //     isERC20\n  //   };\n  // }).filter(v => v.state);\n  return collPools.filter(v => v.state).map((pool) => {\n    const isERC20 = true;\n    return {\n      ...pool,\n      isNative: chainCoinInfo.coinName === pool.token,\n      isERC20\n    };\n  });\n};\n\n/**\n *  获取抵押资产\n *  1 通过ProxyActions.sol合约获取tokenCollateralAddress\n *  2 根据tokenCollateralAddress 通过Collateral.sol合约获取 tokenCollateralStateAddress\n *  3 根据 tokenCollateralStateAddress 通过CollateralState.sol中accountCollateral方法获取抵押资产：accountCollateral\n * */\nexport const fetchPledgeNumber = async ({ web3, chainID, account, library, tokenName }) => {\n\n  const token = getProxyToActionsToken(chainID);\n  const methodName = 'collateralAddress';\n  const currencyKey = getNameHex(web3, tokenName);\n  const parameter = [currencyKey];\n  const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n\n  const collateralToken = getCollateralToken(chainID);\n  collateralToken.address = tokenCollateralAddress;\n\n  const methodName2 = 'collateralStateAddress';\n  const parameter2 = [];\n  const tokenCollateralStateAddress = await useCollateralContractRead(library, account, collateralToken, methodName2, parameter2);\n\n  const collateralStateToken = getCollateralStateToken(chainID);\n  collateralStateToken.address = tokenCollateralStateAddress;\n  const accountCollateral = await useCollateralStateRead(library, account, collateralStateToken, 'accountCollateral', [account]);\n\n  return {\n    pledgeNumber: web3.utils.fromWei(accountCollateral.toString())\n  };\n};\n\n/**\n * 估算Gas，执行合约\n * */\nexport async function contractEstimateGas(contract, methodName, parameters) {\n  const estimatedGasLimit = await contract.estimateGas[methodName](...parameters, {});\n  return await contract[methodName](...parameters, {\n    gasLimit: calculateGasMargin(estimatedGasLimit),\n  });\n}\n\n/**\n * 估算原生资产(ETH,BNB,HT)的Gas，执行合约\n * */\nexport async function contractEstimateGasNative(contract, methodName, parameters, amount) {\n  const estimatedGasLimit = await contract.estimateGas[methodName](...parameters, {\n    value: amount\n  });\n  return await contract[methodName](...parameters, {\n    value: amount,\n    gasLimit: calculateGasMargin(estimatedGasLimit),\n  });\n}\n\n/**\n * type:\n * join 抵押资产，例如LAMB --> LAMB\n * exit 释放资产，例如LAMB --> LAMB\n * joinNative 抵押原生资产\n * exitNative 退出原生资产\n *\n * Mint 铸造资产，例如LAMB --> scUSD\n * Burn 释放资产，例如scUSD --> LAMB\n *\n * 标准的ERC20 SCASH\n * 原生代币 ETH\n * 非标准的ERC20 LAMB\n *\n * */\n\nconst typeOption = {\n  'joinERC20': 'Deposit',\n  'join': 'Deposit',\n  'joinNative': 'Deposit',\n  'exit': 'Withdraw',\n  'exitNative': 'Withdraw',\n  'mint': 'Generate',\n  'burn': 'Payback',\n};\n\nexport const fetchBalanaceChange = async ({ type, web3, chainID, account, library, tokenName, coinAmount, unit}) => {\n  const token = getProxyToActionsToken(chainID);\n  const ProxyActionsContract = useProxyActionsContractSigna(library, account, token);\n  const currencyKey = getNameHex(web3, tokenName);\n  const amount = web3.utils.toWei(coinAmount);\n\n  try {\n    let response;\n    switch (type) {\n      case 'joinERC20':  // 标准ERC20\n        response = await contractEstimateGas(ProxyActionsContract, 'join', [currencyKey, amount]);\n        break;\n      case 'join':  // 非标准ERC20\n        response = await contractEstimateGas(ProxyActionsContract, 'join', [currencyKey, amount, false]);\n        break;\n      case 'joinNative': // 原生代币\n        response = await contractEstimateGasNative(ProxyActionsContract, 'joinNative', [currencyKey], amount);\n        break;\n      case 'exit':\n        response = await contractEstimateGas(ProxyActionsContract, 'exit', [currencyKey, amount]);\n        break;\n      case 'exitNative':\n        response = await contractEstimateGas(ProxyActionsContract, 'exitNative', [currencyKey, amount]);\n        break;\n      case 'mint':\n        response = await contractEstimateGas(ProxyActionsContract, 'mint', [currencyKey, amount]);\n        break;\n      case 'burn':\n        response = await contractEstimateGas(ProxyActionsContract, 'burn', [currencyKey, amount]);\n        break;\n    }\n    return {\n      base: `${typeOption[type]} ${coinAmount} ${unit}`,\n      hash: response.hash,\n      response: response,\n    };\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n\n"],"sourceRoot":""}