{"version":3,"sources":["webpack:///./src/contactLogic/history.js","webpack:///./node_modules/core-js/modules/es.string.sub.js","webpack:///./src/views/playground/buildr.vue?493a","webpack:///./src/contactLogic/earn/contractApi.js","webpack:///./src/contactLogic/earn/Reward.js","webpack:///./src/contactLogic/earn/scusdDeposit.js","webpack:///./src/contactLogic/synth/assets.js","webpack:///src/views/playground/buildr.vue","webpack:///./src/views/playground/buildr.vue?ec93","webpack:///./src/views/playground/buildr.vue"],"names":["readbuildrHistory","chainID","account","pageNum","showNum","buildrHistory","data","forEach","item","show","proxyformat","txs","readSyntheticHistory","syntheticHistory","Syntheticformat","tokenNameByaddress","address","coinA","_","find","tokens","chainId","toLowerCase","undefined","symbol","swapExactTokensForTokensformat","inamount","amount","outamount","tokenADDRESSA","amount_token_address","tokenADDRESSB","tokenA","tokenB","amountA","amountB","$","createHTML","forcedStringHTMLMethod","target","proto","forced","sub","this","render","_vm","_h","$createElement","_c","_self","on","approve","_v","join","queryAvailableassets","$event","tokenMint","getSCusdt","tokenBurn","tokenExit","readHistory","chainTokenPrice","getearnList","syncReward","getscsudValtAddress","readscsudValt","withdrawscsudValt","readMyLP","readMyLP2","lp2Masterwithdraw","getPriceinfo","History","getfetchSynthAssets","Getstore","openTrove","adjustTrove","closeTrove","changeva","fee","getStabilityPool","stakeLQTStabilityPool","withdrawLUSDFromStabilityPool","withdrawGainsFromStabilityPool","transferCollateralGainToTrove","Stakingreadinfo","Stakingpledge","StakingWithdraw","StakingExtractreward","staticRenderFns","useProxyActionsContractRead","library","token","methodName","parameter","contract","useproxyActionsContract","result","useCollateralContractRead","useCollateralContract","useSynthetixRewardRead","useSynthetixRewardContract","fetchRewardAddress","web3","tokenName","getProxyToActionsToken","currencyKey","getNameHex","tokenCollateralAddress","collateralToken","getCollateralToken","methodName2","parameter2","Address","getUnClaimedReward","objToken","getProxyVaultToken","synthetixTokens","name","getMasterChefToken","getSyntheticToken","getSCUSDVaultContract","Token","VaultContract","useScusdDeposit_VaultContract","getSCUSDMasterContract","useScusdDeposit_MasterContract","getSCUSDMasterContractSigner","getMasterUserInfo","MasterContract","poolName","Web3","getUserInfo","getMasterPendingScash","pendingScash","getmaxExitableAmount","Contract","useScusdDeposit_syntheticContract","maxExitableAmount","Masterwithdraw","estimateGas","withdraw","esGas","gasLimit","tx","fetchSynthAssetsList","products","callList","product","nameKey","baseSymbol","getExchangerToken","ContractMulticall","useScusdDeposit_ExchangerContractMulticall","push","ethcallProvider","Provider","init","all","synthAddressList","callList2","synthContract","useSscusdDeposit_SynthContractMulticall","balanceOf","synthAssetsList","synthAssets","map","index","assetAmount","utils","fromWei","toString","component"],"mappings":"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","file":"js/chunk-45a03999.ff9fd72d.js","sourcesContent":["\nimport {swapHistory,pledgeHistory,buildrHistory,syntheticHistory} from \"@/constants/apiconfig.js\";\nimport _ from 'underscore';\nimport tokens from \"@/constants/token.json\";\n\nimport LPtoken from \"@/constants/minertoken.json\";\n\nexport  async function readSwapHistory(chainID,account,pageNum,showNum){\n    const data = await swapHistory(account,pageNum,showNum,chainID);\n    //['swapExactTokensForTokens','removeLiquidityWithPermit','addLiquidity']\n\n    data.data.forEach((item)=>{\n        if(item.method_name == 'removeLiquidityWithPermit'){\n            item.show = removeLiquidityWithPermitformat(item.txs,chainID);\n        }else if( item.method_name == 'swapExactTokensForTokens'){\n            item.show = swapExactTokensForTokensformat(item.txs,chainID);\n        }else if(item.method_name == 'addLiquidity'){\n            item.show = addLiquidityformat(item.txs,chainID);\n\n        }else if(item.method_name == 'removeLiquidityETHWithPermit'){\n            item.show = removeLiquidityWithPermitformatETH(item.txs,chainID);\n\n        }else if(item.method_name == 'addLiquidityETH'){\n            item.show = addLiquidityformatETH(item.txs,chainID);\n\n        }else if(item.method_name == 'swapExactTokensForETH'){\n            item.show = swapExactTokensForTokensformatETH(item.txs,chainID);\n\n        }else if(item.method_name == 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens'){\n            item.show = removeLiquidityWithPermitformatETH(item.txs,chainID);\n\n        }\n\n        //removeLiquidityETHWithPermitSupportingFeeOnTransferTokens,\n\n\n    });\n\n\n\n    console.log(data);\n    return data;\n\n}\n\nexport  async function readPledgeHistory(chainID,account,pageNum,showNum){\n    const data = await pledgeHistory(account,pageNum,showNum,chainID);\n    //['stake','exit','getReward']\n    console.log('readPledgeHistory');\n\n    data.data.forEach((item)=>{\n         if(item.category== \"uniswap_stake\"){\n            if(item.method_name == 'stake'){\n                item.show = stakeformat(item.txs,chainID);\n            }else if( item.method_name == 'exit'){\n                item.show = exitformat(item.txs,chainID);\n            }else if(item.method_name == 'getReward'){\n                item.show = getRewardformat(item.txs,chainID);\n    \n            }\n\n         }else{\n            item.show = Syntheticformat(item.txs,chainID);\n         }\n        \n\n\n    });\n\n\n\n    console.log(data);\n    return data;\n\n}\n\n\n\nexport  async function readbuildrHistory(chainID,account,pageNum,showNum){\n    const data = await buildrHistory(account,pageNum,showNum,chainID);\n    //['stake','exit','getReward']\n\n    data.data.forEach((item)=>{\n        item.show = proxyformat(item.txs,chainID);\n\n        // if(item.method_name == 'proxyMinted'){\n        //     item.show = proxyformat(item.txs,chainID);\n        // }else if( item.method_name == 'proxyBurned'){\n        //     // item.show = exitformat(item.txs,chainID);\n        // }else if(item.method_name == 'proxyJoined'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }else if(item.method_name == 'proxyExited'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }else if(item.method_name == 'approval'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }\n\n\n    });\n\n    return data;\n\n}\n\nexport  async function readSyntheticHistory(chainID,account,pageNum,showNum){\n    console.log('readSyntheticHistory');\n    const data = await syntheticHistory(account,pageNum,showNum,chainID);\n    //['stake','exit','getReward']\n\n    data.data.forEach((item)=>{\n        item.show = Syntheticformat(item.txs,chainID);\n\n        // if(item.method_name == 'proxyMinted'){\n        //     item.show = proxyformat(item.txs,chainID);\n        // }else if( item.method_name == 'proxyBurned'){\n        //     // item.show = exitformat(item.txs,chainID);\n        // }else if(item.method_name == 'proxyJoined'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }else if(item.method_name == 'proxyExited'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }else if(item.method_name == 'approval'){\n        //     // item.show = getRewardformat(item.txs,chainID);\n\n        // }\n\n\n    });\n\n    return data;\n\n}\n\n\n\nfunction tokenNameByaddress(address,chainID){\n    const coinA= _.find(tokens.tokens,(item)=>{\n        if(item.chainId==chainID&&item.address.toLowerCase()==address.toLowerCase()){\n            return item;\n        }\n        // {chainId:chainID,address:address}\n    });\n    if(coinA==undefined){\n        return '';\n    }\n    return coinA.symbol;\n\n}\n\nfunction tokenNameByaddressStack(address,chainID){\n    const coinA= _.find(LPtoken.tokens,(item)=>{\n        if(item.chainId==chainID&&item.address.toLowerCase()==address.toLowerCase()){\n            return item;\n        }\n        // {chainId:chainID,address:address}\n    });\n    if(coinA==undefined){\n        return tokenNameByaddress(address,chainID);\n    }\n    return coinA.symbol;\n\n}\n\nfunction removeLiquidityWithPermitformat(item,chainID){\n    const lpamount = item[0].amount;\n    const  tokenADDRESSA = item[2].amount_token_address ;\n    const  tokenADDRESSB = item[3].amount_token_address ;\n    const amountA = item[2].amount;\n    const amountB = item[3].amount;\n\n    return {\n        inamount:lpamount,\n        outamount:[amountA,amountB],\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n\n}\n\nfunction removeLiquidityWithPermitformatETH(item,chainID){\n    const lpamount = item[0].amount;\n    const  tokenADDRESSA = item[2].amount_token_address ;\n    const  tokenADDRESSB = item[3].amount_token_address ;\n    const amountA = item[2].amount;\n    const amountB = item[3].amount;\n\n    return {\n        inamount:lpamount,\n        outamount:[amountA,amountB],\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n\n}\n\nexport  function swapExactTokensForTokensformat(item,chainID){\n    const inamount = item[0].amount;\n    const outamount = item[1].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  tokenADDRESSB = item[1].amount_token_address ;\n\n    return {\n        inamount:inamount,\n        outamount:outamount,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n}\n\nexport  function swapExactTokensForTokensformatETH(item,chainID){\n    const inamount = item[0].amount;\n    const outamount = item[1].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  tokenADDRESSB = item[1].amount_token_address ;\n\n    return {\n        inamount:inamount,\n        outamount:outamount,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n}\n\nfunction addLiquidityformat(item,chainID){\n    const inamount = item[0].amount;\n    const outamount = item[1].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  tokenADDRESSB = item[1].amount_token_address ;\n\n    const amountLP = item[2].amount;\n\n\n    return {\n        inamount:[inamount,outamount],\n        outamount:amountLP,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n}\n\n\nfunction addLiquidityformatETH(item,chainID){\n    const inamount = item[0].amount;\n    const outamount = item[1].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  tokenADDRESSB = item[1].amount_token_address ;\n\n    const amountLP = item[2].amount;\n\n\n    return {\n        inamount:[inamount,outamount],\n        outamount:amountLP,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n    };\n\n}\n\n\nfunction stakeformat(item,chainID){\n    const inamount = item[0].amount;\n\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  poolADDRESS = item[0].to ;\n\n    return {\n        inamount:inamount,\n        poolADDRESS,\n        tokenA:tokenNameByaddressStack(tokenADDRESSA,chainID),\n\n    };\n\n}\n\nfunction exitformat(item,chainID){\n    const outamountA = item[0].amount;\n    const outamountB = item[1].amount;\n\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  tokenADDRESSB = item[1].amount_token_address ;\n\n    const  poolADDRESS = item[1].from ;\n\n    return {\n        outamountA,\n        outamountB,\n        poolADDRESS,\n        tokenA:tokenNameByaddressStack(tokenADDRESSA,chainID),\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)\n\n    };\n\n}\n\nfunction getRewardformat(item,chainID){\n    const inamount = item[0].amount;\n\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n    const  poolADDRESS = item[0].from ;\n\n    return {\n        outamount:inamount,\n        poolADDRESS,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n\n    };\n\n}\n\n\nfunction proxyBurnedformat(item,chainID){\n    const inamount = item[0].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n\n    return {\n        amount:inamount,\n        tokenA:tokenNameByaddressStack(tokenADDRESSA,chainID),\n\n    };\n}\n\nfunction proxyformat(item,chainID){\n    const inamount = item[0].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n\n    return {\n        amount:inamount,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID),\n\n    };\n}\n\nfunction Syntheticformat(item,chainID){\n    const inamount = item[0].amount;\n\n    const  tokenADDRESSA = item[0].amount_token_address ;\n\n    const inamountB = item[1].amount;\n\n    const  tokenADDRESSB = item[1].amount_token_address ;\n    //这里需要配置好加密货币或股票的地址\n    return {\n        amountA:inamount,\n        tokenA:tokenNameByaddress(tokenADDRESSA,chainID)||tokenADDRESSA,\n        amountB:inamount,\n        tokenB:tokenNameByaddress(tokenADDRESSB,chainID)||tokenADDRESSB,\n\n    };\n}\n\n","'use strict';\nvar $ = require('../internals/export');\nvar createHTML = require('../internals/create-html');\nvar forcedStringHTMLMethod = require('../internals/string-html-forced');\n\n// `String.prototype.sub` method\n// https://tc39.es/ecma262/#sec-string.prototype.sub\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {\n  sub: function sub() {\n    return createHTML(this, 'sub', '', '');\n  }\n});\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('button',{on:{\"click\":_vm.approve}},[_vm._v(\" 授权操作 \")]),_c('br'),_c('button',{on:{\"click\":_vm.join}},[_vm._v(\" 加入操作 \")]),_c('br'),_c('button',{on:{\"click\":_vm.queryAvailableassets}},[_vm._v(\" 查询可用lamb \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.tokenMint('LAMB')}}},[_vm._v(\" 铸造操作 \")]),_c('br'),_c('button',{on:{\"click\":_vm.getSCusdt}},[_vm._v(\" 查询可用的scusdt \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.tokenBurn('LAMB')}}},[_vm._v(\" 释放 \")]),_c('br'),_c('button',{on:{\"click\":function($event){return _vm.tokenExit('LAMB')}}},[_vm._v(\" 取出LAMB \")]),_c('br'),_c('button',{on:{\"click\":_vm.readHistory}},[_vm._v(\" 读取历史记录 \")]),_c('br'),_c('button',{on:{\"click\":_vm.chainTokenPrice}},[_c('br'),_vm._v(\" 读取ht价格 \")]),_c('br'),_c('button',{on:{\"click\":_vm.getearnList}},[_vm._v(\" 读取赚钱列表 \")]),_c('br'),_c('button',{on:{\"click\":_vm.syncReward}},[_vm._v(\" 读取铸造金库未提取的奖励 \")]),_c('br'),_c('button',{on:{\"click\":_vm.getscsudValtAddress}},[_vm._v(\" scusd 存款 \")]),_c('br'),_c('button',{on:{\"click\":_vm.readscsudValt}},[_vm._v(\" scusd 累计存款 \")]),_c('br'),_c('button',{on:{\"click\":_vm.withdrawscsudValt}},[_vm._v(\" scusd 取款 \")]),_c('br'),_c('button',{on:{\"click\":_vm.readMyLP}},[_vm._v(\" 我的 scusd存款份额 \")]),_c('br'),_c('button',{on:{\"click\":_vm.readMyLP2}},[_vm._v(\" 查询我的存款提取的scusd \")]),_c('br'),_c('button',{on:{\"click\":_vm.lp2Masterwithdraw}},[_vm._v(\" 提取奖励 \")]),_c('button',{on:{\"click\":_vm.getPriceinfo}},[_vm._v(\" 读取单个交易对价格 \")]),_c('br'),_c('button',{on:{\"click\":_vm.History}},[_vm._v(\" 读取历史记录 \")]),_c('br'),_c('button',{on:{\"click\":_vm.getfetchSynthAssets}},[_vm._v(\" 批量读取合成资产的余额 \")]),_c('br'),_c('button',{on:{\"click\":_vm.readSyntheticHistory}},[_vm._v(\" 读取资产合成历史记录 \")]),_c('br'),_c('button',{on:{\"click\":_vm.Getstore}},[_vm._v(\" sdk载入系统数据 \")]),_c('br'),_c('button',{on:{\"click\":_vm.openTrove}},[_vm._v(\" 创建 \")]),_c('br'),_c('button',{on:{\"click\":_vm.adjustTrove}},[_vm._v(\" 调整 \")]),_c('br'),_c('br'),_c('button',{on:{\"click\":_vm.closeTrove}},[_vm._v(\" 关闭 \")]),_c('br'),_c('button',{on:{\"click\":_vm.changeva}},[_vm._v(\" 构建验证 \")]),_c('br'),_c('button',{on:{\"click\":_vm.fee}},[_vm._v(\" 手续费相关 \")]),_c('br'),_c('button',{on:{\"click\":_vm.getStabilityPool}},[_vm._v(\" Stability Pool 展示信息相关 \")]),_c('br'),_c('button',{on:{\"click\":_vm.stakeLQTStabilityPool}},[_vm._v(\" Stability Pool 存钱 \")]),_c('br'),_c('button',{on:{\"click\":_vm.withdrawLUSDFromStabilityPool}},[_vm._v(\" Stability Pool 取钱 \")]),_c('br'),_c('button',{on:{\"click\":_vm.withdrawGainsFromStabilityPool}},[_vm._v(\" Stability Pool 提取奖励 \")]),_c('br'),_c('button',{on:{\"click\":_vm.transferCollateralGainToTrove}},[_vm._v(\" Stability Pool 提取奖励，并将eth存款 \")]),_c('br'),_c('button',{on:{\"click\":_vm.Stakingreadinfo}},[_vm._v(\" Staking 读取信息 \")]),_c('br'),_c('button',{on:{\"click\":_vm.Stakingpledge}},[_vm._v(\" Staking 存钱 \")]),_c('br'),_c('button',{on:{\"click\":_vm.StakingWithdraw}},[_vm._v(\" Staking 取钱 \")]),_c('br'),_c('button',{on:{\"click\":_vm.StakingExtractreward}},[_vm._v(\" Staking 提取奖励 \")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { TokenAmount } from \"@webfans/uniswapsdk\";\nimport {\n  useTokenContract,\n  useCollateralContract,\n  useproxyActionsContract,\n  useExchangeRatesContract,\n  useProxyContract,\n  useCollateralStateContract,\n  useSynthetixRewardContract\n} from \"../../contacthelp/useContract.js\";\nimport { useTokenAllowance } from \"../../contacthelp/Allowances\";\n\n/**\n *  获取某个币的数量\n * */\nexport async function useTokenbalance(library, account, token) {\n  const contract = useTokenContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract.balanceOf(account);\n  } catch (error) {\n    console.log(error);\n  }\n  return new TokenAmount(token, result.toString());\n}\n\n/**\n *  获取铸造代理只读数据\n *\n * */\n\nexport async function useProxyActionsContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useproxyActionsContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n/**\n *  使用场景：\n *  获取抵押合约中的状态变量：抵押率、稳定费率，清算抵押率，全球scUSD债务上限\n *\n * */\n\nexport async function useCollateralContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useCollateralContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n/**\n * 获取货币价格\n *\n * */\n\nexport async function useExchangeRatesContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useExchangeRatesContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport async function useProxyContractRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useProxyContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport async function useCollateralStateRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useCollateralStateContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\nexport function useProxyActionsContractSigna(\n  library,\n  account,\n  token\n\n) {\n  const contract = useproxyActionsContract(library, account, token.address, true);\n  console.log(contract);\n  return contract;\n}\n\nexport async function useNeedApproveInput(\n  library,\n  account,\n  token,\n  spender\n) {\n  const currentAllowance = await useTokenAllowance(\n    library,\n    account,\n    token,\n    account ?? undefined,  // 当前账户\n    spender   // 授权地址\n  );\n  console.log(currentAllowance);\n  return currentAllowance;\n}\n\n\nexport async function useSynthetixRewardRead(\n  library,\n  account,\n  token,\n  methodName,\n  parameter\n) {\n  const contract = useSynthetixRewardContract(library, account, token.address, false);\n  let result;\n  try {\n    result = await contract[methodName](...parameter);\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n\n","import collPools from '@/constants/Collateralpool.json';\nimport {getCollateralStateToken, getCollateralToken, getProxyToActionsToken, getTokenBySymbol} from \"../buildr/tokens\";\nimport { getNameHex } from '../buildr/create';\nimport {\n  useCollateralContractRead,\n  useCollateralStateRead,\n  useProxyActionsContractRead,\n  useProxyActionsContractSigna,\n  useSynthetixRewardRead\n} from \"./contractApi\";\n\nimport {calculateGasMargin} from \"../../contacthelp/utils\";\nimport getChainCoinInfo from '../../constants/networkCoinconfig';\n\n\n\n/**\n *  获取抵押资产\n *  1 通过ProxyActions.sol合约获取tokenCollateralAddress\n *  2 根据tokenCollateralAddress 通过Collateral.sol合约获取 tokenCollateralStateAddress\n *  3 根据 tokenCollateralStateAddress 通过CollateralState.sol中accountCollateral方法获取抵押资产：accountCollateral\n * */\n\nexport const fetchRewardAddress = async ({ web3, chainID, account, library, tokenName }) => {\n    console.log({ web3, chainID, account, library, tokenName });\n    const token = getProxyToActionsToken(chainID);\n    const methodName = 'collateralAddress';\n    const currencyKey = getNameHex(web3, tokenName);\n    const parameter = [currencyKey];\n    const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n\n    const collateralToken = getCollateralToken(chainID);\n    collateralToken.address = tokenCollateralAddress;\n\n    const methodName2 = 'rewarderAddress';\n    const parameter2 = [];\n    const Address = await useCollateralContractRead(library, account, collateralToken, methodName2, parameter2);\n\n    return Address;\n  };\n\n\n\n  export const getUnClaimedReward = async ({ web3, chainID, account, library, tokenName }) => {\n      console.log(web3, chainID, account, library, tokenName );\n      const Address = await fetchRewardAddress({ web3, chainID, account, library, tokenName }) ;\n      const objToken =  getCollateralToken(chainID);\n\n      objToken.address = Address;\n\n\n\n    // const token = getProxyToActionsToken(chainID);\n    // const methodName = 'collateralAddress';\n    // const currencyKey = getNameHex(web3, tokenName);\n    // const parameter = [currencyKey];\n    // const tokenCollateralAddress = await useProxyActionsContractRead(library, account, token, methodName, parameter);\n\n    // const collateralToken = getCollateralToken(chainID);\n    // collateralToken.address = tokenCollateralAddress;\n\n    const methodName = 'getUnClaimedReward';\n    const parameter = [account];\n\n    const result = await useSynthetixRewardRead(library, account, objToken, methodName, parameter);\n\n    return result;\n  };\n\n\n","import collPools from '@/constants/Collateralpool.json';\nimport {getCollateralStateToken, getCollateralToken, getProxyToActionsToken, getTokenBySymbol} from \"../buildr/tokens\";\nimport { getNameHex } from '../buildr/create';\nimport {\n  useCollateralContractRead,\n  useCollateralStateRead,\n  useProxyActionsContractRead,\n  useProxyActionsContractSigna,\n  useSynthetixRewardRead\n} from \"./contractApi\";\n\nimport {calculateGasMargin} from \"../../contacthelp/utils\";\nimport getChainCoinInfo from '../../constants/networkCoinconfig';\n\nimport {useScusdDeposit_VaultContract,useScusdDeposit_MasterContract,useScusdDeposit_syntheticContract} from '../../contacthelp/useContract.js';\n\nimport synthetixTokens from \"@/constants/synthetix.json\";\nimport Web3 from 'web3';\n\n\n\nexport const getProxyVaultToken = (chainID) => {\n   const token = synthetixTokens.find((token) => {\n     return chainID === token.chainId && token.name === 'ProxyVault';\n   });\n   return token || {};\n };\n\n export const getMasterChefToken = (chainID) => {\n   const token = synthetixTokens.find((token) => {\n     return chainID === token.chainId && token.name === 'MasterChef';\n   });\n   return token || {};\n };\n\n export const getSyntheticToken = (chainID) => {\n  const token = synthetixTokens.find((token) => {\n    return chainID === token.chainId && token.name === 'Synthetic';\n  });\n  return token || {};\n};\n\nexport  function getSCUSDVaultContract({chainID,account, library}){\n   const Token =  getProxyVaultToken(chainID);\n   const VaultContract =  useScusdDeposit_VaultContract(library,account,Token.address,true);\n\n   return VaultContract;\n\n}\n\nexport  function getSCUSDMasterContract({chainID,account, library}){\n   const Token =  getMasterChefToken(chainID);\n   const VaultContract =  useScusdDeposit_MasterContract(library,account,Token.address,false);\n\n   return VaultContract;\n\n}\n\nexport  function getSCUSDMasterContractSigner({chainID,account, library}){\n  const Token =  getMasterChefToken(chainID);\n  const VaultContract =  useScusdDeposit_MasterContract(library,account,Token.address,true);\n\n  return VaultContract;\n\n}\n\nexport  function getMasterUserInfo({chainID,account, library}){\n   const MasterContract = getSCUSDMasterContract({chainID,account, library});\n   const poolName =getNameHex(Web3,'Synth');\n\n   const data = MasterContract.getUserInfo(poolName, account);\n\n   return data;\n\n}\n\nexport  function getMasterPendingScash({chainID,account, library}){\n   const MasterContract = getSCUSDMasterContract({chainID,account, library});\n   const poolName =getNameHex(Web3,'Synth');\n\n   const data = MasterContract.pendingScash(poolName, account);\n\n   return data;\n\n}\n\nexport async function getmaxExitableAmount({chainID,account, library}){\n  const Token = getSyntheticToken(chainID);\n  const Contract = useScusdDeposit_syntheticContract(library,account,Token.address,true);\n\n\n  const data = await Contract.maxExitableAmount(account);\n\n  return data;\n\n}\n\n\nexport async function Masterwithdraw({chainID,account, library}){\n  const MasterContract = getSCUSDMasterContractSigner({chainID,account, library});\n  const poolName =getNameHex(Web3,'Synth');\n  const esGas = await MasterContract.estimateGas.withdraw(poolName);\n  const tx = await MasterContract.withdraw(poolName,{\n    gasLimit: esGas\n  });\n\n  return tx;\n\n}\n\n\n\n","import { getNameHex } from \"../buildr/create\";\nimport {\n  useScusdDeposit_ExchangerContractMulticall,\n  useSscusdDeposit_SynthContractMulticall\n} from '@/contacthelp/useContractMulticall.js';\nimport { useExchangerContract } from './contractApi';\nimport { getExchangerToken } from \"../buildr/tokens\";\nimport { Contract, Provider } from '@webfans/ethers-multicall';\nimport { getMasterUserInfo } from \"../earn/scusdDeposit\";\n\n\n\n/**\n *  获取合成的scUSD余额(LP)\n * */\n\nexport const fetchSynthScUSDBalance = async ({chainID, account, library}) => {\n  try {\n    const data = await getMasterUserInfo({ chainID, account, library });\n    return {\n      scUSDAmount: data[0].toString()\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/**\n * 获取Assets数量\n * 1 根据Exchanger.sol合约的synths方法，通过合约资产的TokenName获取合约地址。\n * 2 根据合约地址,通过Synth.sol合约的balanceOf方法获取资产数量。\n * 3 目前只部署了sBTC\n * */\n\nexport const fetchSynthAssetsList = async ({web3, chainID, account, library, products}) => {\n  const callList = [] ;\n  products.forEach((product)=>{\n    const methodName = 'synths';\n    const nameKey = getNameHex(web3, product.baseSymbol);\n    const parameter = [nameKey];\n    const Token = getExchangerToken(chainID);\n\n    const ContractMulticall = useScusdDeposit_ExchangerContractMulticall(Token);\n    callList.push(ContractMulticall[methodName](...parameter));\n  });\n\n  const ethcallProvider = new Provider(library, chainID);\n  await ethcallProvider.init(); // Only required when `chainId` is not provided in the `Provider` constructor\n  const synthAddressList = await ethcallProvider.all(callList);\n\n  const callList2 = [];\n  synthAddressList.forEach((address)=>{\n    const synthContract = useSscusdDeposit_SynthContractMulticall({ address });\n\n    // callList2.push(synthContract.symbol());\n    callList2.push(synthContract.balanceOf(account));\n  });\n  const synthAssetsList = await ethcallProvider.all(callList2);\n  const synthAssets = products.map((product, index) => {\n    const assetAmount = web3.utils.fromWei(synthAssetsList[index].toString());\n    // console.log(index, product.baseSymbol, synthAddressList[index], assetAmount);\n    return {\n      ...product,\n      assetAmount\n    };\n  });\n\n  return synthAssets;\n};\n\n\n/**\n * 获取用户scUSD净值\n * */\n\nexport const fetchAccountNetValue = async ({web3, chainID, account, library, amount}) => {\n  const methodName = 'calAmountFromBlackhole';\n  const parameter =  [web3.utils.toWei(amount.toString())];\n  const [netValue, direction] = await useExchangerContract(chainID, account, library, methodName, parameter);\n\n  return {\n    netValue: web3.utils.fromWei(netValue.toString()),\n    direction,\n  };\n};\n\n\n/**\n * 获取当前手续费率\n * currFeeRate 当前费率\n * direction: true 表示费率为负数，false 表示费率为正\n * */\n\nexport const fetchCurrFeeRate = async ({web3, chainID, account, library, amount}) => {\n  const methodName = 'currentFeeRate';\n  const parameter =  [];\n  const [currFeeRate, direction]  = await useExchangerContract(chainID, account, library, methodName, parameter);\n\n  let feeRate = web3.utils.fromWei(currFeeRate.toString());\n  feeRate = direction ? -feeRate : feeRate;\n\n  return {\n    currFeeRate: feeRate,\n  };\n};\n","<template>\n  <div>\n    <button @click=\"approve\">\n      授权操作\n    </button><br>\n    <button @click=\"join\">\n      加入操作\n    </button><br>\n    <button @click=\"queryAvailableassets\">\n      查询可用lamb\n    </button><br>\n    <button @click=\"tokenMint('LAMB')\">\n      铸造操作\n    </button><br>\n    <button @click=\"getSCusdt\">\n      查询可用的scusdt\n    </button><br>\n    <button @click=\"tokenBurn('LAMB')\">\n      释放\n    </button>\n    <br>\n    <button @click=\"tokenExit('LAMB')\">\n      取出LAMB\n    </button><br>\n    <button @click=\"readHistory\">\n      读取历史记录\n    </button><br>\n    <button @click=\"chainTokenPrice\">\n      <br>\n      读取ht价格\n    </button>\n    <br>\n\n    <button @click=\"getearnList\">\n      读取赚钱列表\n    </button>\n    <br>\n    <button @click=\"syncReward\">\n      读取铸造金库未提取的奖励\n    </button>\n    <br>\n    <button @click=\"getscsudValtAddress\">\n      scusd 存款\n    </button>\n    <br>\n    <button @click=\"readscsudValt\">\n      scusd 累计存款\n    </button>\n    <br>\n    <button @click=\"withdrawscsudValt\">\n      scusd 取款\n    </button>\n    <br>\n    <button @click=\"readMyLP\">\n      我的 scusd存款份额\n    </button>\n    <br>\n    <button @click=\"readMyLP2\">\n      查询我的存款提取的scusd\n    </button>\n    <br>\n    <button @click=\"lp2Masterwithdraw\">\n      提取奖励\n    </button>\n    <button @click=\"getPriceinfo\">\n      读取单个交易对价格\n    </button>\n    <br>\n    <button @click=\"History\">\n      读取历史记录\n    </button>\n    <br>\n    <button @click=\"getfetchSynthAssets\">\n      批量读取合成资产的余额\n    </button>\n    <br>\n    <button @click=\"readSyntheticHistory\">\n      读取资产合成历史记录\n    </button><br>\n    <button @click=\"Getstore\">\n      sdk载入系统数据\n    </button><br>\n    <button @click=\"openTrove\">\n      创建\n    </button><br>\n    <button @click=\"adjustTrove\">\n      调整\n    </button><br>\n    <br>\n    <button @click=\"closeTrove\">\n      关闭\n    </button>\n    <br>\n    <button @click=\"changeva\">\n      构建验证\n    </button>\n    <br>\n    <button @click=\"fee\">\n      手续费相关\n    </button>\n    <br>\n    <button @click=\"getStabilityPool\">\n      Stability Pool 展示信息相关\n    </button>\n    <br>\n    <button @click=\"stakeLQTStabilityPool\">\n      Stability Pool 存钱\n    </button>\n    <br>\n    <button @click=\"withdrawLUSDFromStabilityPool\">\n      Stability Pool 取钱\n    </button>\n    <br>\n    <button @click=\"withdrawGainsFromStabilityPool\">\n      Stability Pool 提取奖励\n    </button>\n    <br>\n    <button @click=\"transferCollateralGainToTrove\">\n      Stability Pool 提取奖励，并将eth存款\n    </button>\n    <br>\n    <button @click=\"Stakingreadinfo\">\n      Staking 读取信息\n    </button>\n    <br>\n    <button @click=\"Stakingpledge\">\n      Staking 存钱\n    </button>\n    <br>\n    <button @click=\"StakingWithdraw\">\n      Staking 取钱\n    </button>\n    <br>\n    <button @click=\"StakingExtractreward\">\n      Staking 提取奖励\n    </button>\n  </div>\n</template>\n<script>\n  /* eslint-disable */\n  import { mapState } from 'vuex';\n  import  {useProxyActionsContractRead,useProxyContractRead,useProxyActionsContractSigna,\n    useTokenbalance,\n    useCollateralContractRead}  from '@/contactLogic/buildr/contractApi.js';\n  import {getTokenBySymbol,getProxyActionsToken,getProxyToActionsToken,\n    getCollateralToken}  from '@/contactLogic/buildr/tokens.js';\n  import {useTokenApprove} from '@/contacthelp/Approve.js';\n  import {readbuildrHistory,readSyntheticHistory} from '@/contactLogic/history.js';\n  import Web3 from 'web3';\n  import   {getPrice} from '@/contactLogic/tokenPrice.js';\n  // import {StakingRewardListbatch} from '@/views/earn/utils/helpUtils/mineUtilFunc.js';\n  import {getUnClaimedReward} from '@/contactLogic/earn/Reward.js';\n  import {fetchCollateralIndicatorsCurrentDebt} from '@/contactLogic/buildr/create.js';\n  import {getSCUSDVaultContract,getMasterUserInfo,getMasterPendingScash,\n    getmaxExitableAmount,Masterwithdraw} from '@/contactLogic/earn/scusdDeposit.js';\n  import {getTokenPriceinfo,getTokenListPriceinfo,getTokenHistory} from '@/contactLogic/Oracles.js'\n  import {fetchSynthAssetsList} from '@/contactLogic/synth/assets.js';\n  const { Wallet, providers } = require(\"ethers\");\n  const { EthersLiquity,  _connectByChainId } = require(\"@webfans/lib-ethers\");\n  import {\n    Percent,\n    Difference,\n    Decimalish,\n    Decimal,\n    Trove,\n    LiquityStoreState,\n    LUSD_LIQUIDATION_RESERVE,\n    LUSD_MINIMUM_DEBT,//系统最小债务\n    MINIMUM_COLLATERAL_RATIO,\n    CRITICAL_COLLATERAL_RATIO,\n  } from \"@liquity/lib-base\";\n  const mcrPercent = new Percent(MINIMUM_COLLATERAL_RATIO).toString(0);\n  const ccrPercent = new Percent(CRITICAL_COLLATERAL_RATIO).toString(0);\n  import { AddressZero } from \"@ethersproject/constants\";\n  export default {\n    data() {\n      return {\n        id:'',\n        data:{},\n        maxborrowingRate:'',\n        trove:'',\n        borrowingRate:'',\n        state:{}\n      }\n    },\n    methods: {\n      async Stakingreadinfo(){\n        //lqtyBalance\n        var {lqtyBalance,lqtyStake} = this.$data.state;\n        var originalStake=lqtyStake;\n        //  const collateralGain = originalStake.collateralGain.nonZero?.prettify(4).concat(\" ETH\");\n        // const lusdGain = originalStake.lusdGain.nonZero?.prettify().concat(\" \", 'xxx');\n        const collateralGain = originalStake.collateralGain.prettify(4).concat(\" ETH\");\n        const lusdGain = originalStake.lusdGain.prettify().concat(\" \", 'xxx');\n        console.log('stakedLQTY',originalStake.stakedLQTY.prettify().concat(\" \", 'xxx'))\n        console.log('collateralGain',collateralGain)\n        console.log('collateralGain',collateralGain)\n        console.log('lusdGain',lusdGain)\n      },\n      async Stakingpledge(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.stakeLQTY(1,{gasLimit:800000})\n        console.log(data)\n      },\n      async StakingWithdraw(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.unstakeLQTY(1,{gasLimit:800000})\n        console.log(data)\n      },\n      async StakingExtractreward(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.withdrawGainsFromStaking({gasLimit:800000})\n        console.log(data)\n\n      },\n      async stakeLQTStabilityPool(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.depositLUSDInStabilityPool(100,AddressZero,{gasLimit:800000})\n        console.log(data)\n      },\n      async withdrawLUSDFromStabilityPool(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.withdrawLUSDFromStabilityPool(1,{gasLimit:800000})\n        console.log(data)\n      },\n      async withdrawGainsFromStabilityPool(){\n        //提取奖励\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.withdrawGainsFromStabilityPool({gasLimit:800000})\n        console.log(data)\n      },\n      async transferCollateralGainToTrove(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: AddressZero,\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var data = await  liquity.send.transferCollateralGainToTrove({gasLimit:800000})\n        console.log(data)\n      },\n      getStabilityPool(){\n        const { remainingStabilityPoolLQTYReward,stabilityDeposit,lusdBalance, lusdInStabilityPool  } = this.$data.state;\n        console.log('num LQTY remaining',remainingStabilityPoolLQTYReward.prettify(0))\n        console.log(stabilityDeposit)\n        const collateralGain = stabilityDeposit.collateralGain.prettify(4).concat(\" ETH\");\n        const lqtyReward = stabilityDeposit.lqtyReward.prettify().concat(\" \", 'xx');\n        console.log(collateralGain)\n        console.log(lqtyReward)\n        // var  originalDeposit= stabilityDeposit;\n        // var  editedLUS= stabilityDeposit.currentLUSD;\n        // const originalPoolShare = originalDeposit.currentLUSD.mulDiv(100, lusdInStabilityPool);\n        // console.log('originalPoolShare',originalPoolShare.toString())\n        // const lusdInStabilityPoolAfterChange = lusdInStabilityPool\n        //   .sub(originalDeposit.currentLUSD)\n        //   .add(5);\n        // const newPoolShare = editedLUSD.mulDiv(100, lusdInStabilityPoolAfterChange);\n      },\n      feeFrom  (original, edited, borrowingRate) {\n        const change = original.whatChanged(edited, borrowingRate);\n        if (change && change.type !== \"invalidCreation\" && change.params.borrowLUSD) {\n          return change.params.borrowLUSD.mul(borrowingRate);\n        } else {\n          return Decimal.ZERO;\n        }\n      },\n\n      fee(){\n        var originalTrove = this.$data.trove;\n        var edited = new Trove(originalTrove.collateral, originalTrove.debt);\n        const { total, price } = this.$data.state;\n        edited=edited.setCollateral(4.5)\n        edited=edited.setDebt(100000)\n        var borrowingRate = this.$data.borrowingRate ;\n        console.log('Liquidation Reserve',LUSD_LIQUIDATION_RESERVE.toString())\n        console.log('Borrowing Fee',this.feeFrom(originalTrove, edited, borrowingRate).toString())\n        const originalCollateralRatio = !originalTrove.isEmpty ? originalTrove.collateralRatio(price) : undefined;\n        const collateralRatio = !edited.isEmpty ? edited.collateralRatio(price) : undefined;\n        const collateralRatioChange = Difference.between(collateralRatio, originalCollateralRatio);\n        console.log('Collateral ratio ',collateralRatio.toString())\n      },\n      async changeva(){\n        var originalTrove = this.$data.trove;\n        var edited = new Trove(originalTrove.collateral, originalTrove.debt);\n\n        edited=edited.setCollateral(4.5)\n        edited=edited.setDebt(100000)\n        //edited.setDebt(LUSD_MINIMUM_DEBT)\n        var  original = originalTrove;\n        var borrowingRate = this.$data.borrowingRate ;\n        const { total, price } = this.$data.state;\n        const change = originalTrove.whatChanged(edited, borrowingRate);\n        console.log(change);\n        if (!change) {\n          //没有变化\n          return [undefined, undefined];\n        }\n        const resultingTrove = originalTrove.apply(change, borrowingRate);\n        const recoveryMode = total.collateralRatioIsBelowCritical(price);\n        const wouldTriggerRecoveryMode = total\n          .subtract(originalTrove)\n          .add(resultingTrove)\n          .collateralRatioIsBelowCritical(price);\n        var sysNextInfocontext={\n          resultingTrove,\n          recoveryMode,\n          wouldTriggerRecoveryMode\n        }\n        console.log(sysNextInfocontext)\n        if (change.type === \"invalidCreation\") {\n          // Trying to create a Trove with negative net debt\n          return [undefined,`Debt must be at least ${LUSD_MINIMUM_DEBT.toString()}`]\n        }\n        console.log('change.type',change.type)\n        const errorDescription =\n          change.type === \"creation\"\n            ? this.validateTroveCreation(change.params, sysNextInfocontext)\n            : change.type === \"closure\"\n            ? this.validateTroveClosure(change.params, sysNextInfocontext)\n            : this.validateTroveAdjustment(change.params, sysNextInfocontext);\n        console.log('errorDescription',errorDescription);\n\n        if (errorDescription) {\n          console.log(1)\n          return [undefined, errorDescription];\n        }else{\n          console.log(2)\n          return null\n        }\n\n\n      },\n      validateTroveCreation({ depositCollateral },{\n        resultingTrove,\n        recoveryMode,\n        wouldTriggerRecoveryMode\n      })\n      {\n        const { accountBalance, price } = this.$data.state;\n        if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n          return `Debt must be at least ${LUSD_MINIMUM_DEBT.toString()}`;\n        }\n        if (recoveryMode){\n          if (!resultingTrove.isOpenableInRecoveryMode(price)) {\n            return `You're not allowed to open a Trove with less than ${ccrPercent} Collateral\n                Ratio during recovery mode. Please increase your Trove's Collateral Ratio.`\n\n\n          }\n        }else{\n          if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n            return `Collateral ratio must be at least ${mcrPercent}.`;\n          }\n          if (wouldTriggerRecoveryMode) {\n            return `You're not allowed to open a Trove that would cause the Total Collateral Ratio to fall\n                      below ${ccrPercent}. Please increase your Trove's Collateral Ratio.`;\n          }\n        }\n        if (depositCollateral.gt(accountBalance)) {\n          return `The amount you're trying to deposit exceeds your balance by\n                    ${depositCollateral.sub(accountBalance).prettify()} BNB.`;\n        }\n        return null\n      },\n      validateTroveClosure({ repayLUSD },{recoveryMode,wouldTriggerRecoveryMode})\n      {\n        var {numberOfTroves,lusdBalance}  = this.$data.state;\n        if (numberOfTroves === 1) {\n          return `You're not allowed to close your Trove when there are no other Vaults in the system.`;\n        }\n        if (recoveryMode) {\n          return `You're not allowed to close your Trove during recovery mode.`;\n        }\n        if (repayLUSD?.gt(lusdBalance)) {\n          return`You need ${repayLUSD.sub(lusdBalance).prettify()} more to close your Trove` ;\n        }\n        if (wouldTriggerRecoveryMode) {\n          return `You're not allowed to close a Trove if it would cause the Total Collateralization Ratio to\n        fall below ${ccrPercent}. Please wait until the Total Collateral Ratio\n        increases.`;\n        }\n        return null;\n      },\n      validateTroveAdjustment({ depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD },\n                              {originalTrove,\n                                resultingTrove,\n                                recoveryMode,\n                                wouldTriggerRecoveryMode}){\n        var {price,\n          accountBalance,\n          lusdBalance} = this.$data.state;\n        if (recoveryMode) {\n          if (withdrawCollateral) {\n            return `You're not allowed to withdraw collateral during recovery mode.`;\n          }\n          if (borrowLUSD){\n            if (resultingTrove.collateralRatioIsBelowCritical(price)) {\n              return `Your collateral ratio must be at least ${ccrPercent} to borrow during\n                    recovery mode. Please improve your collateral ratio.`;\n            }\n            if (resultingTrove.collateralRatio(price).lt(originalTrove.collateralRatio(price))) {\n              return `You're not allowed to decrease your collateral ratio during recovery mode.`;\n            }\n          }\n        }else{\n          if (resultingTrove.collateralRatioIsBelowMinimum(price)) {\n            return  `Collateral ratio must be at least ${mcrPercent}.`;\n          }\n          if (wouldTriggerRecoveryMode) {\n            return `The adjustment you're trying to make would cause the Total Collateral Ratio to\n            fall below ${ccrPercent} . Please increase your Trove's Collateral Ratio.\n            `;\n          }\n        }\n        if (repayLUSD) {\n          if (resultingTrove.debt.lt(LUSD_MINIMUM_DEBT)) {\n            return ` Debt must be at least ${LUSD_MINIMUM_DEBT.toString()}` ;\n          }\n          if (repayLUSD.gt(lusdBalance)) {\n            return `The amount you're trying to repay exceeds your balance by ${repayLUSD.sub(lusdBalance).prettify()}`;\n          }\n        }\n        if (depositCollateral&&depositCollateral.gt(accountBalance)) {\n          return `The amount you're trying to deposit exceeds your balance by\n                ${depositCollateral.sub(accountBalance).prettify()} ETH`;\n        }\n        return null;\n      },\n      async closeTrove(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: '0xc7B375ce501a2432A25d584dF1f40c73c83f9534',\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        const { newTrove } = await liquity.closeTrove({gasLimit:800000})\n        console.log(newTrove)\n      },\n      async adjustTrove(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: '0xc7B375ce501a2432A25d584dF1f40c73c83f9534',\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        const maxBorrowingRate = this.$data.data.maxborrowingRate; // TODO slippage tolerance\n        const { newTrove } = await liquity.adjustTrove({\n          depositCollateral: 1.5, // ETH\n          borrowLUSD: 0\n        },maxBorrowingRate,{gasLimit:800000})\n        console.log(newTrove)\n      },\n      async openTrove(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: '0xc7B375ce501a2432A25d584dF1f40c73c83f9534',\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        // const borrowingRate = fees.borrowingRate();\n        const maxBorrowingRate = this.$data.data.maxborrowingRate; // TODO slippage tolerance\n        console.log()\n        const { newTrove } = await liquity.openTrove({\n          depositCollateral: 2, // ETH\n          borrowLUSD: 1800\n        },maxBorrowingRate,{gasLimit:800000})\n        console.log(newTrove)\n      },\n      async Getstore(){\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: '0xc7B375ce501a2432A25d584dF1f40c73c83f9534',\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        var pram = new Trove();\n        pram =pram.setCollateral(2.5)\n        pram =pram.setDebt(2000) ///首次创建有个最小债务量\n        console.log(pram)\n        //创建\n        //如何拼姐参数？\n        liquity.store.onLoaded = () => {\n          console.info(\"Waiting for price drops...\");\n          console.log(liquity)\n          console.log('系统参数',liquity.store.state)\n          console.log('accountBalance',liquity.store.state.accountBalance.toString())\n          console.log('price',liquity.store.state.price.toString())\n          console.log('borrowingRate',liquity.store.state.borrowingRate.toString())\n          console.log('collateralSurplusBalance',liquity.store.state.collateralSurplusBalance.toString())\n          console.log('lusdBalance',liquity.store.state.lusdBalance.toString())\n          console.log('trove.collateral',liquity.store.state.trove.collateral.toString())\n          console.log('trove.debt',liquity.store.state.trove.debt.toString())\n          console.log('trove.status',liquity.store.state.trove.status.toString())\n          console.log('系统统计信息')\n          console.log('tvl',liquity.store.state.total.collateral.toString())\n          console.log('LUSD supply',liquity.store.state.total.debt.toString())\n          console.log('Troves',liquity.store.state.numberOfTroves)\n          console.log('LUSD in Stability Pool',liquity.store.state.lusdInStabilityPool.toString())\n\n          // const lusdInStabilityPoolPct =\n          // total.debt.nonZero && new Percent(lusdInStabilityPool.div(total.debt));\n          // console.log('LUSD in Stability Pool 百分比',liquity.store.state.lusdInStabilityPool.toString())\n          console.log('Staked LQTY',liquity.store.state.totalStakedLQTY.shorten())\n          console.log('Total Collateral Ratio',liquity.store.state.totalCollateralRatioPct)\n\n\n\n\n\n\n\n          this.$data.data.maxborrowingRate= liquity.store.state.borrowingRate.add(0.005).toString()\n\n          var rate = pram.collateralRatio(liquity.store.state.price)\n          console.log(rate.toString()*100+\"%\")\n          this.$data.trove = liquity.store.state.trove;\n          this.$data.borrowingRate = liquity.store.state.borrowingRate;\n          this.$data.state = liquity.store.state;\n          // tryToLiquidate(liquity);\n        };\n        liquity.store.subscribe(({ newState, oldState }) => {\n          // Try to liquidate whenever the price drops\n          if (newState.price.lt(oldState.price)) {\n            // tryToLiquidate(liquity);\n          }\n        });\n        liquity.store.start();\n      },\n      async testFN(){\n        console.log('----')\n        const provider = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainId = this.ethChainID ;\n        var connection =  _connectByChainId(provider, provider.getSigner(account), chainId, {\n          userAddress: account,\n          frontendTag: '0xc7B375ce501a2432A25d584dF1f40c73c83f9534',\n          useStore: \"blockPolled\"\n        })\n        console.log(connection)\n        const liquity = EthersLiquity._from(connection)\n        console.log(liquity)\n        console.log('Trove',Trove)\n        var pram = new Trove();\n        pram =pram.setCollateral(2.5)\n        pram =pram.setDebt(2000) ///首次创建有个最小债务量\n        console.log(pram)\n\n        //创建\n        //如何拼姐参数？\n        liquity.store.onLoaded = () => {\n          console.info(\"Waiting for price drops...\");\n          console.log(liquity)\n          console.log('系统参数',liquity.store.state)\n          console.log(liquity.store.state.accountBalance.toString())\n          console.log(liquity.store.state.price.toString())\n          console.log(liquity.store.state.borrowingRate.toString())\n\n          var rate = pram.collateralRatio(liquity.store.state.price)\n          console.log(rate.toString()*100+\"%\")\n          // tryToLiquidate(liquity);\n        };\n        liquity.store.subscribe(({ newState, oldState }) => {\n          // Try to liquidate whenever the price drops\n          if (newState.price.lt(oldState.price)) {\n            // tryToLiquidate(liquity);\n          }\n        });\n        liquity.store.start();\n        const { newTrove } = await liquity.adjustTrove({\n          depositCollateral: 2.2, // ETH\n          borrowLUSD: 2000\n        })\n        console.log(newTrove)\n        /*\n        const [sendTransaction] = useTransactionFunction(\n  transactionId,\n  change.type === \"creation\"\n    ? liquity.send.openTrove.bind(liquity.send, change.params, maxBorrowingRate)\n    : change.type === \"closure\"\n    ? liquity.send.closeTrove.bind(liquity.send)\n    : liquity.send.adjustTrove.bind(liquity.send, change.params, maxBorrowingRate)\n)\n\n        */\n\n        //   const wallet = new Wallet('').connect(library);\n        //   const liquity = await EthersLiquity.connect(wallet);\n        //  console.log(liquity)\n      },\n      async approve(){\n        console.log('- -');\n        const chainID = this.ethChainID ;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const token = getProxyActionsToken(chainID);\n        const methodName  = 'target' ;\n        const  parameter  = [] ;\n        const target = await useProxyContractRead(\n          library,\n          account,\n          token,\n          methodName,\n          parameter\n        );\n        //target 需要操作lamb 授权的地址\n        console.log(target);\n        const  lambToken =  getTokenBySymbol(chainID,'LAMB');\n        const  spender =target;\n        const  amount = Web3.utils.toWei('1000000');\n        const  tx = await useTokenApprove(library,\n          account,\n          lambToken,\n          spender,\n          amount);\n        console.log(tx);\n      },\n      async join (){\n        const tokenName ='LAMB';\n        const chainID = this.ethChainID ;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const token = getProxyToActionsToken(chainID);\n        const ProxyActionsContract = useProxyActionsContractSigna(library,account,token);\n        let currencyKey =   Web3.utils.stringToHex(tokenName);\n        currencyKey = Web3.utils.rightPad(currencyKey, 64) ;\n        const amount = Web3.utils.toWei('1000000');\n        try {\n          const result = await ProxyActionsContract.join(currencyKey, amount);\n          console.log(result);\n        } catch (error) {\n          console.log(error);\n        }\n        //\n        //getProxyToActionsToken\n      },\n      async queryAvailableassets(){\n        const chainID = this.ethChainID;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const tokenName ='LAMB';\n        let currencyKey = Web3.utils.stringToHex(tokenName);\n        currencyKey = Web3.utils.rightPad(currencyKey, 64) ;\n        const token = getProxyToActionsToken(chainID);\n        const methodName='collateralAddress';\n        const parameter =[currencyKey];\n        const tokenCollateralAddress = await useProxyActionsContractRead(library,account,token,methodName,parameter);\n        console.log('tokenCollateralAddress',tokenCollateralAddress);\n        const templateCollateralToken = getCollateralToken(chainID);\n        templateCollateralToken.address = tokenCollateralAddress;\n        const methodName2 = 'unlockedCollateral';\n        const parameter2 = [account];\n        const data = await  useCollateralContractRead(library,account,templateCollateralToken,methodName2,parameter2);\n        console.log(data.toString());\n      },\n      async tokenMint(tokenName){\n        const chainID = this.ethChainID;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const token = getProxyToActionsToken(chainID);\n        const ProxyActionsContract = useProxyActionsContractSigna(library,account,token);\n        let currencyKey =  Web3.utils.stringToHex(tokenName);\n        currencyKey = Web3.utils.rightPad(currencyKey, 64) ;\n        const amount = Web3.utils.toWei('10');\n        try {\n          //  const result = await ProxyActionsContract.mint(currencyKey, amount);\n          // result.on('receipt',(receipt)=>{\n          //   console.log(receipt)\n          // }).on('transactionHash', function(hash){\n          //   console.log(hash)\n          // })\n          // .on('confirmation', function(confirmationNumber, receipt){\n          //   console.log(confirmation)\n          // })\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      async tokenBurn(tokenName){\n        const chainID = this.ethChainID;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const token = getProxyToActionsToken(chainID);\n        const ProxyActionsContract = useProxyActionsContractSigna(library,account,token);\n        let currencyKey = Web3.utils.stringToHex(tokenName);\n        currencyKey = Web3.utils.rightPad(currencyKey, 64) ;\n        const amount = Web3.utils.toWei('1');\n        try {\n          //  const result = await ProxyActionsContract.burn(currencyKey, amount);\n          // result.on('receipt',(receipt)=>{\n          //   console.log(receipt)\n          // }).on('transactionHash', function(hash){\n          //   console.log(hash)\n          // })\n          // .on('confirmation', function(confirmationNumber, receipt){\n          //   console.log(confirmation)\n          // })\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      async tokenExit(tokenName){\n        const chainID = this.ethChainID;\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const token = getProxyToActionsToken(chainID);\n        const ProxyActionsContract = useProxyActionsContractSigna(library,account,token);\n        let currencyKey = Web3.utils.stringToHex(tokenName);\n        currencyKey = Web3.utils.rightPad(currencyKey, 64) ;\n        const amount = Web3.utils.toWei('1');\n        try {\n          const result = await ProxyActionsContract.exit(currencyKey, amount);\n          console.log(result);\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      async getSCusdt() {\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainID = this.ethChainID;\n        const SynthetixToken = getTokenBySymbol(chainID,'scUSD');\n        const data = await useTokenbalance(library, account, SynthetixToken);\n        if (data) {\n          const tUSDBalance = data.toSignificant(6);\n          // this.$store.commit('changeTUSDBalance', tUSDBalance);\n          console.log('tUSDBalance',tUSDBalance);\n        }\n      },\n      async readHistory(){\n        // const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainID = this.ethChainID;\n        // readSwapHistory(chainID,account,1,10);\n        // readPledgeHistory(chainID,account,1,10);\n        readbuildrHistory(chainID,account,1,10);\n      },\n      async readSyntheticHistory(){\n        // const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainID = this.ethChainID;\n        // readSwapHistory(chainID,account,1,10);\n        // readPledgeHistory(chainID,account,1,10);\n        var data = await readSyntheticHistory(chainID,account,1,10);\n        console.log(data)\n      },\n      async chainTokenPrice(){\n        const data = await getPrice();\n        console.log(data);\n      },\n      async getearnList(){\n        const library = this.ethersprovider;\n        const account = this.ethAddress;\n        const chainID = this.ethChainID;\n        StakingRewardListbatch(library, account, chainID)\n      },\n      async syncReward(){\n        var web3 = this.web3;\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var tokenName = 'LAMB';\n        var data = await getUnClaimedReward({ web3, chainID, account, library, tokenName })\n        console.log('未提取的奖励',data.toString())\n        var data2 = await fetchCollateralIndicatorsCurrentDebt({ web3, chainID, account, library, tokenName })\n        console.log('参与铸造的scusd',data2.toString())\n      },\n      async getscsudValtAddress(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var Contract = getSCUSDVaultContract({chainID,account, library});\n        const  amount = Web3.utils.toWei('10');\n        var tx = await Contract.stake(amount);\n        console.log(tx)\n      },\n      async readscsudValt(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var Contract = getSCUSDVaultContract({chainID,account, library});\n        console.log(Contract)\n        var totalSupply = await Contract.totalSupply()\n        console.log(Web3.utils.fromWei(totalSupply.toString()))\n      },\n      async withdrawscsudValt(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var Contract = getSCUSDVaultContract({chainID,account, library});\n        const  amount = Web3.utils.toWei('1');\n        var tx = await Contract.exit(account,amount);\n        console.log(tx)\n      },\n      async readMyLP(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var data = await getMasterUserInfo({chainID,account, library});\n        console.log(data[0].toString())\n        console.log(data[1].toString())\n        console.log(data[2].toString())\n        console.log('我的份额',data[0].toString())\n        // console.log('我的奖励 sccash',data[0].toString())\n        var data = await getMasterPendingScash({chainID,account, library});\n        console.log('未提取的scash',data.toString())\n        // var data2 = getmaxExitableAmount({chainID,account, library});\n        // console.log('存款可以提取的scusd数量',data2.toString())\n      },\n      async readMyLP2(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        // var data = await getMasterUserInfo({chainID,account, library});\n        // console.log(data[0].toString())\n        // console.log(data[1].toString())\n        // console.log(data[2].toString())\n        // console.log('我的份额',data[0].toString())\n        // // console.log('我的奖励 sccash',data[0].toString())\n        // var data = await getMasterPendingScash({chainID,account, library});\n        // console.log('未提取的scash',data.toString())\n        var data2 = await  getmaxExitableAmount({chainID,account, library});\n        console.log('存款可以提取的scusd数量',data2.toString())\n      },\n      async lp2Masterwithdraw() {\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var tx = await Masterwithdraw({chainID, account, library});\n        console.log(tx)\n      },\n      async getPriceinfo(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var key ='lamb_usdt'\n        var result = await getTokenPriceinfo(library,account,chainID,key)\n        console.log(result)\n        console.log('币对名',Web3.utils.hexToUtf8(result[0]))\n        console.log('价格',Web3.utils.fromWei(result[1].toString()))\n        console.log('时间戳',result[2].toString())\n        console.log('id',result[3].toString())\n        this.$data.id = result[3].toString();\n        var keys =['lamb_usdt','ht_usdt','eth_usdt']//,'ht_usdt'\n        var result = await getTokenListPriceinfo(library,account,chainID,keys)\n        console.log('批量读取',result)\n      },\n      async History(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var key ='lamb_usdt';\n        var nowid = this.$data.id-0;\n        var data = await getTokenHistory(library,account,chainID,key,nowid)\n        console.log(data)\n      },\n      async getfetchSynthAssets(){\n        var chainID = this.ethChainID;\n        const account = this.ethAddress;\n        const library = this.ethersprovider;\n        var web3 = this.web3;\n        var tokenList=['sBTC']\n        var data =await fetchSynthAssetsList({web3, chainID, account, library,tokenList})\n        console.log(data)\n      }\n    },\n    computed: {\n      ...mapState(['ethAddress','ethChainID','web3','ethersprovider']),\n    }\n  };\n</script>\n<style lang=\"less\" scoped>\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./buildr.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./buildr.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./buildr.vue?vue&type=template&id=878b8ebc&scoped=true&\"\nimport script from \"./buildr.vue?vue&type=script&lang=js&\"\nexport * from \"./buildr.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"878b8ebc\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}