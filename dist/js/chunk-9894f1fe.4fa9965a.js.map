{"version":3,"sources":["webpack:///./node_modules/@webfans/lib-ethers/dist/src/contracts.js","webpack:///./node_modules/@ethersproject/bignumber/lib.esm/index.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/ObservableEthersLiquity.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/PopulatableEthersLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/src/LQTYStake.js","webpack:///./node_modules/@liquity/lib-base/dist/src/_CachedReadableLiquity.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/EthersLiquityConnection.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/ReadableEthersLiquity.js","webpack:///./node_modules/@liquity/lib-base/node_modules/@ethersproject/bignumber/lib.esm/_version.js","webpack:///./node_modules/@liquity/lib-base/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js","webpack:///./node_modules/@liquity/lib-base/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/EthersLiquity.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/types.js","webpack:///./node_modules/@liquity/lib-base/dist/src/PopulatableLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/src/ReadableLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/src/ObservableLiquity.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/SendableEthersLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/index.js","webpack:///./node_modules/@liquity/lib-base/dist/src/StabilityDeposit.js","webpack:///./node_modules/@webfans/lib-ethers/dist/index.js","webpack:///./node_modules/@liquity/lib-base/dist/src/Fees.js","webpack:///./node_modules/@liquity/lib-base/dist/src/Decimal.js","webpack:///./node_modules/@liquity/lib-base/dist/src/TransactableLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/src/LiquityStore.js","webpack:///./node_modules/@liquity/lib-base/dist/src/constants.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/parseLogs.js","webpack:///./node_modules/@liquity/lib-base/dist/src/SendableLiquity.js","webpack:///./node_modules/@liquity/lib-base/dist/src/Trove.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/_Multicall.js","webpack:///./node_modules/@webfans/lib-ethers/dist/src/BlockPolledLiquityStore.js"],"names":["__importDefault","this","mod","__esModule","Object","defineProperty","exports","value","_connectToContracts","_uniTokenIsMock","_priceFeedIsTestnet","_LiquityContract","contracts_1","ActivePool_json_1","BorrowerOperations_json_1","TroveManager_json_1","LUSDToken_json_1","CollSurplusPool_json_1","CommunityIssuance_json_1","DefaultPool_json_1","LQTYToken_json_1","HintHelpers_json_1","LockupContractFactory_json_1","LQTYStaking_json_1","MultiTroveGetter_json_1","PriceFeed_json_1","PriceFeedTestnet_json_1","SortedTroves_json_1","StabilityPool_json_1","GasPool_json_1","Unipool_json_1","IERC20_json_1","ERC20Mock_json_1","buildEstimatedFunctions","estimateFunctions","functions","fromEntries","keys","map","functionName","async","overrides","adjustEstimate","args","undefined","gasLimit","estimatedGas","Contract","addressOrName","contractInterface","signerOrProvider","super","estimateAndPopulate","estimateGas","populateTransaction","logs","name","filter","log","address","interface","parseLog","e","priceFeed","uniToken","getAbi","priceFeedIsTestnet","uniTokenIsMock","activePool","default","borrowerOperations","troveManager","lusdToken","communityIssuance","defaultPool","lqtyToken","hintHelpers","lockupContractFactory","lqtyStaking","multiTroveGetter","sortedTroves","stabilityPool","gasPool","collSurplusPool","unipool","mapLiquityContracts","contracts","f","entries","key","t","addresses","abi","ObservableEthersLiquity","EthersLiquityConnection_1","debouncingDelayMs","debounce","listener","timeoutId","latestBlock","event","length","blockNumber","clearTimeout","setTimeout","readable","_readable","onTotalRedistributedChanged","_getContracts","connection","etherSent","filters","EtherSent","redistributionListener","blockTag","getTotalRedistributed","then","etherSentListener","toAddress","_amount","on","removeListener","onTroveChanged","_requireAddress","troveUpdatedByTroveManager","TroveUpdated","troveUpdatedByBorrowerOperations","troveListener","getTroveBeforeRedistribution","onNumberOfTrovesChanged","troveUpdated","troveUpdatedListener","getNumberOfTroves","onPriceChanged","Error","onTotalChanged","totalListener","getTotal","onStabilityDepositChanged","UserDepositChanged","userDepositChanged","depositListener","getStabilityDeposit","onLUSDInStabilityPoolChanged","Transfer","transferLUSDFromStabilityPool","transferLUSDToStabilityPool","stabilityPoolLUSDFilters","stabilityPoolLUSDListener","getLUSDInStabilityPool","forEach","onLUSDBalanceChanged","transferLUSDFromUser","transferLUSDToUser","lusdTransferFilters","lusdTransferListener","getLUSDBalance","PopulatableEthersLiquity","PopulatedEthersRedemption","PopulatedEthersLiquityTransaction","SentEthersLiquityTransaction","_redeemMaxIterations","assert_1","constants_1","lib_base_1","parseLogs_1","decimalify","bigNumber","Decimal","fromBigNumberString","toHexString","defaultBorrowingRateSlippageTolerance","from","defaultRedemptionRateSlippageTolerance","noDetails","compose","g","_","id","addGasForPotentialLastFeeOperationTimeUpdate","gas","add","addGasForPotentialListTraversal","addGasForLQTYIssuance","addGasForUnipoolRewardUpdate","randomInteger","Math","floor","random","Number","MAX_SAFE_INTEGER","maxNumberOfTrialsAtOnce","generateTrials","totalNumberOfTrials","isInteger","numberOfTrials","min","rawSentTransaction","parse","_connection","_parse","rawReceipt","status","_successfulReceipt","logsToString","_failedReceipt","_pendingReceipt","_receiptFrom","_getProvider","getTransactionReceipt","hash","receipt","waitForTransaction","rawPopulatedTransaction","_requireSigner","sendTransaction","attemptedLUSDAmount","redeemableLUSDAmount","increaseAmountByMinimumNetDebt","extractEvents","_ETHSent","_ETHFee","_actualLUSDAmount","_attemptedLUSDAmount","actualLUSDAmount","collateralTaken","fee","isTruncated","lt","_increaseAmountByMinimumNetDebt","maxRedemptionRate","params","newTrove","_coll","_debt","Trove","_LUSDFee","userAddress","repayLUSD","to","AddressZero","withdrawCollateral","_to","nonZero","liquidatedAddresses","_borrower","totals","_LUSDGasCompensation","_collGasCompensation","_liquidatedColl","_liquidatedDebt","collateralGasCompensation","lusdGasCompensation","totalLiquidated","newLUSDDeposit","_newDeposit","collateralGain","lusdLoss","_ETH","_LUSDLoss","lqtyReward","_LQTY","_extractStabilityPoolGainsWithdrawalDetails","change","gainsWithdrawalDetails","withdrawLUSD","withdrawAllLUSD","isZero","nominalCollateralRatio","numberOfTroves","infinite","getFirst","ceil","sqrt","firstTrials","restOfTrials","collectApproxHint","latestRandomSeed","results","getApproxHint","hex","result","reduce","p","state","hintAddress","a","b","diff","findInsertPosition","trove","TroveWithPendingRedistribution","_findHintsForNominalCollateralRatio","_nominalCollateralRatio","amount","price","getPrice","firstRedemptionHint","partialRedemptionHintNICR","truncatedLUSDamount","getRedemptionHints","partialRedemptionUpperHint","partialRedemptionLowerHint","maxBorrowingRate","normalized","_normalizeTroveCreation","depositCollateral","borrowLUSD","fees","getFees","borrowingRate","create","_wrapTroveChangeWithFees","openTrove","_findHints","_wrapTroveClosure","closeTrove","adjustTrove","_a","_b","_normalizeTroveAdjustment","Promise","all","getTrove","finalTrove","adjust","ZERO","_wrapSimpleTransaction","claimCollateral","setPrice","Array","isArray","_wrapLiquidation","batchLiquidateTroves","liquidate","maximumNumberOfTrovesToLiquidate","liquidateTroves","frontendTag","depositLUSD","_wrapStabilityDepositTopup","provideToSP","_wrapStabilityDepositWithdrawal","withdrawFromSP","_wrapStabilityPoolGainsWithdrawal","initialTrove","stabilityDeposit","addCollateral","_wrapCollateralGainTransfer","withdrawETHGainToTrove","transfer","total","truncatedAmount","partialHints","_findRedemptionHints","LUSD_MINIMUM_NET_DEBT","defaultMaxRedemptionRate","redemptionRate","div","debt","ONE","populateRedemption","maxRedemptionRateOrDefault","redeemCollateral","newMaxRedemptionRate","stake","unstake","unstakeLQTY","kickbackRate","registerFrontEnd","mint","allowance","approve","INFINITY","withdraw","claimReward","withdrawAndClaim","LQTYStake","Decimal_1","stakedLQTY","lusdGain","that","eq","thatStakedLQTY","sub","unstakeAllLQTY","gt","stakeLQTY","lte","_CachedReadableLiquity","cache","_cache","extraParams","troveBeforeRedistribution","totalRedistributed","applyRedistribution","getRemainingStabilityPoolLQTYReward","getLQTYBalance","getUniTokenBalance","getUniTokenAllowance","getRemainingLiquidityMiningLQTYReward","getLiquidityMiningStake","getTotalStakedUniTokens","getLiquidityMiningLQTYReward","getCollateralSurplusBalance","beforeRedistribution","restOfParams","troves","getTroves","getLQTYStake","getTotalStakedLQTY","getFrontendStatus","_connect","_connectByChainId","_connectToDeployment","UnsupportedNetworkError","_usingStore","_requireFrontendAddress","_getBlockTimestamp","abstract_signer_1","dev_json_1","goerli_json_1","kovan_json_1","rinkeby_json_1","ropsten_json_1","mainnet_json_1","_Multicall_1","dev","deployments","chainId","branded","connectionFrom","provider","signer","_contracts","_multicall","deploymentDate","totalStabilityPoolLQTYReward","liquidityMiningLQTYRewardRate","deployment","optionalParams","useStore","validStoreOptions","includes","Date","getMulticall","numberify","toNumber","getTimestampFromBlock","timestamp","getCurrentBlockTimestamp","getBlock","panic","getProviderAndSigner","Signer","isSigner","_connectToMulticall","getAddress","getNetwork","ReadableEthersLiquity","BlockPolledLiquityStore_1","MINUTE_DECAY_FACTOR","BETA","BackendTroveStatus","error","userTroveStatusFrom","backendStatus","nonExistent","active","closedByOwner","closedByLiquidation","closedByRedemption","convertToDate","validSortingOptions","expectPositiveInt","obj","_BlockPolledReadableEthersLiquity","_from","collateral","L_ETH","L_LUSDDebt","snapshot","Troves","rewardSnapshots","coll","ETH","LUSDDebt","getTroveOwnersCount","callStatic","fetchPrice","activeCollateral","activeDebt","getETH","getLUSDDebt","getBigNumber","liquidatedCollateral","closedDebt","_getActivePool","_getDefaultPool","frontEndTag","initialValue","currentLUSD","deposits","getCompoundedLUSDDeposit","getDepositorETHGain","getDepositorLQTYGain","StabilityDeposit","issuanceCap","totalLQTYIssued","getTotalLUSDDeposits","balanceOf","totalSupply","rewardRate","periodFinish","lastUpdateTime","blockTimestamp","mul","max","calculateRemainingLQTY","_getRemainingLiquidityMiningLQTYRewardCalculator","earned","getCollateral","sortedBy","x","join","backendTroves","getMultipleSortedTroves","startingAt","first","mapBackendTroves","lastFeeOperationTime","baseRateWithoutDecay","baseRate","recoveryMode","Fees","createFees","_getFeesFactory","collateralRatioIsBelowCritical","stakes","getPendingETHGain","getPendingLUSDGain","totalLQTYStaked","registered","frontEnds","owner","snapshotETH","snapshotLUSDDebt","BlockPolledLiquityStoreBasedCache","store","_store","_blockHit","_userHit","remainingStabilityPoolLQTYReward","lusdInStabilityPool","lusdBalance","lqtyBalance","uniTokenBalance","uniTokenAllowance","remainingLiquidityMiningLQTYReward","liquidityMiningStake","totalStakedUniTokens","liquidityMiningLQTYReward","collateralSurplusBalance","lqtyStake","totalStakedLQTY","_frontendHit","frontend","BlockPolledLiquityStore","version","BN","logger","_constructorGuard","MAX_SAFE","isBigNumberish","isBigNumber","match","_warnedToStringRadix","constructorGuard","checkNew","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","freeze","toBigNumber","toBN","fromTwos","toTwos","substring","other","o","throwFault","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","gte","toString","arguments","warn","UNEXPECTED_ARGUMENT","type","toHex","throwArgumentError","String","anyValue","fault","NUMERIC_FAULT","_base36To16","_base16To36","Zero","NegativeOne","message","zeros","getMultiplier","decimals","formatFixed","multiplier","negative","fraction","whole","parseFixed","comps","split","wholeValue","fractionValue","wei","signed","width","_multiplier","parseInt","check","defaultValue","format","_value","_isFixedNumber","_checkFormat","fromValue","hasFraction","subUnsafe","addUnsafe","factor","mulUnsafe","BUMP","divUnsafe","parseFloat","fromString","fixedFormat","numeric","decimal","fromBytes","code","INVALID_ARGUMENT","EthersLiquity","EthersTransactionFailedError","PopulatableEthersLiquity_1","ReadableEthersLiquity_1","SendableEthersLiquity_1","TransactionFailedError","failedReceipt","waitForSuccess","tx","waitForReceipt","details","populate","send","SendableEthersLiquity","_EthersLiquityWithStore","liquidateUpTo","depositLUSDInStabilityPool","withdrawLUSDFromStabilityPool","withdrawGainsFromStabilityPool","transferCollateralGainToTrove","sendLUSD","sendLQTY","redeemLUSD","claimCollateralSurplus","withdrawGainsFromStaking","registerFrontend","_mintUniToken","approveUniTokens","stakeUniTokens","unstakeUniTokens","withdrawLQTYRewardFromLiquidityMining","exitLiquidityMining","populatable","_populate","__createBinding","m","k","k2","enumerable","get","__exportStar","prototype","hasOwnProperty","call","initialLUSD","thatLUSD","minuteDecayFactor","beta","lastFeeOperation","timeOfLatestBlock","_baseRateWithoutDecay","_minuteDecayFactor","_beta","_lastFeeOperation","_timeOfLatestBlock","_recoveryMode","getTime","toLocaleString","when","millisecondsSinceLastFeeOperation","minutesSinceLastFeeOperation","MINIMUM_BORROWING_RATE","MAXIMUM_BORROWING_RATE","redeemedFractionOfSupply","MINIMUM_REDEMPTION_RATE","Percent","Difference","bignumber_1","getDigits","numDigits","TEN","MAX_UINT_256","PRECISION","BigNumber","DIGITS","stringRepresentationFormat","trailingZeros","magnitudes","roundedMul","y","HALF","_bigNumber","bigNumberString","representation","coefficient","exponent","startsWith","_fromString","substr","characteristic","mantissa","repeat","decimalish","paddedMantissa","padStart","trimmedMantissa","replace","precision","halfDigit","_roundUp","_toStringWithPrecision","_toStringWithAutomaticPrecision","prettyCharacteristic","characteristicLength","magnitude","prettify","addend","subtrahend","divider","number","_number","d1","d2","sign","absoluteValue","finite","ratio","_percent","zeroish","LiquityStore","strictEquals","equals","frontendStatusEquals","showFrontendStatus","wrap","difference","logging","_loaded","_listeners","Set","assign","_baseState","_derivedState","_extraState","doStop","_doStart","_cancelUpdateIfScheduled","_updateTimeoutId","_update","next","show","prev","_logUpdate","baseState","baseStateUpdate","_updateIfChanged","ownFrontend","accountBalance","_silentlyUpdateIfChanged","_feesInNormalMode","_riskiestTroveBeforeRedistribution","_setRecoveryMode","haveUndercollateralizedTroves","collateralRatioIsBelowMinimum","derivedState","derivedStateUpdate","_updateFees","has","uniqueListener","delete","extraState","_derive","_scheduleUpdate","onLoaded","extraStateUpdate","oldState","_reduce","_reduceDerived","_reduceExtra","_notify","newState","stateChange","LUSD_MINIMUM_DEBT","LUSD_LIQUIDATION_RESERVE","MINIMUM_COLLATERAL_RATIO","CRITICAL_COLLATERAL_RATIO","interfaceLookupFrom","contractLookup","contract","nameLookupFrom","tryToParseLog","interfaceLookup","logDescription","err","parseLogs","parsedLogs","unparsedLogs","parsedLog","push","VERY_BIG","arg","nameLookup","logDescriptionToString","prettyEntries","contractNameLookup","transactionHash","UserTrove","_emptyTrove","invalidTroveCreation","invalidTrove","troveCreation","troveClosure","troveAdjustment","setToZero","valueIsDefined","entry","allowedTroveCreationKeys","checkAllowedTroveCreationKeys","badKeys","troveCreationParamsFromEntries","missingKeys","decimalize","v","definedEntries","nonZeroEntries","allowedTroveAdjustmentKeys","checkAllowedTroveAdjustmentKeys","collateralChangeFrom","debtChangeFrom","troveAdjustmentParamsFromEntries","collateralChange","debtChange","applyFee","debtIncrease","unapplyFee","_divCeil","NOMINAL_COLLATERAL_RATIO_PRECISION","mulDiv","collateralRatio","isEmpty","netDebt","_debtChange","zero","_collateralChange","collateralDecrease","collateralIncrease","debtDecrease","setCollateral","addDebt","subtractDebt","setDebt","subtractCollateral","subtract","apply","whatChanged","ownerAddress","snapshotOfTotalRedistributed","afterRedistribution","multiply","multicallAbi","constant","inputs","outputs","payable","stateMutability","multicallAddress","1","3","4","5","42","56","97","hasMulticall","promiseAllValues","object","values","i","_provider","riskiestTroves","_getRiskiestTroveBeforeRedistribution","getBalance","_get","_load","blockListener","off","stateUpdate"],"mappings":"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","file":"js/chunk-9894f1fe.4fa9965a.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connectToContracts = exports._uniTokenIsMock = exports._priceFeedIsTestnet = exports._LiquityContract = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst ActivePool_json_1 = __importDefault(require(\"../abi/ActivePool.json\"));\nconst BorrowerOperations_json_1 = __importDefault(require(\"../abi/BorrowerOperations.json\"));\nconst TroveManager_json_1 = __importDefault(require(\"../abi/TroveManager.json\"));\nconst LUSDToken_json_1 = __importDefault(require(\"../abi/LUSDToken.json\"));\nconst CollSurplusPool_json_1 = __importDefault(require(\"../abi/CollSurplusPool.json\"));\nconst CommunityIssuance_json_1 = __importDefault(require(\"../abi/CommunityIssuance.json\"));\nconst DefaultPool_json_1 = __importDefault(require(\"../abi/DefaultPool.json\"));\nconst LQTYToken_json_1 = __importDefault(require(\"../abi/LQTYToken.json\"));\nconst HintHelpers_json_1 = __importDefault(require(\"../abi/HintHelpers.json\"));\nconst LockupContractFactory_json_1 = __importDefault(require(\"../abi/LockupContractFactory.json\"));\nconst LQTYStaking_json_1 = __importDefault(require(\"../abi/LQTYStaking.json\"));\nconst MultiTroveGetter_json_1 = __importDefault(require(\"../abi/MultiTroveGetter.json\"));\nconst PriceFeed_json_1 = __importDefault(require(\"../abi/PriceFeed.json\"));\nconst PriceFeedTestnet_json_1 = __importDefault(require(\"../abi/PriceFeedTestnet.json\"));\nconst SortedTroves_json_1 = __importDefault(require(\"../abi/SortedTroves.json\"));\nconst StabilityPool_json_1 = __importDefault(require(\"../abi/StabilityPool.json\"));\nconst GasPool_json_1 = __importDefault(require(\"../abi/GasPool.json\"));\nconst Unipool_json_1 = __importDefault(require(\"../abi/Unipool.json\"));\nconst IERC20_json_1 = __importDefault(require(\"../abi/IERC20.json\"));\nconst ERC20Mock_json_1 = __importDefault(require(\"../abi/ERC20Mock.json\"));\nconst buildEstimatedFunctions = (estimateFunctions, functions) => Object.fromEntries(Object.keys(estimateFunctions).map(functionName => [\n    functionName,\n    async (overrides, adjustEstimate, ...args) => {\n        if (overrides.gasLimit === undefined) {\n            const estimatedGas = await estimateFunctions[functionName](...args, overrides);\n            overrides = {\n                ...overrides,\n                gasLimit: adjustEstimate(estimatedGas)\n            };\n        }\n        return functions[functionName](...args, overrides);\n    }\n]));\nclass _LiquityContract extends contracts_1.Contract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        super(addressOrName, contractInterface, signerOrProvider);\n        // this.estimateAndCall = buildEstimatedFunctions(this.estimateGas, this);\n        this.estimateAndPopulate = buildEstimatedFunctions(this.estimateGas, this.populateTransaction);\n    }\n    extractEvents(logs, name) {\n        return logs\n            .filter(log => log.address === this.address)\n            .map(log => this.interface.parseLog(log))\n            .filter(e => e.name === name);\n    }\n}\nexports._LiquityContract = _LiquityContract;\n/** @internal */\nconst _priceFeedIsTestnet = (priceFeed) => \"setPrice\" in priceFeed;\nexports._priceFeedIsTestnet = _priceFeedIsTestnet;\n/** @internal */\nconst _uniTokenIsMock = (uniToken) => \"mint\" in uniToken;\nexports._uniTokenIsMock = _uniTokenIsMock;\nconst getAbi = (priceFeedIsTestnet, uniTokenIsMock) => ({\n    activePool: ActivePool_json_1.default,\n    borrowerOperations: BorrowerOperations_json_1.default,\n    troveManager: TroveManager_json_1.default,\n    lusdToken: LUSDToken_json_1.default,\n    communityIssuance: CommunityIssuance_json_1.default,\n    defaultPool: DefaultPool_json_1.default,\n    lqtyToken: LQTYToken_json_1.default,\n    hintHelpers: HintHelpers_json_1.default,\n    lockupContractFactory: LockupContractFactory_json_1.default,\n    lqtyStaking: LQTYStaking_json_1.default,\n    multiTroveGetter: MultiTroveGetter_json_1.default,\n    priceFeed: priceFeedIsTestnet ? PriceFeedTestnet_json_1.default : PriceFeed_json_1.default,\n    sortedTroves: SortedTroves_json_1.default,\n    stabilityPool: StabilityPool_json_1.default,\n    gasPool: GasPool_json_1.default,\n    collSurplusPool: CollSurplusPool_json_1.default,\n    unipool: Unipool_json_1.default,\n    uniToken: uniTokenIsMock ? ERC20Mock_json_1.default : IERC20_json_1.default\n});\nconst mapLiquityContracts = (contracts, f) => Object.fromEntries(Object.entries(contracts).map(([key, t]) => [key, f(t, key)]));\n/** @internal */\nconst _connectToContracts = (signerOrProvider, { addresses, _priceFeedIsTestnet, _uniTokenIsMock }) => {\n    const abi = getAbi(_priceFeedIsTestnet, _uniTokenIsMock);\n    return mapLiquityContracts(addresses, (address, key) => new _LiquityContract(address, abi[key], signerOrProvider));\n};\nexports._connectToContracts = _connectToContracts;\n//# sourceMappingURL=contracts.js.map","export { BigNumber } from \"./bignumber\";\nexport { formatFixed, FixedFormat, FixedNumber, parseFixed } from \"./fixednumber\";\n// Internal methods used by address\nexport { _base16To36, _base36To16 } from \"./bignumber\";\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObservableEthersLiquity = void 0;\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst debouncingDelayMs = 50;\nconst debounce = (listener) => {\n    let timeoutId = undefined;\n    let latestBlock = 0;\n    return (...args) => {\n        const event = args[args.length - 1];\n        if (event.blockNumber !== undefined && event.blockNumber > latestBlock) {\n            latestBlock = event.blockNumber;\n        }\n        if (timeoutId !== undefined) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            listener(latestBlock);\n            timeoutId = undefined;\n        }, debouncingDelayMs);\n    };\n};\n/** @alpha */\nclass ObservableEthersLiquity {\n    constructor(readable) {\n        this._readable = readable;\n    }\n    watchTotalRedistributed(onTotalRedistributedChanged) {\n        const { activePool, defaultPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const etherSent = activePool.filters.EtherSent();\n        const redistributionListener = debounce((blockTag) => {\n            this._readable.getTotalRedistributed({ blockTag }).then(onTotalRedistributedChanged);\n        });\n        const etherSentListener = (toAddress, _amount, event) => {\n            if (toAddress === defaultPool.address) {\n                redistributionListener(event);\n            }\n        };\n        activePool.on(etherSent, etherSentListener);\n        return () => {\n            activePool.removeListener(etherSent, etherSentListener);\n        };\n    }\n    watchTroveWithoutRewards(onTroveChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { troveManager, borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const troveUpdatedByTroveManager = troveManager.filters.TroveUpdated(address);\n        const troveUpdatedByBorrowerOperations = borrowerOperations.filters.TroveUpdated(address);\n        const troveListener = debounce((blockTag) => {\n            this._readable.getTroveBeforeRedistribution(address, { blockTag }).then(onTroveChanged);\n        });\n        troveManager.on(troveUpdatedByTroveManager, troveListener);\n        borrowerOperations.on(troveUpdatedByBorrowerOperations, troveListener);\n        return () => {\n            troveManager.removeListener(troveUpdatedByTroveManager, troveListener);\n            borrowerOperations.removeListener(troveUpdatedByBorrowerOperations, troveListener);\n        };\n    }\n    watchNumberOfTroves(onNumberOfTrovesChanged) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { TroveUpdated } = troveManager.filters;\n        const troveUpdated = TroveUpdated();\n        const troveUpdatedListener = debounce((blockTag) => {\n            this._readable.getNumberOfTroves({ blockTag }).then(onNumberOfTrovesChanged);\n        });\n        troveManager.on(troveUpdated, troveUpdatedListener);\n        return () => {\n            troveManager.removeListener(troveUpdated, troveUpdatedListener);\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    watchPrice(onPriceChanged) {\n        // TODO revisit\n        // We no longer have our own PriceUpdated events. If we want to implement this in an event-based\n        // manner, we'll need to listen to aggregator events directly. Or we could do polling.\n        throw new Error(\"Method not implemented.\");\n    }\n    watchTotal(onTotalChanged) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { TroveUpdated } = troveManager.filters;\n        const troveUpdated = TroveUpdated();\n        const totalListener = debounce((blockTag) => {\n            this._readable.getTotal({ blockTag }).then(onTotalChanged);\n        });\n        troveManager.on(troveUpdated, totalListener);\n        return () => {\n            troveManager.removeListener(troveUpdated, totalListener);\n        };\n    }\n    watchStabilityDeposit(onStabilityDepositChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { activePool, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { UserDepositChanged } = stabilityPool.filters;\n        const { EtherSent } = activePool.filters;\n        const userDepositChanged = UserDepositChanged(address);\n        const etherSent = EtherSent();\n        const depositListener = debounce((blockTag) => {\n            this._readable.getStabilityDeposit(address, { blockTag }).then(onStabilityDepositChanged);\n        });\n        const etherSentListener = (toAddress, _amount, event) => {\n            if (toAddress === stabilityPool.address) {\n                // Liquidation while Stability Pool has some deposits\n                // There may be new gains\n                depositListener(event);\n            }\n        };\n        stabilityPool.on(userDepositChanged, depositListener);\n        activePool.on(etherSent, etherSentListener);\n        return () => {\n            stabilityPool.removeListener(userDepositChanged, depositListener);\n            activePool.removeListener(etherSent, etherSentListener);\n        };\n    }\n    watchLUSDInStabilityPool(onLUSDInStabilityPoolChanged) {\n        const { lusdToken, stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { Transfer } = lusdToken.filters;\n        const transferLUSDFromStabilityPool = Transfer(stabilityPool.address);\n        const transferLUSDToStabilityPool = Transfer(null, stabilityPool.address);\n        const stabilityPoolLUSDFilters = [transferLUSDFromStabilityPool, transferLUSDToStabilityPool];\n        const stabilityPoolLUSDListener = debounce((blockTag) => {\n            this._readable.getLUSDInStabilityPool({ blockTag }).then(onLUSDInStabilityPoolChanged);\n        });\n        stabilityPoolLUSDFilters.forEach(filter => lusdToken.on(filter, stabilityPoolLUSDListener));\n        return () => stabilityPoolLUSDFilters.forEach(filter => lusdToken.removeListener(filter, stabilityPoolLUSDListener));\n    }\n    watchLUSDBalance(onLUSDBalanceChanged, address) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection));\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const { Transfer } = lusdToken.filters;\n        const transferLUSDFromUser = Transfer(address);\n        const transferLUSDToUser = Transfer(null, address);\n        const lusdTransferFilters = [transferLUSDFromUser, transferLUSDToUser];\n        const lusdTransferListener = debounce((blockTag) => {\n            this._readable.getLUSDBalance(address, { blockTag }).then(onLUSDBalanceChanged);\n        });\n        lusdTransferFilters.forEach(filter => lusdToken.on(filter, lusdTransferListener));\n        return () => lusdTransferFilters.forEach(filter => lusdToken.removeListener(filter, lusdTransferListener));\n    }\n}\nexports.ObservableEthersLiquity = ObservableEthersLiquity;\n//# sourceMappingURL=ObservableEthersLiquity.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PopulatableEthersLiquity = exports.PopulatedEthersRedemption = exports.PopulatedEthersLiquityTransaction = exports.SentEthersLiquityTransaction = exports._redeemMaxIterations = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst contracts_1 = require(\"./contracts\");\nconst parseLogs_1 = require(\"./parseLogs\");\nconst decimalify = (bigNumber) => lib_base_1.Decimal.fromBigNumberString(bigNumber.toHexString());\n// With 70 iterations redemption costs about ~10M gas, and each iteration accounts for ~138k more\n/** @internal */\nexports._redeemMaxIterations = 70;\nconst defaultBorrowingRateSlippageTolerance = lib_base_1.Decimal.from(0.005); // 0.5%\nconst defaultRedemptionRateSlippageTolerance = lib_base_1.Decimal.from(0.001); // 0.1%\nconst noDetails = () => undefined;\nconst compose = (f, g) => (_) => f(g(_));\nconst id = (t) => t;\n// Takes ~6-7K to update lastFeeOperationTime. Let's be on the safe side.\nconst addGasForPotentialLastFeeOperationTimeUpdate = (gas) => gas.add(10000);\n// First traversal in ascending direction takes ~50K, then ~13.5K per extra step.\n// 80K should be enough for 3 steps, plus some extra to be safe.\nconst addGasForPotentialListTraversal = (gas) => gas.add(80000);\nconst addGasForLQTYIssuance = (gas) => gas.add(50000);\nconst addGasForUnipoolRewardUpdate = (gas) => gas.add(20000);\n// To get the best entropy available, we'd do something like:\n//\n// const bigRandomNumber = () =>\n//   BigNumber.from(\n//     `0x${Array.from(crypto.getRandomValues(new Uint32Array(8)))\n//       .map(u32 => u32.toString(16).padStart(8, \"0\"))\n//       .join(\"\")}`\n//   );\n//\n// However, Window.crypto is browser-specific. Since we only use this for randomly picking Troves\n// during the search for hints, Math.random() will do fine, too.\n//\n// This returns a random integer between 0 and Number.MAX_SAFE_INTEGER\nconst randomInteger = () => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n// Maximum number of trials to perform in a single getApproxHint() call. If the number of trials\n// required to get a statistically \"good\" hint is larger than this, the search for the hint will\n// be broken up into multiple getApproxHint() calls.\n//\n// This should be low enough to work with popular public Ethereum providers like Infura without\n// triggering any fair use limits.\nconst maxNumberOfTrialsAtOnce = 2500;\nfunction* generateTrials(totalNumberOfTrials) {\n    assert_1.default(Number.isInteger(totalNumberOfTrials) && totalNumberOfTrials > 0);\n    while (totalNumberOfTrials) {\n        const numberOfTrials = Math.min(totalNumberOfTrials, maxNumberOfTrialsAtOnce);\n        yield numberOfTrials;\n        totalNumberOfTrials -= numberOfTrials;\n    }\n}\n/**\n * A transaction that has already been sent.\n *\n * @remarks\n * Returned by {@link SendableEthersLiquity} functions.\n *\n * @public\n */\nclass SentEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawSentTransaction, connection, parse) {\n        this.rawSentTransaction = rawSentTransaction;\n        this._connection = connection;\n        this._parse = parse;\n    }\n    _receiptFrom(rawReceipt) {\n        return rawReceipt\n            ? rawReceipt.status\n                ? lib_base_1._successfulReceipt(rawReceipt, this._parse(rawReceipt), () => parseLogs_1.logsToString(rawReceipt, EthersLiquityConnection_1._getContracts(this._connection)))\n                : lib_base_1._failedReceipt(rawReceipt)\n            : lib_base_1._pendingReceipt;\n    }\n    /** {@inheritDoc @liquity/lib-base#SentLiquityTransaction.getReceipt} */\n    async getReceipt() {\n        return this._receiptFrom(await EthersLiquityConnection_1._getProvider(this._connection).getTransactionReceipt(this.rawSentTransaction.hash));\n    }\n    /** {@inheritDoc @liquity/lib-base#SentLiquityTransaction.waitForReceipt} */\n    async waitForReceipt() {\n        const receipt = this._receiptFrom(await EthersLiquityConnection_1._getProvider(this._connection).waitForTransaction(this.rawSentTransaction.hash));\n        assert_1.default(receipt.status !== \"pending\");\n        return receipt;\n    }\n}\nexports.SentEthersLiquityTransaction = SentEthersLiquityTransaction;\n/**\n * A transaction that has been prepared for sending.\n *\n * @remarks\n * Returned by {@link PopulatableEthersLiquity} functions.\n *\n * @public\n */\nclass PopulatedEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawPopulatedTransaction, connection, parse) {\n        this.rawPopulatedTransaction = rawPopulatedTransaction;\n        this._connection = connection;\n        this._parse = parse;\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatedLiquityTransaction.send} */\n    async send() {\n        return new SentEthersLiquityTransaction(await EthersLiquityConnection_1._requireSigner(this._connection).sendTransaction(this.rawPopulatedTransaction), this._connection, this._parse);\n    }\n}\nexports.PopulatedEthersLiquityTransaction = PopulatedEthersLiquityTransaction;\n/**\n * {@inheritDoc @liquity/lib-base#PopulatedRedemption}\n *\n * @public\n */\nclass PopulatedEthersRedemption extends PopulatedEthersLiquityTransaction {\n    /** @internal */\n    constructor(rawPopulatedTransaction, connection, attemptedLUSDAmount, redeemableLUSDAmount, increaseAmountByMinimumNetDebt) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(connection);\n        super(rawPopulatedTransaction, connection, ({ logs }) => troveManager\n            .extractEvents(logs, \"Redemption\")\n            .map(({ args: { _ETHSent, _ETHFee, _actualLUSDAmount, _attemptedLUSDAmount } }) => ({\n            attemptedLUSDAmount: decimalify(_attemptedLUSDAmount),\n            actualLUSDAmount: decimalify(_actualLUSDAmount),\n            collateralTaken: decimalify(_ETHSent),\n            fee: decimalify(_ETHFee)\n        }))[0]);\n        this.attemptedLUSDAmount = attemptedLUSDAmount;\n        this.redeemableLUSDAmount = redeemableLUSDAmount;\n        this.isTruncated = redeemableLUSDAmount.lt(attemptedLUSDAmount);\n        this._increaseAmountByMinimumNetDebt = increaseAmountByMinimumNetDebt;\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatedRedemption.increaseAmountByMinimumNetDebt} */\n    increaseAmountByMinimumNetDebt(maxRedemptionRate) {\n        if (!this._increaseAmountByMinimumNetDebt) {\n            throw new Error(\"PopulatedEthersRedemption: increaseAmountByMinimumNetDebt() can \" +\n                \"only be called when amount is truncated\");\n        }\n        return this._increaseAmountByMinimumNetDebt(maxRedemptionRate);\n    }\n}\nexports.PopulatedEthersRedemption = PopulatedEthersRedemption;\n/**\n * Ethers-based implementation of {@link @liquity/lib-base#PopulatableLiquity}.\n *\n * @public\n */\nclass PopulatableEthersLiquity {\n    constructor(readable) {\n        this._readable = readable;\n    }\n    _wrapSimpleTransaction(rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, noDetails);\n    }\n    _wrapTroveChangeWithFees(params, rawPopulatedTransaction) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const [newTrove] = borrowerOperations\n                .extractEvents(logs, \"TroveUpdated\")\n                .map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(decimalify(_coll), decimalify(_debt)));\n            const [fee] = borrowerOperations\n                .extractEvents(logs, \"LUSDBorrowingFeePaid\")\n                .map(({ args: { _LUSDFee } }) => decimalify(_LUSDFee));\n            return {\n                params,\n                newTrove,\n                fee\n            };\n        });\n    }\n    async _wrapTroveClosure(rawPopulatedTransaction) {\n        const { activePool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {\n            const [repayLUSD] = lusdToken\n                .extractEvents(logs, \"Transfer\")\n                .filter(({ args: { from, to } }) => from === userAddress && to === constants_1.AddressZero)\n                .map(({ args: { value } }) => decimalify(value));\n            const [withdrawCollateral] = activePool\n                .extractEvents(logs, \"EtherSent\")\n                .filter(({ args: { _to } }) => _to === userAddress)\n                .map(({ args: { _amount } }) => decimalify(_amount));\n            return {\n                params: repayLUSD.nonZero ? { withdrawCollateral, repayLUSD } : { withdrawCollateral }\n            };\n        });\n    }\n    _wrapLiquidation(rawPopulatedTransaction) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const liquidatedAddresses = troveManager\n                .extractEvents(logs, \"TroveLiquidated\")\n                .map(({ args: { _borrower } }) => _borrower);\n            const [totals] = troveManager\n                .extractEvents(logs, \"Liquidation\")\n                .map(({ args: { _LUSDGasCompensation, _collGasCompensation, _liquidatedColl, _liquidatedDebt } }) => ({\n                collateralGasCompensation: decimalify(_collGasCompensation),\n                lusdGasCompensation: decimalify(_LUSDGasCompensation),\n                totalLiquidated: new lib_base_1.Trove(decimalify(_liquidatedColl), decimalify(_liquidatedDebt))\n            }));\n            return {\n                liquidatedAddresses,\n                ...totals\n            };\n        });\n    }\n    _extractStabilityPoolGainsWithdrawalDetails(logs) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const [newLUSDDeposit] = stabilityPool\n            .extractEvents(logs, \"UserDepositChanged\")\n            .map(({ args: { _newDeposit } }) => decimalify(_newDeposit));\n        const [[collateralGain, lusdLoss]] = stabilityPool\n            .extractEvents(logs, \"ETHGainWithdrawn\")\n            .map(({ args: { _ETH, _LUSDLoss } }) => [decimalify(_ETH), decimalify(_LUSDLoss)]);\n        const [lqtyReward] = stabilityPool\n            .extractEvents(logs, \"LQTYPaidToDepositor\")\n            .map(({ args: { _LQTY } }) => decimalify(_LQTY));\n        return {\n            lusdLoss,\n            newLUSDDeposit,\n            collateralGain,\n            lqtyReward\n        };\n    }\n    _wrapStabilityPoolGainsWithdrawal(rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => this._extractStabilityPoolGainsWithdrawalDetails(logs));\n    }\n    _wrapStabilityDepositTopup(change, rawPopulatedTransaction) {\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => ({\n            ...this._extractStabilityPoolGainsWithdrawalDetails(logs),\n            change\n        }));\n    }\n    async _wrapStabilityDepositWithdrawal(rawPopulatedTransaction) {\n        const { stabilityPool, lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs, from: userAddress }) => {\n            const gainsWithdrawalDetails = this._extractStabilityPoolGainsWithdrawalDetails(logs);\n            const [withdrawLUSD] = lusdToken\n                .extractEvents(logs, \"Transfer\")\n                .filter(({ args: { from, to } }) => from === stabilityPool.address && to === userAddress)\n                .map(({ args: { value } }) => decimalify(value));\n            return {\n                ...gainsWithdrawalDetails,\n                change: { withdrawLUSD, withdrawAllLUSD: gainsWithdrawalDetails.newLUSDDeposit.isZero }\n            };\n        });\n    }\n    _wrapCollateralGainTransfer(rawPopulatedTransaction) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return new PopulatedEthersLiquityTransaction(rawPopulatedTransaction, this._readable.connection, ({ logs }) => {\n            const [newTrove] = borrowerOperations\n                .extractEvents(logs, \"TroveUpdated\")\n                .map(({ args: { _coll, _debt } }) => new lib_base_1.Trove(decimalify(_coll), decimalify(_debt)));\n            return {\n                ...this._extractStabilityPoolGainsWithdrawalDetails(logs),\n                newTrove\n            };\n        });\n    }\n    async _findHintsForNominalCollateralRatio(nominalCollateralRatio) {\n        const { sortedTroves, hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const numberOfTroves = await this._readable.getNumberOfTroves();\n        if (!numberOfTroves) {\n            return [constants_1.AddressZero, constants_1.AddressZero];\n        }\n        if (nominalCollateralRatio.infinite) {\n            return [constants_1.AddressZero, await sortedTroves.getFirst()];\n        }\n        const totalNumberOfTrials = Math.ceil(10 * Math.sqrt(numberOfTroves));\n        const [firstTrials, ...restOfTrials] = generateTrials(totalNumberOfTrials);\n        const collectApproxHint = ({ latestRandomSeed, results }, numberOfTrials) => hintHelpers\n            .getApproxHint(nominalCollateralRatio.hex, numberOfTrials, latestRandomSeed)\n            .then(({ latestRandomSeed, ...result }) => ({\n            latestRandomSeed,\n            results: [...results, result]\n        }));\n        const { results } = await restOfTrials.reduce((p, numberOfTrials) => p.then(state => collectApproxHint(state, numberOfTrials)), collectApproxHint({ latestRandomSeed: randomInteger(), results: [] }, firstTrials));\n        const { hintAddress } = results.reduce((a, b) => (a.diff.lt(b.diff) ? a : b));\n        return sortedTroves.findInsertPosition(nominalCollateralRatio.hex, hintAddress, hintAddress);\n    }\n    async _findHints(trove) {\n        if (trove instanceof lib_base_1.TroveWithPendingRedistribution) {\n            throw new Error(\"Rewards must be applied to this Trove\");\n        }\n        return this._findHintsForNominalCollateralRatio(trove._nominalCollateralRatio);\n    }\n    async _findRedemptionHints(amount) {\n        const { hintHelpers } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const price = await this._readable.getPrice();\n        const { firstRedemptionHint, partialRedemptionHintNICR, truncatedLUSDamount } = await hintHelpers.getRedemptionHints(amount.hex, price.hex, exports._redeemMaxIterations);\n        const [partialRedemptionUpperHint, partialRedemptionLowerHint] = partialRedemptionHintNICR.isZero()\n            ? [constants_1.AddressZero, constants_1.AddressZero]\n            : await this._findHintsForNominalCollateralRatio(decimalify(partialRedemptionHintNICR));\n        return [\n            decimalify(truncatedLUSDamount),\n            firstRedemptionHint,\n            partialRedemptionUpperHint,\n            partialRedemptionLowerHint,\n            partialRedemptionHintNICR\n        ];\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.openTrove} */\n    async openTrove(params, maxBorrowingRate, overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const normalized = lib_base_1._normalizeTroveCreation(params);\n        const { depositCollateral, borrowLUSD } = normalized;\n        const fees = await this._readable.getFees();\n        const borrowingRate = fees.borrowingRate();\n        const newTrove = lib_base_1.Trove.create(normalized, borrowingRate);\n        maxBorrowingRate =\n            maxBorrowingRate !== undefined\n                ? lib_base_1.Decimal.from(maxBorrowingRate)\n                : borrowingRate.add(defaultBorrowingRateSlippageTolerance);\n        return this._wrapTroveChangeWithFees(normalized, await borrowerOperations.estimateAndPopulate.openTrove({ value: depositCollateral.hex, ...overrides }, compose(addGasForPotentialLastFeeOperationTimeUpdate, addGasForPotentialListTraversal), maxBorrowingRate.hex, borrowLUSD.hex, ...(await this._findHints(newTrove))));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.closeTrove} */\n    async closeTrove(overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapTroveClosure(await borrowerOperations.estimateAndPopulate.closeTrove({ ...overrides }, id));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.depositCollateral} */\n    depositCollateral(amount, overrides) {\n        return this.adjustTrove({ depositCollateral: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawCollateral} */\n    withdrawCollateral(amount, overrides) {\n        return this.adjustTrove({ withdrawCollateral: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.borrowLUSD} */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.adjustTrove({ borrowLUSD: amount }, maxBorrowingRate, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.repayLUSD} */\n    repayLUSD(amount, overrides) {\n        return this.adjustTrove({ repayLUSD: amount }, undefined, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.adjustTrove} */\n    async adjustTrove(params, maxBorrowingRate, overrides) {\n        var _a, _b;\n        const address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides);\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const normalized = lib_base_1._normalizeTroveAdjustment(params);\n        const { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD } = normalized;\n        const [trove, fees] = await Promise.all([\n            this._readable.getTrove(address),\n            borrowLUSD && this._readable.getFees()\n        ]);\n        const borrowingRate = fees === null || fees === void 0 ? void 0 : fees.borrowingRate();\n        const finalTrove = trove.adjust(normalized, borrowingRate);\n        maxBorrowingRate =\n            maxBorrowingRate !== undefined\n                ? lib_base_1.Decimal.from(maxBorrowingRate)\n                : (_a = borrowingRate === null || borrowingRate === void 0 ? void 0 : borrowingRate.add(defaultBorrowingRateSlippageTolerance)) !== null && _a !== void 0 ? _a : lib_base_1.Decimal.ZERO;\n        return this._wrapTroveChangeWithFees(normalized, await borrowerOperations.estimateAndPopulate.adjustTrove({ value: depositCollateral === null || depositCollateral === void 0 ? void 0 : depositCollateral.hex, ...overrides }, compose(borrowLUSD ? addGasForPotentialLastFeeOperationTimeUpdate : id, addGasForPotentialListTraversal), maxBorrowingRate.hex, (withdrawCollateral !== null && withdrawCollateral !== void 0 ? withdrawCollateral : lib_base_1.Decimal.ZERO).hex, ((_b = borrowLUSD !== null && borrowLUSD !== void 0 ? borrowLUSD : repayLUSD) !== null && _b !== void 0 ? _b : lib_base_1.Decimal.ZERO).hex, !!borrowLUSD, ...(await this._findHints(finalTrove))));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.claimCollateralSurplus} */\n    async claimCollateralSurplus(overrides) {\n        const { borrowerOperations } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await borrowerOperations.estimateAndPopulate.claimCollateral({ ...overrides }, id));\n    }\n    /** @internal */\n    async setPrice(price, overrides) {\n        const { priceFeed } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (!contracts_1._priceFeedIsTestnet(priceFeed)) {\n            throw new Error(\"setPrice() unavailable on this deployment of Liquity\");\n        }\n        return this._wrapSimpleTransaction(await priceFeed.estimateAndPopulate.setPrice({ ...overrides }, id, lib_base_1.Decimal.from(price).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.liquidate} */\n    async liquidate(address, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (Array.isArray(address)) {\n            return this._wrapLiquidation(await troveManager.estimateAndPopulate.batchLiquidateTroves({ ...overrides }, addGasForLQTYIssuance, address));\n        }\n        else {\n            return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidate({ ...overrides }, addGasForLQTYIssuance, address));\n        }\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.liquidateUpTo} */\n    async liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapLiquidation(await troveManager.estimateAndPopulate.liquidateTroves({ ...overrides }, addGasForLQTYIssuance, maximumNumberOfTrovesToLiquidate));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.depositLUSDInStabilityPool} */\n    async depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        var _a;\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const depositLUSD = lib_base_1.Decimal.from(amount);\n        return this._wrapStabilityDepositTopup({ depositLUSD }, await stabilityPool.estimateAndPopulate.provideToSP({ ...overrides }, addGasForLQTYIssuance, depositLUSD.hex, (_a = frontendTag !== null && frontendTag !== void 0 ? frontendTag : this._readable.connection.frontendTag) !== null && _a !== void 0 ? _a : constants_1.AddressZero));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawLUSDFromStabilityPool} */\n    async withdrawLUSDFromStabilityPool(amount, overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapStabilityDepositWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP({ ...overrides }, addGasForLQTYIssuance, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawGainsFromStabilityPool} */\n    async withdrawGainsFromStabilityPool(overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapStabilityPoolGainsWithdrawal(await stabilityPool.estimateAndPopulate.withdrawFromSP({ ...overrides }, addGasForLQTYIssuance, lib_base_1.Decimal.ZERO.hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.transferCollateralGainToTrove} */\n    async transferCollateralGainToTrove(overrides) {\n        const address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides);\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const [initialTrove, stabilityDeposit] = await Promise.all([\n            this._readable.getTrove(address),\n            this._readable.getStabilityDeposit(address)\n        ]);\n        const finalTrove = initialTrove.addCollateral(stabilityDeposit.collateralGain);\n        return this._wrapCollateralGainTransfer(await stabilityPool.estimateAndPopulate.withdrawETHGainToTrove({ ...overrides }, compose(addGasForPotentialListTraversal, addGasForLQTYIssuance), ...(await this._findHints(finalTrove))));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.sendLUSD} */\n    async sendLUSD(toAddress, amount, overrides) {\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lusdToken.estimateAndPopulate.transfer({ ...overrides }, id, toAddress, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.sendLQTY} */\n    async sendLQTY(toAddress, amount, overrides) {\n        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyToken.estimateAndPopulate.transfer({ ...overrides }, id, toAddress, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.redeemLUSD} */\n    async redeemLUSD(amount, maxRedemptionRate, overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        const attemptedLUSDAmount = lib_base_1.Decimal.from(amount);\n        const [fees, total, [truncatedAmount, firstRedemptionHint, ...partialHints]] = await Promise.all([\n            this._readable.getFees(),\n            this._readable.getTotal(),\n            this._findRedemptionHints(attemptedLUSDAmount)\n        ]);\n        if (truncatedAmount.isZero) {\n            throw new Error(`redeemLUSD: amount too low to redeem (try at least ${lib_base_1.LUSD_MINIMUM_NET_DEBT})`);\n        }\n        const defaultMaxRedemptionRate = (amount) => lib_base_1.Decimal.min(fees.redemptionRate(amount.div(total.debt)).add(defaultRedemptionRateSlippageTolerance), lib_base_1.Decimal.ONE);\n        const populateRedemption = async (attemptedLUSDAmount, maxRedemptionRate, truncatedAmount = attemptedLUSDAmount, partialHints = [constants_1.AddressZero, constants_1.AddressZero, 0]) => {\n            const maxRedemptionRateOrDefault = maxRedemptionRate !== undefined\n                ? lib_base_1.Decimal.from(maxRedemptionRate)\n                : defaultMaxRedemptionRate(truncatedAmount);\n            return new PopulatedEthersRedemption(await troveManager.estimateAndPopulate.redeemCollateral({ ...overrides }, addGasForPotentialLastFeeOperationTimeUpdate, truncatedAmount.hex, firstRedemptionHint, ...partialHints, exports._redeemMaxIterations, maxRedemptionRateOrDefault.hex), this._readable.connection, attemptedLUSDAmount, truncatedAmount, truncatedAmount.lt(attemptedLUSDAmount)\n                ? newMaxRedemptionRate => populateRedemption(truncatedAmount.add(lib_base_1.LUSD_MINIMUM_NET_DEBT), newMaxRedemptionRate !== null && newMaxRedemptionRate !== void 0 ? newMaxRedemptionRate : maxRedemptionRate)\n                : undefined);\n        };\n        return populateRedemption(attemptedLUSDAmount, maxRedemptionRate, truncatedAmount, partialHints);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.stakeLQTY} */\n    async stakeLQTY(amount, overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.stake({ ...overrides }, id, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.unstakeLQTY} */\n    async unstakeLQTY(amount, overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await lqtyStaking.estimateAndPopulate.unstake({ ...overrides }, id, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawGainsFromStaking} */\n    withdrawGainsFromStaking(overrides) {\n        return this.unstakeLQTY(lib_base_1.Decimal.ZERO, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.registerFrontend} */\n    async registerFrontend(kickbackRate, overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await stabilityPool.estimateAndPopulate.registerFrontEnd({ ...overrides }, id, lib_base_1.Decimal.from(kickbackRate).hex));\n    }\n    /** @internal */\n    async _mintUniToken(amount, address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this._readable.connection, overrides));\n        const { uniToken } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        if (!contracts_1._uniTokenIsMock(uniToken)) {\n            throw new Error(\"_mintUniToken() unavailable on this deployment of Liquity\");\n        }\n        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.mint({ ...overrides }, id, address, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.approveUniTokens} */\n    async approveUniTokens(allowance, overrides) {\n        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await uniToken.estimateAndPopulate.approve({ ...overrides }, id, unipool.address, lib_base_1.Decimal.from(allowance !== null && allowance !== void 0 ? allowance : lib_base_1.Decimal.INFINITY).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.stakeUniTokens} */\n    async stakeUniTokens(amount, overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.stake({ ...overrides }, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.unstakeUniTokens} */\n    async unstakeUniTokens(amount, overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdraw({ ...overrides }, addGasForUnipoolRewardUpdate, lib_base_1.Decimal.from(amount).hex));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.withdrawLQTYRewardFromLiquidityMining} */\n    async withdrawLQTYRewardFromLiquidityMining(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.claimReward({ ...overrides }, addGasForUnipoolRewardUpdate));\n    }\n    /** {@inheritDoc @liquity/lib-base#PopulatableLiquity.exitLiquidityMining} */\n    async exitLiquidityMining(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this._readable.connection);\n        return this._wrapSimpleTransaction(await unipool.estimateAndPopulate.withdrawAndClaim({ ...overrides }, addGasForUnipoolRewardUpdate));\n    }\n}\nexports.PopulatableEthersLiquity = PopulatableEthersLiquity;\n//# sourceMappingURL=PopulatableEthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LQTYStake = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n\n * @public\n */\nclass LQTYStake {\n    /** @internal */\n    constructor(stakedLQTY = Decimal_1.Decimal.ZERO, collateralGain = Decimal_1.Decimal.ZERO, lusdGain = Decimal_1.Decimal.ZERO) {\n        this.stakedLQTY = stakedLQTY;\n        this.collateralGain = collateralGain;\n        this.lusdGain = lusdGain;\n    }\n    get isEmpty() {\n        return this.stakedLQTY.isZero && this.collateralGain.isZero && this.lusdGain.isZero;\n    }\n    /** @internal */\n    toString() {\n        return (`{ stakedLQTY: ${this.stakedLQTY}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lusdGain: ${this.lusdGain} }`);\n    }\n    /**\n     * Compare to another instance of `LQTYStake`.\n     */\n    equals(that) {\n        return (this.stakedLQTY.eq(that.stakedLQTY) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lusdGain.eq(that.lusdGain));\n    }\n    /**\n     * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n     *\n     * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n     */\n    whatChanged(thatStakedLQTY) {\n        thatStakedLQTY = Decimal_1.Decimal.from(thatStakedLQTY);\n        if (thatStakedLQTY.lt(this.stakedLQTY)) {\n            return {\n                unstakeLQTY: this.stakedLQTY.sub(thatStakedLQTY),\n                unstakeAllLQTY: thatStakedLQTY.isZero\n            };\n        }\n        if (thatStakedLQTY.gt(this.stakedLQTY)) {\n            return { stakeLQTY: thatStakedLQTY.sub(this.stakedLQTY) };\n        }\n    }\n    /**\n     * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n     *\n     * @returns The new staked LQTY amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.stakedLQTY;\n        }\n        if (change.unstakeLQTY !== undefined) {\n            return change.unstakeAllLQTY || this.stakedLQTY.lte(change.unstakeLQTY)\n                ? Decimal_1.Decimal.ZERO\n                : this.stakedLQTY.sub(change.unstakeLQTY);\n        }\n        else {\n            return this.stakedLQTY.add(change.stakeLQTY);\n        }\n    }\n}\nexports.LQTYStake = LQTYStake;\n//# sourceMappingURL=LQTYStake.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._CachedReadableLiquity = void 0;\n/** @internal */\nclass _CachedReadableLiquity {\n    constructor(readable, cache) {\n        this._readable = readable;\n        this._cache = cache;\n    }\n    async getTotalRedistributed(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalRedistributed(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalRedistributed(...extraParams));\n    }\n    async getTroveBeforeRedistribution(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTroveBeforeRedistribution(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTroveBeforeRedistribution(address, ...extraParams));\n    }\n    async getTrove(address, ...extraParams) {\n        const [troveBeforeRedistribution, totalRedistributed] = await Promise.all([\n            this.getTroveBeforeRedistribution(address, ...extraParams),\n            this.getTotalRedistributed(...extraParams)\n        ]);\n        return troveBeforeRedistribution.applyRedistribution(totalRedistributed);\n    }\n    async getNumberOfTroves(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getNumberOfTroves(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getNumberOfTroves(...extraParams));\n    }\n    async getPrice(...extraParams) {\n        var _a;\n        return (_a = this._cache.getPrice(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getPrice(...extraParams);\n    }\n    async getTotal(...extraParams) {\n        var _a;\n        return (_a = this._cache.getTotal(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotal(...extraParams);\n    }\n    async getStabilityDeposit(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getStabilityDeposit(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getStabilityDeposit(address, ...extraParams));\n    }\n    async getRemainingStabilityPoolLQTYReward(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getRemainingStabilityPoolLQTYReward(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getRemainingStabilityPoolLQTYReward(...extraParams));\n    }\n    async getLUSDInStabilityPool(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLUSDInStabilityPool(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLUSDInStabilityPool(...extraParams));\n    }\n    async getLUSDBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLUSDBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLUSDBalance(address, ...extraParams));\n    }\n    async getLQTYBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLQTYBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLQTYBalance(address, ...extraParams));\n    }\n    async getUniTokenBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getUniTokenBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getUniTokenBalance(address, ...extraParams));\n    }\n    async getUniTokenAllowance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getUniTokenAllowance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getUniTokenAllowance(address, ...extraParams));\n    }\n    async getRemainingLiquidityMiningLQTYReward(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getRemainingLiquidityMiningLQTYReward(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getRemainingLiquidityMiningLQTYReward(...extraParams));\n    }\n    async getLiquidityMiningStake(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLiquidityMiningStake(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLiquidityMiningStake(address, ...extraParams));\n    }\n    async getTotalStakedUniTokens(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalStakedUniTokens(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalStakedUniTokens(...extraParams));\n    }\n    async getLiquidityMiningLQTYReward(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLiquidityMiningLQTYReward(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLiquidityMiningLQTYReward(address, ...extraParams));\n    }\n    async getCollateralSurplusBalance(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getCollateralSurplusBalance(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getCollateralSurplusBalance(address, ...extraParams));\n    }\n    async getTroves(params, ...extraParams) {\n        var _a;\n        const { beforeRedistribution, ...restOfParams } = params;\n        const [totalRedistributed, troves] = await Promise.all([\n            beforeRedistribution ? undefined : this.getTotalRedistributed(...extraParams),\n            (_a = this._cache.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTroves({ beforeRedistribution: true, ...restOfParams }, ...extraParams)\n        ]);\n        if (totalRedistributed) {\n            return troves.map(trove => trove.applyRedistribution(totalRedistributed));\n        }\n        else {\n            return troves;\n        }\n    }\n    async getFees(...extraParams) {\n        var _a;\n        return (_a = this._cache.getFees(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getFees(...extraParams);\n    }\n    async getLQTYStake(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getLQTYStake(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getLQTYStake(address, ...extraParams));\n    }\n    async getTotalStakedLQTY(...extraParams) {\n        var _a;\n        return ((_a = this._cache.getTotalStakedLQTY(...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getTotalStakedLQTY(...extraParams));\n    }\n    async getFrontendStatus(address, ...extraParams) {\n        var _a;\n        return ((_a = this._cache.getFrontendStatus(address, ...extraParams)) !== null && _a !== void 0 ? _a : this._readable.getFrontendStatus(address, ...extraParams));\n    }\n}\nexports._CachedReadableLiquity = _CachedReadableLiquity;\n//# sourceMappingURL=_CachedReadableLiquity.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connect = exports._connectByChainId = exports._connectToDeployment = exports.UnsupportedNetworkError = exports._usingStore = exports._requireFrontendAddress = exports._requireAddress = exports._getProvider = exports._requireSigner = exports._getBlockTimestamp = exports._getContracts = void 0;\nconst abstract_signer_1 = require(\"@ethersproject/abstract-signer\");\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst dev_json_1 = __importDefault(require(\"../deployments/dev.json\"));\nconst goerli_json_1 = __importDefault(require(\"../deployments/goerli.json\"));\nconst kovan_json_1 = __importDefault(require(\"../deployments/kovan.json\"));\nconst rinkeby_json_1 = __importDefault(require(\"../deployments/rinkeby.json\"));\nconst ropsten_json_1 = __importDefault(require(\"../deployments/ropsten.json\"));\nconst mainnet_json_1 = __importDefault(require(\"../deployments/mainnet.json\"));\nconst contracts_1 = require(\"./contracts\");\nconst _Multicall_1 = require(\"./_Multicall\");\nconst dev = dev_json_1.default;\nconst deployments = {\n    [mainnet_json_1.default.chainId]: mainnet_json_1.default,\n    [ropsten_json_1.default.chainId]: ropsten_json_1.default,\n    [rinkeby_json_1.default.chainId]: rinkeby_json_1.default,\n    [goerli_json_1.default.chainId]: goerli_json_1.default,\n    [kovan_json_1.default.chainId]: kovan_json_1.default,\n    ...(dev !== null ? { [dev.chainId]: dev } : {})\n};\nconst branded = (t) => t;\nconst connectionFrom = (provider, signer, _contracts, _multicall, { deploymentDate, totalStabilityPoolLQTYReward, liquidityMiningLQTYRewardRate, ...deployment }, optionalParams) => {\n    if (optionalParams &&\n        optionalParams.useStore !== undefined &&\n        !validStoreOptions.includes(optionalParams.useStore)) {\n        throw new Error(`Invalid useStore value ${optionalParams.useStore}`);\n    }\n    return branded({\n        provider,\n        signer,\n        _contracts,\n        _multicall,\n        deploymentDate: new Date(deploymentDate),\n        totalStabilityPoolLQTYReward: lib_base_1.Decimal.from(totalStabilityPoolLQTYReward),\n        liquidityMiningLQTYRewardRate: lib_base_1.Decimal.from(liquidityMiningLQTYRewardRate),\n        ...deployment,\n        ...optionalParams\n    });\n};\n/** @internal */\nconst _getContracts = (connection) => connection._contracts;\nexports._getContracts = _getContracts;\nconst getMulticall = (connection) => connection._multicall;\nconst numberify = (bigNumber) => bigNumber.toNumber();\nconst getTimestampFromBlock = ({ timestamp }) => timestamp;\n/** @internal */\nconst _getBlockTimestamp = (connection, blockTag = \"latest\") => { var _a, _b; return (_b = (_a = \n// Get the timestamp via a contract call whenever possible, to make it batchable with other calls\ngetMulticall(connection)) === null || _a === void 0 ? void 0 : _a.getCurrentBlockTimestamp({ blockTag }).then(numberify)) !== null && _b !== void 0 ? _b : exports._getProvider(connection).getBlock(blockTag).then(getTimestampFromBlock); };\nexports._getBlockTimestamp = _getBlockTimestamp;\nconst panic = (e) => {\n    throw e;\n};\n/** @internal */\nconst _requireSigner = (connection) => { var _a; return (_a = connection.signer) !== null && _a !== void 0 ? _a : panic(new Error(\"Must be connected through a Signer\")); };\nexports._requireSigner = _requireSigner;\n/** @internal */\nconst _getProvider = (connection) => connection.provider;\nexports._getProvider = _getProvider;\n// TODO parameterize error message?\n/** @internal */\nconst _requireAddress = (connection, overrides) => { var _a, _b; return (_b = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.from) !== null && _a !== void 0 ? _a : connection.userAddress) !== null && _b !== void 0 ? _b : panic(new Error(\"A user address is required\")); };\nexports._requireAddress = _requireAddress;\n/** @internal */\nconst _requireFrontendAddress = (connection) => { var _a; return (_a = connection.frontendTag) !== null && _a !== void 0 ? _a : panic(new Error(\"A frontend address is required\")); };\nexports._requireFrontendAddress = _requireFrontendAddress;\n/** @internal */\nconst _usingStore = (connection) => connection.useStore !== undefined;\nexports._usingStore = _usingStore;\n/**\n * Thrown when trying to connect to a network where Liquity is not deployed.\n *\n * @remarks\n * Thrown by {@link ReadableEthersLiquity.(connect:2)} and {@link EthersLiquity.(connect:2)}.\n *\n * @public\n */\nclass UnsupportedNetworkError extends Error {\n    /** @internal */\n    constructor(chainId) {\n        super(`Unsupported network (chainId = ${chainId})`);\n        this.name = \"UnsupportedNetworkError\";\n        this.chainId = chainId;\n    }\n}\nexports.UnsupportedNetworkError = UnsupportedNetworkError;\nconst getProviderAndSigner = (signerOrProvider) => {\n    var _a;\n    const provider = abstract_signer_1.Signer.isSigner(signerOrProvider)\n        ? (_a = signerOrProvider.provider) !== null && _a !== void 0 ? _a : panic(new Error(\"Signer must have a Provider\")) : signerOrProvider;\n    const signer = abstract_signer_1.Signer.isSigner(signerOrProvider) ? signerOrProvider : undefined;\n    return [provider, signer];\n};\n/** @internal */\nconst _connectToDeployment = (deployment, signerOrProvider, optionalParams) => connectionFrom(...getProviderAndSigner(signerOrProvider), contracts_1._connectToContracts(signerOrProvider, deployment), undefined, deployment, optionalParams);\nexports._connectToDeployment = _connectToDeployment;\nconst validStoreOptions = [\"blockPolled\"];\n/** @internal */\nfunction _connectByChainId(provider, signer, chainId, optionalParams) {\n    var _a;\n    const deployment = (_a = deployments[chainId]) !== null && _a !== void 0 ? _a : panic(new UnsupportedNetworkError(chainId));\n    return connectionFrom(provider, signer, contracts_1._connectToContracts(signer !== null && signer !== void 0 ? signer : provider, deployment), _Multicall_1._connectToMulticall(signer !== null && signer !== void 0 ? signer : provider, chainId), deployment, optionalParams);\n}\nexports._connectByChainId = _connectByChainId;\n/** @internal */\nconst _connect = async (signerOrProvider, optionalParams) => {\n    const [provider, signer] = getProviderAndSigner(signerOrProvider);\n    if (signer) {\n        if ((optionalParams === null || optionalParams === void 0 ? void 0 : optionalParams.userAddress) !== undefined) {\n            throw new Error(\"Can't override userAddress when connecting through Signer\");\n        }\n        optionalParams = {\n            ...optionalParams,\n            userAddress: await signer.getAddress()\n        };\n    }\n    return _connectByChainId(provider, signer, (await provider.getNetwork()).chainId, optionalParams);\n};\nexports._connect = _connect;\n//# sourceMappingURL=EthersLiquityConnection.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadableEthersLiquity = void 0;\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst BlockPolledLiquityStore_1 = require(\"./BlockPolledLiquityStore\");\n// TODO: these are constant in the contracts, so it doesn't make sense to make a call for them,\n// but to avoid having to update them here when we change them in the contracts, we could read\n// them once after deployment and save them to LiquityDeployment.\nconst MINUTE_DECAY_FACTOR = lib_base_1.Decimal.from(\"0.999037758833783000\");\nconst BETA = lib_base_1.Decimal.from(2);\nvar BackendTroveStatus;\n(function (BackendTroveStatus) {\n    BackendTroveStatus[BackendTroveStatus[\"nonExistent\"] = 0] = \"nonExistent\";\n    BackendTroveStatus[BackendTroveStatus[\"active\"] = 1] = \"active\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByOwner\"] = 2] = \"closedByOwner\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByLiquidation\"] = 3] = \"closedByLiquidation\";\n    BackendTroveStatus[BackendTroveStatus[\"closedByRedemption\"] = 4] = \"closedByRedemption\";\n})(BackendTroveStatus || (BackendTroveStatus = {}));\nconst panic = (error) => {\n    throw error;\n};\nconst userTroveStatusFrom = (backendStatus) => backendStatus === BackendTroveStatus.nonExistent\n    ? \"nonExistent\"\n    : backendStatus === BackendTroveStatus.active\n        ? \"open\"\n        : backendStatus === BackendTroveStatus.closedByOwner\n            ? \"closedByOwner\"\n            : backendStatus === BackendTroveStatus.closedByLiquidation\n                ? \"closedByLiquidation\"\n                : backendStatus === BackendTroveStatus.closedByRedemption\n                    ? \"closedByRedemption\"\n                    : panic(new Error(`invalid backendStatus ${backendStatus}`));\nconst decimalify = (bigNumber) => lib_base_1.Decimal.fromBigNumberString(bigNumber.toHexString());\nconst numberify = (bigNumber) => bigNumber.toNumber();\nconst convertToDate = (timestamp) => new Date(timestamp * 1000);\nconst validSortingOptions = [\"ascendingCollateralRatio\", \"descendingCollateralRatio\"];\nconst expectPositiveInt = (obj, key) => {\n    if (obj[key] !== undefined) {\n        if (!Number.isInteger(obj[key])) {\n            throw new Error(`${key} must be an integer`);\n        }\n        if (obj[key] < 0) {\n            throw new Error(`${key} must not be negative`);\n        }\n    }\n};\n/**\n * Ethers-based implementation of {@link @liquity/lib-base#ReadableLiquity}.\n *\n * @public\n */\nclass ReadableEthersLiquity {\n    /** @internal */\n    constructor(connection) {\n        this.connection = connection;\n    }\n    /** @internal */\n    static _from(connection) {\n        const readable = new ReadableEthersLiquity(connection);\n        return connection.useStore === \"blockPolled\"\n            ? new _BlockPolledReadableEthersLiquity(readable)\n            : readable;\n    }\n    /**\n     * Connect to the Liquity protocol and create a `ReadableEthersLiquity` object.\n     *\n     * @param signerOrProvider - Ethers `Signer` or `Provider` to use for connecting to the Ethereum\n     *                           network.\n     * @param optionalParams - Optional parameters that can be used to customize the connection.\n     */\n    static async connect(signerOrProvider, optionalParams) {\n        return ReadableEthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    async getTotalRedistributed(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [collateral, debt] = await Promise.all([\n            troveManager.L_ETH({ ...overrides }).then(decimalify),\n            troveManager.L_LUSDDebt({ ...overrides }).then(decimalify)\n        ]);\n        return new lib_base_1.Trove(collateral, debt);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    async getTroveBeforeRedistribution(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [trove, snapshot] = await Promise.all([\n            troveManager.Troves(address, { ...overrides }),\n            troveManager.rewardSnapshots(address, { ...overrides })\n        ]);\n        if (trove.status === BackendTroveStatus.active) {\n            return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status), decimalify(trove.coll), decimalify(trove.debt), decimalify(trove.stake), new lib_base_1.Trove(decimalify(snapshot.ETH), decimalify(snapshot.LUSDDebt)));\n        }\n        else {\n            return new lib_base_1.TroveWithPendingRedistribution(address, userTroveStatusFrom(trove.status));\n        }\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n    async getTrove(address, overrides) {\n        const [trove, totalRedistributed] = await Promise.all([\n            this.getTroveBeforeRedistribution(address, overrides),\n            this.getTotalRedistributed(overrides)\n        ]);\n        return trove.applyRedistribution(totalRedistributed);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    async getNumberOfTroves(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        return (await troveManager.getTroveOwnersCount({ ...overrides })).toNumber();\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        const { priceFeed } = EthersLiquityConnection_1._getContracts(this.connection);\n        return priceFeed.callStatic.fetchPrice({ ...overrides }).then(decimalify);\n    }\n    /** @internal */\n    async _getActivePool(overrides) {\n        const { activePool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [activeCollateral, activeDebt] = await Promise.all([\n            activePool.getETH({ ...overrides }),\n            activePool.getLUSDDebt({ ...overrides })\n        ].map(getBigNumber => getBigNumber.then(decimalify)));\n        return new lib_base_1.Trove(activeCollateral, activeDebt);\n    }\n    /** @internal */\n    async _getDefaultPool(overrides) {\n        const { defaultPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [liquidatedCollateral, closedDebt] = await Promise.all([\n            defaultPool.getETH({ ...overrides }),\n            defaultPool.getLUSDDebt({ ...overrides })\n        ].map(getBigNumber => getBigNumber.then(decimalify)));\n        return new lib_base_1.Trove(liquidatedCollateral, closedDebt);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n    async getTotal(overrides) {\n        const [activePool, defaultPool] = await Promise.all([\n            this._getActivePool(overrides),\n            this._getDefaultPool(overrides)\n        ]);\n        return activePool.add(defaultPool);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    async getStabilityDeposit(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [{ frontEndTag, initialValue }, currentLUSD, collateralGain, lqtyReward] = await Promise.all([\n            stabilityPool.deposits(address, { ...overrides }),\n            stabilityPool.getCompoundedLUSDDeposit(address, { ...overrides }),\n            stabilityPool.getDepositorETHGain(address, { ...overrides }),\n            stabilityPool.getDepositorLQTYGain(address, { ...overrides })\n        ]);\n        return new lib_base_1.StabilityDeposit(decimalify(initialValue), decimalify(currentLUSD), decimalify(collateralGain), decimalify(lqtyReward), frontEndTag);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    async getRemainingStabilityPoolLQTYReward(overrides) {\n        const { communityIssuance } = EthersLiquityConnection_1._getContracts(this.connection);\n        const issuanceCap = this.connection.totalStabilityPoolLQTYReward;\n        const totalLQTYIssued = decimalify(await communityIssuance.totalLQTYIssued({ ...overrides }));\n        // totalLQTYIssued approaches but never reaches issuanceCap\n        return issuanceCap.sub(totalLQTYIssued);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return stabilityPool.getTotalLUSDDeposits({ ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lusdToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lusdToken.balanceOf(address, { ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lqtyToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lqtyToken.balanceOf(address, { ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { uniToken } = EthersLiquityConnection_1._getContracts(this.connection);\n        return uniToken.balanceOf(address, { ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { uniToken, unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return uniToken.allowance(address, unipool.address, { ...overrides }).then(decimalify);\n    }\n    /** @internal */\n    async _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [totalSupply, rewardRate, periodFinish, lastUpdateTime] = await Promise.all([\n            unipool.totalSupply({ ...overrides }),\n            unipool.rewardRate({ ...overrides }).then(decimalify),\n            unipool.periodFinish({ ...overrides }).then(numberify),\n            unipool.lastUpdateTime({ ...overrides }).then(numberify)\n        ]);\n        return (blockTimestamp) => rewardRate.mul(Math.max(0, periodFinish - (totalSupply.isZero() ? lastUpdateTime : blockTimestamp)));\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    async getRemainingLiquidityMiningLQTYReward(overrides) {\n        const [calculateRemainingLQTY, blockTimestamp] = await Promise.all([\n            this._getRemainingLiquidityMiningLQTYRewardCalculator(overrides),\n            EthersLiquityConnection_1._getBlockTimestamp(this.connection, overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)\n        ]);\n        return calculateRemainingLQTY(blockTimestamp);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.balanceOf(address, { ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.totalSupply({ ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { unipool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return unipool.earned(address, { ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { collSurplusPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        return collSurplusPool.getCollateral(address, { ...overrides }).then(decimalify);\n    }\n    async getTroves(params, overrides) {\n        var _a, _b;\n        const { multiTroveGetter } = EthersLiquityConnection_1._getContracts(this.connection);\n        expectPositiveInt(params, \"first\");\n        expectPositiveInt(params, \"startingAt\");\n        if (!validSortingOptions.includes(params.sortedBy)) {\n            throw new Error(`sortedBy must be one of: ${validSortingOptions.map(x => `\"${x}\"`).join(\", \")}`);\n        }\n        const [totalRedistributed, backendTroves] = await Promise.all([\n            params.beforeRedistribution ? undefined : this.getTotalRedistributed({ ...overrides }),\n            multiTroveGetter.getMultipleSortedTroves(params.sortedBy === \"descendingCollateralRatio\"\n                ? (_a = params.startingAt) !== null && _a !== void 0 ? _a : 0 : -(((_b = params.startingAt) !== null && _b !== void 0 ? _b : 0) + 1), params.first, { ...overrides })\n        ]);\n        const troves = mapBackendTroves(backendTroves);\n        if (totalRedistributed) {\n            return troves.map(trove => trove.applyRedistribution(totalRedistributed));\n        }\n        else {\n            return troves;\n        }\n    }\n    /** @internal */\n    async _getFeesFactory(overrides) {\n        const { troveManager } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [lastFeeOperationTime, baseRateWithoutDecay] = await Promise.all([\n            troveManager.lastFeeOperationTime({ ...overrides }),\n            troveManager.baseRate({ ...overrides }).then(decimalify)\n        ]);\n        return (blockTimestamp, recoveryMode) => new lib_base_1.Fees(baseRateWithoutDecay, MINUTE_DECAY_FACTOR, BETA, convertToDate(lastFeeOperationTime.toNumber()), convertToDate(blockTimestamp), recoveryMode);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n    async getFees(overrides) {\n        const [createFees, total, price, blockTimestamp] = await Promise.all([\n            this._getFeesFactory(overrides),\n            this.getTotal(overrides),\n            this.getPrice(overrides),\n            EthersLiquityConnection_1._getBlockTimestamp(this.connection, overrides === null || overrides === void 0 ? void 0 : overrides.blockTag)\n        ]);\n        return createFees(blockTimestamp, total.collateralRatioIsBelowCritical(price));\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n    async getLQTYStake(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireAddress(this.connection));\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);\n        const [stakedLQTY, collateralGain, lusdGain] = await Promise.all([\n            lqtyStaking.stakes(address, { ...overrides }),\n            lqtyStaking.getPendingETHGain(address, { ...overrides }),\n            lqtyStaking.getPendingLUSDGain(address, { ...overrides })\n        ].map(getBigNumber => getBigNumber.then(decimalify)));\n        return new lib_base_1.LQTYStake(stakedLQTY, collateralGain, lusdGain);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    async getTotalStakedLQTY(overrides) {\n        const { lqtyStaking } = EthersLiquityConnection_1._getContracts(this.connection);\n        return lqtyStaking.totalLQTYStaked({ ...overrides }).then(decimalify);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n    async getFrontendStatus(address, overrides) {\n        address !== null && address !== void 0 ? address : (address = EthersLiquityConnection_1._requireFrontendAddress(this.connection));\n        const { stabilityPool } = EthersLiquityConnection_1._getContracts(this.connection);\n        const { registered, kickbackRate } = await stabilityPool.frontEnds(address, { ...overrides });\n        return registered\n            ? { status: \"registered\", kickbackRate: decimalify(kickbackRate) }\n            : { status: \"unregistered\" };\n    }\n}\nexports.ReadableEthersLiquity = ReadableEthersLiquity;\nconst mapBackendTroves = (troves) => troves.map(trove => new lib_base_1.TroveWithPendingRedistribution(trove.owner, \"open\", // These Troves are coming from the SortedTroves list, so they must be open\ndecimalify(trove.coll), decimalify(trove.debt), decimalify(trove.stake), new lib_base_1.Trove(decimalify(trove.snapshotETH), decimalify(trove.snapshotLUSDDebt))));\nclass BlockPolledLiquityStoreBasedCache {\n    constructor(store) {\n        this._store = store;\n    }\n    _blockHit(overrides) {\n        return (!overrides ||\n            overrides.blockTag === undefined ||\n            overrides.blockTag === this._store.state.blockTag);\n    }\n    _userHit(address, overrides) {\n        return (this._blockHit(overrides) &&\n            (address === undefined || address === this._store.connection.userAddress));\n    }\n    _frontendHit(address, overrides) {\n        return (this._blockHit(overrides) &&\n            (address === undefined || address === this._store.connection.frontendTag));\n    }\n    getTotalRedistributed(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.totalRedistributed;\n        }\n    }\n    getTroveBeforeRedistribution(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.troveBeforeRedistribution;\n        }\n    }\n    getTrove(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.trove;\n        }\n    }\n    getNumberOfTroves(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.numberOfTroves;\n        }\n    }\n    getPrice(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.price;\n        }\n    }\n    getTotal(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.total;\n        }\n    }\n    getStabilityDeposit(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.stabilityDeposit;\n        }\n    }\n    getRemainingStabilityPoolLQTYReward(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.remainingStabilityPoolLQTYReward;\n        }\n    }\n    getLUSDInStabilityPool(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.lusdInStabilityPool;\n        }\n    }\n    getLUSDBalance(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.lusdBalance;\n        }\n    }\n    getLQTYBalance(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.lqtyBalance;\n        }\n    }\n    getUniTokenBalance(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.uniTokenBalance;\n        }\n    }\n    getUniTokenAllowance(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.uniTokenAllowance;\n        }\n    }\n    getRemainingLiquidityMiningLQTYReward(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.remainingLiquidityMiningLQTYReward;\n        }\n    }\n    getLiquidityMiningStake(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.liquidityMiningStake;\n        }\n    }\n    getTotalStakedUniTokens(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.totalStakedUniTokens;\n        }\n    }\n    getLiquidityMiningLQTYReward(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.liquidityMiningLQTYReward;\n        }\n    }\n    getCollateralSurplusBalance(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.collateralSurplusBalance;\n        }\n    }\n    getFees(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.fees;\n        }\n    }\n    getLQTYStake(address, overrides) {\n        if (this._userHit(address, overrides)) {\n            return this._store.state.lqtyStake;\n        }\n    }\n    getTotalStakedLQTY(overrides) {\n        if (this._blockHit(overrides)) {\n            return this._store.state.totalStakedLQTY;\n        }\n    }\n    getFrontendStatus(address, overrides) {\n        if (this._frontendHit(address, overrides)) {\n            return this._store.state.frontend;\n        }\n    }\n    getTroves() {\n        return undefined;\n    }\n}\nclass _BlockPolledReadableEthersLiquity extends lib_base_1._CachedReadableLiquity {\n    constructor(readable) {\n        const store = new BlockPolledLiquityStore_1.BlockPolledLiquityStore(readable);\n        super(readable, new BlockPolledLiquityStoreBasedCache(store));\n        this.store = store;\n        this.connection = readable.connection;\n    }\n    hasStore(store) {\n        return store === undefined || store === \"blockPolled\";\n    }\n    _getActivePool() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getDefaultPool() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getFeesFactory() {\n        throw new Error(\"Method not implemented.\");\n    }\n    _getRemainingLiquidityMiningLQTYRewardCalculator() {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n//# sourceMappingURL=ReadableEthersLiquity.js.map","export const version = \"bignumber/5.0.15\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        logger.checkNew(new.target, BigNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot raise to negative values\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes piority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n//# sourceMappingURL=bignumber.js.map","\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    value = whole + \".\" + fraction;\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    if (multiplier.length - 1 === 0) {\n        return BigNumber.from(value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Prevent underflow\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else if (value != null) {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        logger.checkNew(new.target, FixedNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        let comps = this.toString().split(\".\");\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE);\n        }\n        return result;\n    }\n    ceiling() {\n        let comps = this.toString().split(\".\");\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE);\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        let comps = this.toString().split(\".\");\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals));\n        return this.mulUnsafe(factor).addUnsafe(BUMP).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthersLiquity = exports.EthersTransactionFailedError = void 0;\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst PopulatableEthersLiquity_1 = require(\"./PopulatableEthersLiquity\");\nconst ReadableEthersLiquity_1 = require(\"./ReadableEthersLiquity\");\nconst SendableEthersLiquity_1 = require(\"./SendableEthersLiquity\");\n/**\n * Thrown by {@link EthersLiquity} in case of transaction failure.\n *\n * @public\n */\nclass EthersTransactionFailedError extends lib_base_1.TransactionFailedError {\n    constructor(message, failedReceipt) {\n        super(\"EthersTransactionFailedError\", message, failedReceipt);\n    }\n}\nexports.EthersTransactionFailedError = EthersTransactionFailedError;\nconst waitForSuccess = async (tx) => {\n    const receipt = await tx.waitForReceipt();\n    if (receipt.status !== \"succeeded\") {\n        throw new EthersTransactionFailedError(\"Transaction failed\", receipt);\n    }\n    return receipt.details;\n};\n/**\n * Convenience class that combines multiple interfaces of the library in one object.\n *\n * @public\n */\nclass EthersLiquity {\n    /** @internal */\n    constructor(readable) {\n        this._readable = readable;\n        this.connection = readable.connection;\n        this.populate = new PopulatableEthersLiquity_1.PopulatableEthersLiquity(readable);\n        this.send = new SendableEthersLiquity_1.SendableEthersLiquity(this.populate);\n    }\n    /** @internal */\n    static _from(connection) {\n        if (EthersLiquityConnection_1._usingStore(connection)) {\n            return new _EthersLiquityWithStore(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n        else {\n            return new EthersLiquity(ReadableEthersLiquity_1.ReadableEthersLiquity._from(connection));\n        }\n    }\n    static async connect(signerOrProvider, optionalParams) {\n        return EthersLiquity._from(await EthersLiquityConnection_1._connect(signerOrProvider, optionalParams));\n    }\n    hasStore() {\n        return false;\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalRedistributed} */\n    getTotalRedistributed(overrides) {\n        return this._readable.getTotalRedistributed(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTroveBeforeRedistribution} */\n    getTroveBeforeRedistribution(address, overrides) {\n        return this._readable.getTroveBeforeRedistribution(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTrove} */\n    getTrove(address, overrides) {\n        return this._readable.getTrove(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getNumberOfTroves} */\n    getNumberOfTroves(overrides) {\n        return this._readable.getNumberOfTroves(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getPrice} */\n    getPrice(overrides) {\n        return this._readable.getPrice(overrides);\n    }\n    /** @internal */\n    _getActivePool(overrides) {\n        return this._readable._getActivePool(overrides);\n    }\n    /** @internal */\n    _getDefaultPool(overrides) {\n        return this._readable._getDefaultPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotal} */\n    getTotal(overrides) {\n        return this._readable.getTotal(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getStabilityDeposit} */\n    getStabilityDeposit(address, overrides) {\n        return this._readable.getStabilityDeposit(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingStabilityPoolLQTYReward} */\n    getRemainingStabilityPoolLQTYReward(overrides) {\n        return this._readable.getRemainingStabilityPoolLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDInStabilityPool} */\n    getLUSDInStabilityPool(overrides) {\n        return this._readable.getLUSDInStabilityPool(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLUSDBalance} */\n    getLUSDBalance(address, overrides) {\n        return this._readable.getLUSDBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYBalance} */\n    getLQTYBalance(address, overrides) {\n        return this._readable.getLQTYBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenBalance} */\n    getUniTokenBalance(address, overrides) {\n        return this._readable.getUniTokenBalance(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getUniTokenAllowance} */\n    getUniTokenAllowance(address, overrides) {\n        return this._readable.getUniTokenAllowance(address, overrides);\n    }\n    /** @internal */\n    _getRemainingLiquidityMiningLQTYRewardCalculator(overrides) {\n        return this._readable._getRemainingLiquidityMiningLQTYRewardCalculator(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getRemainingLiquidityMiningLQTYReward} */\n    getRemainingLiquidityMiningLQTYReward(overrides) {\n        return this._readable.getRemainingLiquidityMiningLQTYReward(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningStake} */\n    getLiquidityMiningStake(address, overrides) {\n        return this._readable.getLiquidityMiningStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedUniTokens} */\n    getTotalStakedUniTokens(overrides) {\n        return this._readable.getTotalStakedUniTokens(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLiquidityMiningLQTYReward} */\n    getLiquidityMiningLQTYReward(address, overrides) {\n        return this._readable.getLiquidityMiningLQTYReward(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance} */\n    getCollateralSurplusBalance(address, overrides) {\n        return this._readable.getCollateralSurplusBalance(address, overrides);\n    }\n    getTroves(params, overrides) {\n        return this._readable.getTroves(params, overrides);\n    }\n    /** @internal */\n    _getFeesFactory(overrides) {\n        return this._readable._getFeesFactory(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFees} */\n    getFees(overrides) {\n        return this._readable.getFees(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getLQTYStake} */\n    getLQTYStake(address, overrides) {\n        return this._readable.getLQTYStake(address, overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getTotalStakedLQTY} */\n    getTotalStakedLQTY(overrides) {\n        return this._readable.getTotalStakedLQTY(overrides);\n    }\n    /** {@inheritDoc @liquity/lib-base#ReadableLiquity.getFrontendStatus} */\n    getFrontendStatus(address, overrides) {\n        return this._readable.getFrontendStatus(address, overrides);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.openTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    openTrove(params, maxBorrowingRate, overrides) {\n        return this.send.openTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.closeTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    closeTrove(overrides) {\n        return this.send.closeTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.adjustTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    adjustTrove(params, maxBorrowingRate, overrides) {\n        return this.send.adjustTrove(params, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositCollateral(amount, overrides) {\n        return this.send.depositCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawCollateral}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawCollateral(amount, overrides) {\n        return this.send.withdrawCollateral(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.borrowLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this.send.borrowLUSD(amount, maxBorrowingRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.repayLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    repayLUSD(amount, overrides) {\n        return this.send.repayLUSD(amount, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this.send.setPrice(price, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidate}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidate(address, overrides) {\n        return this.send.liquidate(address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.liquidateUpTo}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this.send.liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.depositLUSDInStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this.send.depositLUSDInStabilityPool(amount, frontendTag, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLUSDFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this.send.withdrawLUSDFromStabilityPool(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStabilityPool}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this.send.withdrawGainsFromStabilityPool(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.transferCollateralGainToTrove}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    transferCollateralGainToTrove(overrides) {\n        return this.send.transferCollateralGainToTrove(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLUSD(toAddress, amount, overrides) {\n        return this.send.sendLUSD(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.sendLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    sendLQTY(toAddress, amount, overrides) {\n        return this.send.sendLQTY(toAddress, amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.redeemLUSD}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this.send.redeemLUSD(amount, maxRedemptionRate, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.claimCollateralSurplus}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    claimCollateralSurplus(overrides) {\n        return this.send.claimCollateralSurplus(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeLQTY(amount, overrides) {\n        return this.send.stakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeLQTY}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeLQTY(amount, overrides) {\n        return this.send.unstakeLQTY(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawGainsFromStaking}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawGainsFromStaking(overrides) {\n        return this.send.withdrawGainsFromStaking(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.registerFrontend}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    registerFrontend(kickbackRate, overrides) {\n        return this.send.registerFrontend(kickbackRate, overrides).then(waitForSuccess);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this.send._mintUniToken(amount, address, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.approveUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    approveUniTokens(allowance, overrides) {\n        return this.send.approveUniTokens(allowance, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.stakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    stakeUniTokens(amount, overrides) {\n        return this.send.stakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.unstakeUniTokens}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    unstakeUniTokens(amount, overrides) {\n        return this.send.unstakeUniTokens(amount, overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.withdrawLQTYRewardFromLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this.send.withdrawLQTYRewardFromLiquidityMining(overrides).then(waitForSuccess);\n    }\n    /**\n     * {@inheritDoc @liquity/lib-base#TransactableLiquity.exitLiquidityMining}\n     *\n     * @throws\n     * Throws {@link EthersTransactionFailedError} in case of transaction failure.\n     */\n    exitLiquidityMining(overrides) {\n        return this.send.exitLiquidityMining(overrides).then(waitForSuccess);\n    }\n}\nexports.EthersLiquity = EthersLiquity;\nclass _EthersLiquityWithStore extends EthersLiquity {\n    constructor(readable) {\n        super(readable);\n        this.store = readable.store;\n    }\n    hasStore(store) {\n        return store === undefined || store === this.connection.useStore;\n    }\n}\n//# sourceMappingURL=EthersLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=PopulatableLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ReadableLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ObservableLiquity.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SendableEthersLiquity = void 0;\nconst sendTransaction = (tx) => tx.send();\n/**\n * Ethers-based implementation of {@link @liquity/lib-base#SendableLiquity}.\n *\n * @public\n */\nclass SendableEthersLiquity {\n    constructor(populatable) {\n        this._populate = populatable;\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.openTrove} */\n    openTrove(params, maxBorrowingRate, overrides) {\n        return this._populate.openTrove(params, maxBorrowingRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.closeTrove} */\n    closeTrove(overrides) {\n        return this._populate.closeTrove(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.adjustTrove} */\n    adjustTrove(params, maxBorrowingRate, overrides) {\n        return this._populate.adjustTrove(params, maxBorrowingRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.depositCollateral} */\n    depositCollateral(amount, overrides) {\n        return this._populate.depositCollateral(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawCollateral} */\n    withdrawCollateral(amount, overrides) {\n        return this._populate.withdrawCollateral(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.borrowLUSD} */\n    borrowLUSD(amount, maxBorrowingRate, overrides) {\n        return this._populate.borrowLUSD(amount, maxBorrowingRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.repayLUSD} */\n    repayLUSD(amount, overrides) {\n        return this._populate.repayLUSD(amount, overrides).then(sendTransaction);\n    }\n    /** @internal */\n    setPrice(price, overrides) {\n        return this._populate.setPrice(price, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.liquidate} */\n    liquidate(address, overrides) {\n        return this._populate.liquidate(address, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.liquidateUpTo} */\n    liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides) {\n        return this._populate\n            .liquidateUpTo(maximumNumberOfTrovesToLiquidate, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.depositLUSDInStabilityPool} */\n    depositLUSDInStabilityPool(amount, frontendTag, overrides) {\n        return this._populate\n            .depositLUSDInStabilityPool(amount, frontendTag, overrides)\n            .then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawLUSDFromStabilityPool} */\n    withdrawLUSDFromStabilityPool(amount, overrides) {\n        return this._populate.withdrawLUSDFromStabilityPool(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawGainsFromStabilityPool} */\n    withdrawGainsFromStabilityPool(overrides) {\n        return this._populate.withdrawGainsFromStabilityPool(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.transferCollateralGainToTrove} */\n    transferCollateralGainToTrove(overrides) {\n        return this._populate.transferCollateralGainToTrove(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.sendLUSD} */\n    sendLUSD(toAddress, amount, overrides) {\n        return this._populate.sendLUSD(toAddress, amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.sendLQTY} */\n    sendLQTY(toAddress, amount, overrides) {\n        return this._populate.sendLQTY(toAddress, amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.redeemLUSD} */\n    redeemLUSD(amount, maxRedemptionRate, overrides) {\n        return this._populate.redeemLUSD(amount, maxRedemptionRate, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.claimCollateralSurplus} */\n    claimCollateralSurplus(overrides) {\n        return this._populate.claimCollateralSurplus(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.stakeLQTY} */\n    stakeLQTY(amount, overrides) {\n        return this._populate.stakeLQTY(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.unstakeLQTY} */\n    unstakeLQTY(amount, overrides) {\n        return this._populate.unstakeLQTY(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawGainsFromStaking} */\n    withdrawGainsFromStaking(overrides) {\n        return this._populate.withdrawGainsFromStaking(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.registerFrontend} */\n    registerFrontend(kickbackRate, overrides) {\n        return this._populate.registerFrontend(kickbackRate, overrides).then(sendTransaction);\n    }\n    /** @internal */\n    _mintUniToken(amount, address, overrides) {\n        return this._populate._mintUniToken(amount, address, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.approveUniTokens} */\n    approveUniTokens(allowance, overrides) {\n        return this._populate.approveUniTokens(allowance, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.stakeUniTokens} */\n    stakeUniTokens(amount, overrides) {\n        return this._populate.stakeUniTokens(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.unstakeUniTokens} */\n    unstakeUniTokens(amount, overrides) {\n        return this._populate.unstakeUniTokens(amount, overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.withdrawLQTYRewardFromLiquidityMining} */\n    withdrawLQTYRewardFromLiquidityMining(overrides) {\n        return this._populate.withdrawLQTYRewardFromLiquidityMining(overrides).then(sendTransaction);\n    }\n    /** {@inheritDoc @liquity/lib-base#SendableLiquity.exitLiquidityMining} */\n    exitLiquidityMining(overrides) {\n        return this._populate.exitLiquidityMining(overrides).then(sendTransaction);\n    }\n}\nexports.SendableEthersLiquity = SendableEthersLiquity;\n//# sourceMappingURL=SendableEthersLiquity.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./src/constants\"), exports);\n__exportStar(require(\"./src/Decimal\"), exports);\n__exportStar(require(\"./src/Trove\"), exports);\n__exportStar(require(\"./src/StabilityDeposit\"), exports);\n__exportStar(require(\"./src/LQTYStake\"), exports);\n__exportStar(require(\"./src/Fees\"), exports);\n__exportStar(require(\"./src/ReadableLiquity\"), exports);\n__exportStar(require(\"./src/ObservableLiquity\"), exports);\n__exportStar(require(\"./src/TransactableLiquity\"), exports);\n__exportStar(require(\"./src/SendableLiquity\"), exports);\n__exportStar(require(\"./src/PopulatableLiquity\"), exports);\n__exportStar(require(\"./src/LiquityStore\"), exports);\n__exportStar(require(\"./src/_CachedReadableLiquity\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StabilityDeposit = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * A Stability Deposit and its accrued gains.\n *\n * @public\n */\nclass StabilityDeposit {\n    /** @internal */\n    constructor(initialLUSD, currentLUSD, collateralGain, lqtyReward, frontendTag) {\n        this.initialLUSD = initialLUSD;\n        this.currentLUSD = currentLUSD;\n        this.collateralGain = collateralGain;\n        this.lqtyReward = lqtyReward;\n        this.frontendTag = frontendTag;\n        if (this.currentLUSD.gt(this.initialLUSD)) {\n            throw new Error(\"currentLUSD can't be greater than initialLUSD\");\n        }\n    }\n    get isEmpty() {\n        return (this.initialLUSD.isZero &&\n            this.currentLUSD.isZero &&\n            this.collateralGain.isZero &&\n            this.lqtyReward.isZero);\n    }\n    /** @internal */\n    toString() {\n        return (`{ initialLUSD: ${this.initialLUSD}` +\n            `, currentLUSD: ${this.currentLUSD}` +\n            `, collateralGain: ${this.collateralGain}` +\n            `, lqtyReward: ${this.lqtyReward}` +\n            `, frontendTag: \"${this.frontendTag}\" }`);\n    }\n    /**\n     * Compare to another instance of `StabilityDeposit`.\n     */\n    equals(that) {\n        return (this.initialLUSD.eq(that.initialLUSD) &&\n            this.currentLUSD.eq(that.currentLUSD) &&\n            this.collateralGain.eq(that.collateralGain) &&\n            this.lqtyReward.eq(that.lqtyReward) &&\n            this.frontendTag === that.frontendTag);\n    }\n    /**\n     * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n     *\n     * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n     */\n    whatChanged(thatLUSD) {\n        thatLUSD = Decimal_1.Decimal.from(thatLUSD);\n        if (thatLUSD.lt(this.currentLUSD)) {\n            return { withdrawLUSD: this.currentLUSD.sub(thatLUSD), withdrawAllLUSD: thatLUSD.isZero };\n        }\n        if (thatLUSD.gt(this.currentLUSD)) {\n            return { depositLUSD: thatLUSD.sub(this.currentLUSD) };\n        }\n    }\n    /**\n     * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n     *\n     * @returns The new deposited LUSD amount.\n     */\n    apply(change) {\n        if (!change) {\n            return this.currentLUSD;\n        }\n        if (change.withdrawLUSD !== undefined) {\n            return change.withdrawAllLUSD || this.currentLUSD.lte(change.withdrawLUSD)\n                ? Decimal_1.Decimal.ZERO\n                : this.currentLUSD.sub(change.withdrawLUSD);\n        }\n        else {\n            return this.currentLUSD.add(change.depositLUSD);\n        }\n    }\n}\nexports.StabilityDeposit = StabilityDeposit;\n//# sourceMappingURL=StabilityDeposit.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnsupportedNetworkError = exports._connectByChainId = void 0;\nvar EthersLiquityConnection_1 = require(\"./src/EthersLiquityConnection\");\nObject.defineProperty(exports, \"_connectByChainId\", { enumerable: true, get: function () { return EthersLiquityConnection_1._connectByChainId; } });\nObject.defineProperty(exports, \"UnsupportedNetworkError\", { enumerable: true, get: function () { return EthersLiquityConnection_1.UnsupportedNetworkError; } });\n__exportStar(require(\"./src/types\"), exports);\n__exportStar(require(\"./src/ReadableEthersLiquity\"), exports);\n__exportStar(require(\"./src/ObservableEthersLiquity\"), exports);\n__exportStar(require(\"./src/BlockPolledLiquityStore\"), exports);\n__exportStar(require(\"./src/PopulatableEthersLiquity\"), exports);\n__exportStar(require(\"./src/SendableEthersLiquity\"), exports);\n__exportStar(require(\"./src/EthersLiquity\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fees = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst Decimal_1 = require(\"./Decimal\");\nconst constants_1 = require(\"./constants\");\n/**\n * Calculator for fees.\n *\n * @remarks\n * Returned by the {@link ReadableLiquity.getFees | getFees()} function.\n *\n * @public\n */\nclass Fees {\n    /** @internal */\n    constructor(baseRateWithoutDecay, minuteDecayFactor, beta, lastFeeOperation, timeOfLatestBlock, recoveryMode) {\n        this._baseRateWithoutDecay = Decimal_1.Decimal.from(baseRateWithoutDecay);\n        this._minuteDecayFactor = Decimal_1.Decimal.from(minuteDecayFactor);\n        this._beta = Decimal_1.Decimal.from(beta);\n        this._lastFeeOperation = lastFeeOperation;\n        this._timeOfLatestBlock = timeOfLatestBlock;\n        this._recoveryMode = recoveryMode;\n        assert_1.default(this._minuteDecayFactor.lt(1));\n    }\n    /** @internal */\n    _setRecoveryMode(recoveryMode) {\n        return new Fees(this._baseRateWithoutDecay, this._minuteDecayFactor, this._beta, this._lastFeeOperation, this._timeOfLatestBlock, recoveryMode);\n    }\n    /**\n     * Compare to another instance of `Fees`.\n     */\n    equals(that) {\n        return (this._baseRateWithoutDecay.eq(that._baseRateWithoutDecay) &&\n            this._minuteDecayFactor.eq(that._minuteDecayFactor) &&\n            this._beta.eq(that._beta) &&\n            this._lastFeeOperation.getTime() === that._lastFeeOperation.getTime() &&\n            this._timeOfLatestBlock.getTime() === that._timeOfLatestBlock.getTime() &&\n            this._recoveryMode === that._recoveryMode);\n    }\n    /** @internal */\n    toString() {\n        return (`{ baseRateWithoutDecay: ${this._baseRateWithoutDecay}` +\n            `, lastFeeOperation: \"${this._lastFeeOperation.toLocaleString()}\"` +\n            `, recoveryMode: ${this._recoveryMode} } `);\n    }\n    /** @internal */\n    baseRate(when = this._timeOfLatestBlock) {\n        const millisecondsSinceLastFeeOperation = Math.max(when.getTime() - this._lastFeeOperation.getTime(), 0 // Clamp negative elapsed time to 0, in case the client's time is in the past.\n        // We will calculate slightly higher than actual fees, which is fine.\n        );\n        const minutesSinceLastFeeOperation = Math.floor(millisecondsSinceLastFeeOperation / 60000);\n        return this._minuteDecayFactor.pow(minutesSinceLastFeeOperation).mul(this._baseRateWithoutDecay);\n    }\n    /**\n     * Calculate the current borrowing rate.\n     *\n     * @param when - Optional timestamp that can be used to calculate what the borrowing rate would\n     *               decay to at a point of time in the future.\n     *\n     * @remarks\n     * By default, the fee is calculated at the time of the latest block. This can be overridden using\n     * the `when` parameter.\n     *\n     * To calculate the borrowing fee in LUSD, multiply the borrowed LUSD amount by the borrowing rate.\n     *\n     * @example\n     * ```typescript\n     * const fees = await liquity.getFees();\n     *\n     * const borrowedLUSDAmount = 100;\n     * const borrowingRate = fees.borrowingRate();\n     * const borrowingFeeLUSD = borrowingRate.mul(borrowedLUSDAmount);\n     * ```\n     */\n    borrowingRate(when) {\n        return this._recoveryMode\n            ? Decimal_1.Decimal.ZERO\n            : Decimal_1.Decimal.min(constants_1.MINIMUM_BORROWING_RATE.add(this.baseRate(when)), constants_1.MAXIMUM_BORROWING_RATE);\n    }\n    /**\n     * Calculate the current redemption rate.\n     *\n     * @param redeemedFractionOfSupply - The amount of LUSD being redeemed divided by the total supply.\n     * @param when - Optional timestamp that can be used to calculate what the redemption rate would\n     *               decay to at a point of time in the future.\n     *\n     * @remarks\n     * By default, the fee is calculated at the time of the latest block. This can be overridden using\n     * the `when` parameter.\n  \n     * Unlike the borrowing rate, the redemption rate depends on the amount being redeemed. To be more\n     * precise, it depends on the fraction of the redeemed amount compared to the total LUSD supply,\n     * which must be passed as a parameter.\n     *\n     * To calculate the redemption fee in LUSD, multiply the redeemed LUSD amount with the redemption\n     * rate.\n     *\n     * @example\n     * ```typescript\n     * const fees = await liquity.getFees();\n     * const total = await liquity.getTotal();\n     *\n     * const redeemedLUSDAmount = Decimal.from(100);\n     * const redeemedFractionOfSupply = redeemedLUSDAmount.div(total.debt);\n     * const redemptionRate = fees.redemptionRate(redeemedFractionOfSupply);\n     * const redemptionFeeLUSD = redemptionRate.mul(redeemedLUSDAmount);\n     * ```\n     */\n    redemptionRate(redeemedFractionOfSupply = Decimal_1.Decimal.ZERO, when) {\n        redeemedFractionOfSupply = Decimal_1.Decimal.from(redeemedFractionOfSupply);\n        let baseRate = this.baseRate(when);\n        if (redeemedFractionOfSupply.nonZero) {\n            baseRate = redeemedFractionOfSupply.div(this._beta).add(baseRate);\n        }\n        return Decimal_1.Decimal.min(constants_1.MINIMUM_REDEMPTION_RATE.add(baseRate), Decimal_1.Decimal.ONE);\n    }\n}\nexports.Fees = Fees;\n//# sourceMappingURL=Fees.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = exports.Difference = exports.Decimal = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst getDigits = (numDigits) => TEN.pow(numDigits);\nconst MAX_UINT_256 = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\nconst PRECISION = 18;\nconst ONE = bignumber_1.BigNumber.from(1);\nconst TEN = bignumber_1.BigNumber.from(10);\nconst DIGITS = getDigits(PRECISION);\nconst stringRepresentationFormat = /^[0-9]*(\\.[0-9]*)?(e[-+]?[0-9]+)?$/;\nconst trailingZeros = /0*$/;\nconst magnitudes = [\"\", \"K\", \"M\", \"B\", \"T\"];\nconst roundedMul = (x, y) => x.mul(y).add(Decimal.HALF.hex).div(DIGITS);\n/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY\n * amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\nclass Decimal {\n    constructor(bigNumber) {\n        if (bigNumber.isNegative()) {\n            throw new Error(\"negatives not supported by Decimal\");\n        }\n        this._bigNumber = bigNumber;\n    }\n    /** @internal */\n    get hex() {\n        return this._bigNumber.toHexString();\n    }\n    /** @internal */\n    get bigNumber() {\n        return this._bigNumber.toString();\n    }\n    static fromBigNumberString(bigNumberString) {\n        return new Decimal(bignumber_1.BigNumber.from(bigNumberString));\n    }\n    static _fromString(representation) {\n        if (!representation || !representation.match(stringRepresentationFormat)) {\n            throw new Error(`bad decimal format: \"${representation}\"`);\n        }\n        if (representation.includes(\"e\")) {\n            // eslint-disable-next-line prefer-const\n            let [coefficient, exponent] = representation.split(\"e\");\n            if (exponent.startsWith(\"-\")) {\n                return new Decimal(Decimal._fromString(coefficient)._bigNumber.div(TEN.pow(bignumber_1.BigNumber.from(exponent.substr(1)))));\n            }\n            if (exponent.startsWith(\"+\")) {\n                exponent = exponent.substr(1);\n            }\n            return new Decimal(Decimal._fromString(coefficient)._bigNumber.mul(TEN.pow(bignumber_1.BigNumber.from(exponent))));\n        }\n        if (!representation.includes(\".\")) {\n            return new Decimal(bignumber_1.BigNumber.from(representation).mul(DIGITS));\n        }\n        // eslint-disable-next-line prefer-const\n        let [characteristic, mantissa] = representation.split(\".\");\n        if (mantissa.length < PRECISION) {\n            mantissa += \"0\".repeat(PRECISION - mantissa.length);\n        }\n        else {\n            mantissa = mantissa.substr(0, PRECISION);\n        }\n        return new Decimal(bignumber_1.BigNumber.from(characteristic || 0)\n            .mul(DIGITS)\n            .add(mantissa));\n    }\n    static from(decimalish) {\n        switch (typeof decimalish) {\n            case \"object\":\n                if (decimalish instanceof Decimal) {\n                    return decimalish;\n                }\n                else {\n                    throw new Error(\"invalid Decimalish value\");\n                }\n            case \"string\":\n                return Decimal._fromString(decimalish);\n            case \"number\":\n                return Decimal._fromString(decimalish.toString());\n            default:\n                throw new Error(\"invalid Decimalish value\");\n        }\n    }\n    _toStringWithAutomaticPrecision() {\n        const characteristic = this._bigNumber.div(DIGITS);\n        const mantissa = this._bigNumber.mod(DIGITS);\n        if (mantissa.isZero()) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.replace(trailingZeros, \"\");\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    _roundUp(precision) {\n        const halfDigit = getDigits(PRECISION - 1 - precision).mul(5);\n        return this._bigNumber.add(halfDigit);\n    }\n    _toStringWithPrecision(precision) {\n        if (precision < 0) {\n            throw new Error(\"precision must not be negative\");\n        }\n        const value = precision < PRECISION ? this._roundUp(precision) : this._bigNumber;\n        const characteristic = value.div(DIGITS);\n        const mantissa = value.mod(DIGITS);\n        if (precision === 0) {\n            return characteristic.toString();\n        }\n        else {\n            const paddedMantissa = mantissa.toString().padStart(PRECISION, \"0\");\n            const trimmedMantissa = paddedMantissa.substr(0, precision);\n            return characteristic.toString() + \".\" + trimmedMantissa;\n        }\n    }\n    toString(precision) {\n        if (this.infinite) {\n            return \"∞\";\n        }\n        else if (precision !== undefined) {\n            return this._toStringWithPrecision(precision);\n        }\n        else {\n            return this._toStringWithAutomaticPrecision();\n        }\n    }\n    prettify(precision = 2) {\n        const [characteristic, mantissa] = this.toString(precision).split(\".\");\n        const prettyCharacteristic = characteristic.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n        return mantissa !== undefined ? prettyCharacteristic + \".\" + mantissa : prettyCharacteristic;\n    }\n    shorten() {\n        const characteristicLength = this.toString(0).length;\n        const magnitude = Math.min(Math.floor((characteristicLength - 1) / 3), magnitudes.length - 1);\n        const precision = Math.max(3 * (magnitude + 1) - characteristicLength, 0);\n        const normalized = this.div(new Decimal(getDigits(PRECISION + 3 * magnitude)));\n        return normalized.prettify(precision) + magnitudes[magnitude];\n    }\n    add(addend) {\n        return new Decimal(this._bigNumber.add(Decimal.from(addend)._bigNumber));\n    }\n    sub(subtrahend) {\n        return new Decimal(this._bigNumber.sub(Decimal.from(subtrahend)._bigNumber));\n    }\n    mul(multiplier) {\n        return new Decimal(this._bigNumber.mul(Decimal.from(multiplier)._bigNumber).div(DIGITS));\n    }\n    div(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).div(divider._bigNumber));\n    }\n    /** @internal */\n    _divCeil(divider) {\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(DIGITS).add(divider._bigNumber.sub(ONE)).div(divider._bigNumber));\n    }\n    mulDiv(multiplier, divider) {\n        multiplier = Decimal.from(multiplier);\n        divider = Decimal.from(divider);\n        if (divider.isZero) {\n            return Decimal.INFINITY;\n        }\n        return new Decimal(this._bigNumber.mul(multiplier._bigNumber).div(divider._bigNumber));\n    }\n    pow(exponent) {\n        assert_1.default(Number.isInteger(exponent));\n        assert_1.default(0 <= exponent && exponent <= 0xffffffff); // Ensure we're safe to use bitwise ops\n        if (exponent === 0) {\n            return Decimal.ONE;\n        }\n        if (exponent === 1) {\n            return this;\n        }\n        let x = this._bigNumber;\n        let y = DIGITS;\n        for (; exponent > 1; exponent >>>= 1) {\n            if (exponent & 1) {\n                y = roundedMul(x, y);\n            }\n            x = roundedMul(x, x);\n        }\n        return new Decimal(roundedMul(x, y));\n    }\n    get isZero() {\n        return this._bigNumber.isZero();\n    }\n    get zero() {\n        if (this.isZero) {\n            return this;\n        }\n    }\n    get nonZero() {\n        if (!this.isZero) {\n            return this;\n        }\n    }\n    get infinite() {\n        if (this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    get finite() {\n        if (!this.eq(Decimal.INFINITY)) {\n            return this;\n        }\n    }\n    /** @internal */\n    get absoluteValue() {\n        return this;\n    }\n    lt(that) {\n        return this._bigNumber.lt(Decimal.from(that)._bigNumber);\n    }\n    eq(that) {\n        return this._bigNumber.eq(Decimal.from(that)._bigNumber);\n    }\n    gt(that) {\n        return this._bigNumber.gt(Decimal.from(that)._bigNumber);\n    }\n    gte(that) {\n        return this._bigNumber.gte(Decimal.from(that)._bigNumber);\n    }\n    lte(that) {\n        return this._bigNumber.lte(Decimal.from(that)._bigNumber);\n    }\n    static min(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.lt(b) ? a : b;\n    }\n    static max(a, b) {\n        a = Decimal.from(a);\n        b = Decimal.from(b);\n        return a.gt(b) ? a : b;\n    }\n}\nexports.Decimal = Decimal;\nDecimal.INFINITY = Decimal.fromBigNumberString(MAX_UINT_256);\nDecimal.ZERO = Decimal.from(0);\nDecimal.HALF = Decimal.from(0.5);\nDecimal.ONE = Decimal.from(1);\n/** @alpha */\nclass Difference {\n    constructor(number) {\n        this._number = number;\n    }\n    static between(d1, d2) {\n        if (d1 === undefined || d2 === undefined) {\n            return new Difference(undefined);\n        }\n        d1 = Decimal.from(d1);\n        d2 = Decimal.from(d2);\n        if (d1.infinite && d2.infinite) {\n            return new Difference(undefined);\n        }\n        else if (d1.infinite) {\n            return new Difference({ sign: \"+\", absoluteValue: d1 });\n        }\n        else if (d2.infinite) {\n            return new Difference({ sign: \"-\", absoluteValue: d2 });\n        }\n        else if (d1.gt(d2)) {\n            return new Difference({ sign: \"+\", absoluteValue: Decimal.from(d1).sub(d2) });\n        }\n        else if (d2.gt(d1)) {\n            return new Difference({ sign: \"-\", absoluteValue: Decimal.from(d2).sub(d1) });\n        }\n        else {\n            return new Difference({ sign: \"\", absoluteValue: Decimal.ZERO });\n        }\n    }\n    toString(precision) {\n        if (!this._number) {\n            return \"N/A\";\n        }\n        return this._number.sign + this._number.absoluteValue.toString(precision);\n    }\n    prettify(precision) {\n        if (!this._number) {\n            return this.toString();\n        }\n        return this._number.sign + this._number.absoluteValue.prettify(precision);\n    }\n    mul(multiplier) {\n        return new Difference(this._number && {\n            sign: this._number.sign,\n            absoluteValue: this._number.absoluteValue.mul(multiplier)\n        });\n    }\n    get nonZero() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.nonZero) && this;\n    }\n    get positive() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"+\" ? this : undefined;\n    }\n    get negative() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.sign) === \"-\" ? this : undefined;\n    }\n    get absoluteValue() {\n        var _a;\n        return (_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue;\n    }\n    get infinite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.infinite) && this;\n    }\n    get finite() {\n        var _a;\n        return ((_a = this._number) === null || _a === void 0 ? void 0 : _a.absoluteValue.finite) && this;\n    }\n}\nexports.Difference = Difference;\n/** @alpha */\nclass Percent {\n    constructor(ratio) {\n        this._percent = ratio.infinite || (ratio.mul && ratio.mul(100)) || ratio;\n    }\n    nonZeroish(precision) {\n        var _a;\n        const zeroish = `0.${\"0\".repeat(precision)}5`;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(zeroish)) {\n            return this;\n        }\n    }\n    toString(precision) {\n        return (this._percent.toString(precision) +\n            (this._percent.absoluteValue && !this._percent.infinite ? \"%\" : \"\"));\n    }\n    prettify() {\n        var _a, _b;\n        if ((_a = this._percent.absoluteValue) === null || _a === void 0 ? void 0 : _a.gte(\"1000\")) {\n            return this.toString(0);\n        }\n        else if ((_b = this._percent.absoluteValue) === null || _b === void 0 ? void 0 : _b.gte(\"10\")) {\n            return this.toString(1);\n        }\n        else {\n            return this.toString(2);\n        }\n    }\n}\nexports.Percent = Percent;\n//# sourceMappingURL=Decimal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFailedError = void 0;\n/**\n * Thrown by {@link TransactableLiquity} functions in case of transaction failure.\n *\n * @public\n */\nclass TransactionFailedError extends Error {\n    /** @internal */\n    constructor(name, message, failedReceipt) {\n        super(message);\n        this.name = name;\n        this.failedReceipt = failedReceipt;\n    }\n}\nexports.TransactionFailedError = TransactionFailedError;\n//# sourceMappingURL=TransactableLiquity.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LiquityStore = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst strictEquals = (a, b) => a === b;\nconst eq = (a, b) => a.eq(b);\nconst equals = (a, b) => a.equals(b);\nconst frontendStatusEquals = (a, b) => a.status === \"unregistered\"\n    ? b.status === \"unregistered\"\n    : b.status === \"registered\" && a.kickbackRate.eq(b.kickbackRate);\nconst showFrontendStatus = (x) => x.status === \"unregistered\"\n    ? '{ status: \"unregistered\" }'\n    : `{ status: \"registered\", kickbackRate: ${x.kickbackRate} }`;\nconst wrap = (f) => (...args) => f(...args);\nconst difference = (a, b) => Object.fromEntries(Object.entries(a).filter(([key, value]) => value !== b[key]));\n/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the\n * subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\nclass LiquityStore {\n    constructor() {\n        /** Turn console logging on/off. */\n        this.logging = false;\n        /** @internal */\n        this._loaded = false;\n        this._listeners = new Set();\n    }\n    /**\n     * The current store state.\n     *\n     * @remarks\n     * Should not be accessed before the store is loaded. Assign a function to\n     * {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n     *\n     * See {@link LiquityStoreState} for the list of properties returned.\n     */\n    get state() {\n        return Object.assign({}, this._baseState, this._derivedState, this._extraState);\n    }\n    /**\n     * Start monitoring the blockchain for Liquity state changes.\n     *\n     * @remarks\n     * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched\n     * for the first time.\n     *\n     * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n     *\n     * @returns Function to stop the monitoring.\n     */\n    start() {\n        const doStop = this._doStart();\n        return () => {\n            doStop();\n            this._cancelUpdateIfScheduled();\n        };\n    }\n    _cancelUpdateIfScheduled() {\n        if (this._updateTimeoutId !== undefined) {\n            clearTimeout(this._updateTimeoutId);\n        }\n    }\n    _scheduleUpdate() {\n        this._cancelUpdateIfScheduled();\n        this._updateTimeoutId = setTimeout(() => {\n            this._updateTimeoutId = undefined;\n            this._update();\n        }, 30000);\n    }\n    _logUpdate(name, next, show) {\n        if (this.logging) {\n            console.log(`${name} updated to ${show ? show(next) : next}`);\n        }\n        return next;\n    }\n    _updateIfChanged(equals, name, prev, next, show) {\n        return next !== undefined && !equals(prev, next) ? this._logUpdate(name, next, show) : prev;\n    }\n    _silentlyUpdateIfChanged(equals, prev, next) {\n        return next !== undefined && !equals(prev, next) ? next : prev;\n    }\n    _updateFees(name, prev, next) {\n        if (next && !next.equals(prev)) {\n            // Filter out fee update spam that happens on every new block by only logging when string\n            // representation changes.\n            if (`${next}` !== `${prev}`) {\n                this._logUpdate(name, next);\n            }\n            return next;\n        }\n        else {\n            return prev;\n        }\n    }\n    _reduce(baseState, baseStateUpdate) {\n        return {\n            frontend: this._updateIfChanged(frontendStatusEquals, \"frontend\", baseState.frontend, baseStateUpdate.frontend, showFrontendStatus),\n            ownFrontend: this._updateIfChanged(frontendStatusEquals, \"ownFrontend\", baseState.ownFrontend, baseStateUpdate.ownFrontend, showFrontendStatus),\n            numberOfTroves: this._updateIfChanged(strictEquals, \"numberOfTroves\", baseState.numberOfTroves, baseStateUpdate.numberOfTroves),\n            accountBalance: this._updateIfChanged(eq, \"accountBalance\", baseState.accountBalance, baseStateUpdate.accountBalance),\n            lusdBalance: this._updateIfChanged(eq, \"lusdBalance\", baseState.lusdBalance, baseStateUpdate.lusdBalance),\n            lqtyBalance: this._updateIfChanged(eq, \"lqtyBalance\", baseState.lqtyBalance, baseStateUpdate.lqtyBalance),\n            uniTokenBalance: this._updateIfChanged(eq, \"uniTokenBalance\", baseState.uniTokenBalance, baseStateUpdate.uniTokenBalance),\n            uniTokenAllowance: this._updateIfChanged(eq, \"uniTokenAllowance\", baseState.uniTokenAllowance, baseStateUpdate.uniTokenAllowance),\n            remainingLiquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingLiquidityMiningLQTYReward, baseStateUpdate.remainingLiquidityMiningLQTYReward),\n            liquidityMiningStake: this._updateIfChanged(eq, \"liquidityMiningStake\", baseState.liquidityMiningStake, baseStateUpdate.liquidityMiningStake),\n            totalStakedUniTokens: this._updateIfChanged(eq, \"totalStakedUniTokens\", baseState.totalStakedUniTokens, baseStateUpdate.totalStakedUniTokens),\n            liquidityMiningLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.liquidityMiningLQTYReward, baseStateUpdate.liquidityMiningLQTYReward),\n            collateralSurplusBalance: this._updateIfChanged(eq, \"collateralSurplusBalance\", baseState.collateralSurplusBalance, baseStateUpdate.collateralSurplusBalance),\n            price: this._updateIfChanged(eq, \"price\", baseState.price, baseStateUpdate.price),\n            lusdInStabilityPool: this._updateIfChanged(eq, \"lusdInStabilityPool\", baseState.lusdInStabilityPool, baseStateUpdate.lusdInStabilityPool),\n            total: this._updateIfChanged(equals, \"total\", baseState.total, baseStateUpdate.total),\n            totalRedistributed: this._updateIfChanged(equals, \"totalRedistributed\", baseState.totalRedistributed, baseStateUpdate.totalRedistributed),\n            troveBeforeRedistribution: this._updateIfChanged(equals, \"troveBeforeRedistribution\", baseState.troveBeforeRedistribution, baseStateUpdate.troveBeforeRedistribution),\n            stabilityDeposit: this._updateIfChanged(equals, \"stabilityDeposit\", baseState.stabilityDeposit, baseStateUpdate.stabilityDeposit),\n            remainingStabilityPoolLQTYReward: this._silentlyUpdateIfChanged(eq, baseState.remainingStabilityPoolLQTYReward, baseStateUpdate.remainingStabilityPoolLQTYReward),\n            _feesInNormalMode: this._silentlyUpdateIfChanged(equals, baseState._feesInNormalMode, baseStateUpdate._feesInNormalMode),\n            lqtyStake: this._updateIfChanged(equals, \"lqtyStake\", baseState.lqtyStake, baseStateUpdate.lqtyStake),\n            totalStakedLQTY: this._updateIfChanged(eq, \"totalStakedLQTY\", baseState.totalStakedLQTY, baseStateUpdate.totalStakedLQTY),\n            _riskiestTroveBeforeRedistribution: this._silentlyUpdateIfChanged(equals, baseState._riskiestTroveBeforeRedistribution, baseStateUpdate._riskiestTroveBeforeRedistribution)\n        };\n    }\n    _derive({ troveBeforeRedistribution, totalRedistributed, _feesInNormalMode, total, price, _riskiestTroveBeforeRedistribution }) {\n        const fees = _feesInNormalMode._setRecoveryMode(total.collateralRatioIsBelowCritical(price));\n        return {\n            trove: troveBeforeRedistribution.applyRedistribution(totalRedistributed),\n            fees,\n            borrowingRate: fees.borrowingRate(),\n            redemptionRate: fees.redemptionRate(),\n            haveUndercollateralizedTroves: _riskiestTroveBeforeRedistribution\n                .applyRedistribution(totalRedistributed)\n                .collateralRatioIsBelowMinimum(price)\n        };\n    }\n    _reduceDerived(derivedState, derivedStateUpdate) {\n        return {\n            fees: this._updateFees(\"fees\", derivedState.fees, derivedStateUpdate.fees),\n            trove: this._updateIfChanged(equals, \"trove\", derivedState.trove, derivedStateUpdate.trove),\n            borrowingRate: this._silentlyUpdateIfChanged(eq, derivedState.borrowingRate, derivedStateUpdate.borrowingRate),\n            redemptionRate: this._silentlyUpdateIfChanged(eq, derivedState.redemptionRate, derivedStateUpdate.redemptionRate),\n            haveUndercollateralizedTroves: this._updateIfChanged(strictEquals, \"haveUndercollateralizedTroves\", derivedState.haveUndercollateralizedTroves, derivedStateUpdate.haveUndercollateralizedTroves)\n        };\n    }\n    _notify(params) {\n        // Iterate on a copy of `_listeners`, to avoid notifying any new listeners subscribed by\n        // existing listeners, as that could result in infinite loops.\n        //\n        // Before calling a listener from our copy of `_listeners`, check if it has been removed from\n        // the original set. This way we avoid calling listeners that have already been unsubscribed\n        // by an earlier listener callback.\n        [...this._listeners].forEach(listener => {\n            if (this._listeners.has(listener)) {\n                listener(params);\n            }\n        });\n    }\n    /**\n     * Register a state change listener.\n     *\n     * @param listener - Function that will be called whenever state changes.\n     * @returns Function to unregister this listener.\n     */\n    subscribe(listener) {\n        const uniqueListener = wrap(listener);\n        this._listeners.add(uniqueListener);\n        return () => {\n            this._listeners.delete(uniqueListener);\n        };\n    }\n    /** @internal */\n    _load(baseState, extraState) {\n        assert_1.default(!this._loaded);\n        this._baseState = baseState;\n        this._derivedState = this._derive(baseState);\n        this._extraState = extraState;\n        this._loaded = true;\n        this._scheduleUpdate();\n        if (this.onLoaded) {\n            this.onLoaded();\n        }\n    }\n    /** @internal */\n    _update(baseStateUpdate, extraStateUpdate) {\n        assert_1.default(this._baseState && this._derivedState);\n        const oldState = this.state;\n        if (baseStateUpdate) {\n            this._baseState = this._reduce(this._baseState, baseStateUpdate);\n        }\n        // Always running this lets us derive state based on passage of time, like baseRate decay\n        this._derivedState = this._reduceDerived(this._derivedState, this._derive(this._baseState));\n        if (extraStateUpdate) {\n            assert_1.default(this._extraState);\n            this._extraState = this._reduceExtra(this._extraState, extraStateUpdate);\n        }\n        this._scheduleUpdate();\n        this._notify({\n            newState: this.state,\n            oldState,\n            stateChange: difference(this.state, oldState)\n        });\n    }\n}\nexports.LiquityStore = LiquityStore;\n//# sourceMappingURL=LiquityStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MINIMUM_REDEMPTION_RATE = exports.MAXIMUM_BORROWING_RATE = exports.MINIMUM_BORROWING_RATE = exports.LUSD_MINIMUM_DEBT = exports.LUSD_MINIMUM_NET_DEBT = exports.LUSD_LIQUIDATION_RESERVE = exports.MINIMUM_COLLATERAL_RATIO = exports.CRITICAL_COLLATERAL_RATIO = void 0;\nconst Decimal_1 = require(\"./Decimal\");\n/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\nexports.CRITICAL_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.5);\n/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\nexports.MINIMUM_COLLATERAL_RATIO = Decimal_1.Decimal.from(1.1);\n/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\nexports.LUSD_LIQUIDATION_RESERVE = Decimal_1.Decimal.from(200);\n/**\n * A Trove must always have at least this much debt on top of the\n * {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_NET_DEBT = Decimal_1.Decimal.from(1800);\n/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\nexports.LUSD_MINIMUM_DEBT = exports.LUSD_LIQUIDATION_RESERVE.add(exports.LUSD_MINIMUM_NET_DEBT);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's\n * overridden by zero.\n *\n * @public\n */\nexports.MINIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.005);\n/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\nexports.MAXIMUM_BORROWING_RATE = Decimal_1.Decimal.from(0.05);\n/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\nexports.MINIMUM_REDEMPTION_RATE = Decimal_1.Decimal.from(0.005);\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logsToString = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst interfaceLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([, contract]) => [contract.address, contract.interface]));\n};\nconst nameLookupFrom = (contractLookup) => {\n    return Object.fromEntries(Object.entries(contractLookup).map(([name, contract]) => [contract.address, name]));\n};\nconst tryToParseLog = (log, interfaceLookup) => {\n    const { address } = log;\n    if (address in interfaceLookup) {\n        try {\n            return { address, logDescription: interfaceLookup[address].parseLog(log) };\n        }\n        catch (err) {\n            console.warn(\"Failed to parse log:\");\n            console.warn(log);\n            console.warn(\"Caught:\");\n            console.warn(err);\n        }\n    }\n};\nconst parseLogs = (logs, interfaceLookup) => {\n    const parsedLogs = [];\n    const unparsedLogs = [];\n    logs.forEach(log => {\n        const parsedLog = tryToParseLog(log, interfaceLookup);\n        if (parsedLog) {\n            parsedLogs.push(parsedLog);\n        }\n        else {\n            unparsedLogs.push(log);\n        }\n    });\n    return [parsedLogs, unparsedLogs];\n};\nconst VERY_BIG = bignumber_1.BigNumber.from(10).pow(9);\nconst prettify = (arg, nameLookup) => {\n    if (bignumber_1.BigNumber.isBigNumber(arg)) {\n        if (arg.gte(VERY_BIG)) {\n            return `${lib_base_1.Decimal.fromBigNumberString(arg.toHexString())}e18`;\n        }\n        else {\n            return arg.toString();\n        }\n    }\n    else if (typeof arg === \"string\") {\n        return arg === constants_1.AddressZero\n            ? \"address(0)\"\n            : nameLookup && arg in nameLookup\n                ? nameLookup[arg]\n                : arg;\n    }\n    else {\n        return String(arg);\n    }\n};\nconst logDescriptionToString = (logDescription, nameLookup) => {\n    const prettyEntries = Object.entries(logDescription.args)\n        .filter(([key]) => !key.match(/^[0-9]/))\n        .map(([key, value]) => `${key}: ${prettify(value, nameLookup)}`);\n    return `${logDescription.name}({ ${prettyEntries.join(\", \")} })`;\n};\nconst logsToString = (receipt, contracts) => {\n    const contractLookup = contracts;\n    const interfaceLookup = interfaceLookupFrom(contractLookup);\n    const contractNameLookup = nameLookupFrom(contractLookup);\n    const nameLookup = {\n        [receipt.from]: \"user\",\n        ...contractNameLookup\n    };\n    const [parsedLogs, unparsedLogs] = parseLogs(receipt.logs, interfaceLookup);\n    if (unparsedLogs.length > 0) {\n        console.warn(\"Warning: not all logs were parsed. Unparsed logs:\");\n        console.warn(unparsedLogs);\n    }\n    if (parsedLogs.length > 0) {\n        return (`Logs of tx ${receipt.transactionHash}:\\n` +\n            parsedLogs\n                .map(({ address, logDescription }) => `  ${contractNameLookup[address]}.${logDescriptionToString(logDescription, nameLookup)}`)\n                .join(\"\\n\"));\n    }\n    else {\n        return `No logs were parsed in tx ${receipt.transactionHash}`;\n    }\n};\nexports.logsToString = logsToString;\n//# sourceMappingURL=parseLogs.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._successfulReceipt = exports._failedReceipt = exports._pendingReceipt = void 0;\n/** @internal */\nexports._pendingReceipt = { status: \"pending\" };\n/** @internal */\nconst _failedReceipt = (rawReceipt) => ({\n    status: \"failed\",\n    rawReceipt\n});\nexports._failedReceipt = _failedReceipt;\n/** @internal */\nconst _successfulReceipt = (rawReceipt, details, toString) => ({\n    status: \"succeeded\",\n    rawReceipt,\n    details,\n    ...(toString ? { toString } : {})\n});\nexports._successfulReceipt = _successfulReceipt;\n//# sourceMappingURL=SendableLiquity.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TroveWithPendingRedistribution = exports.UserTrove = exports._emptyTrove = exports.Trove = exports._normalizeTroveAdjustment = exports._normalizeTroveCreation = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst Decimal_1 = require(\"./Decimal\");\nconst constants_1 = require(\"./constants\");\nconst invalidTroveCreation = (invalidTrove, error) => ({\n    type: \"invalidCreation\",\n    invalidTrove,\n    error\n});\nconst troveCreation = (params) => ({\n    type: \"creation\",\n    params\n});\nconst troveClosure = (params) => ({\n    type: \"closure\",\n    params\n});\nconst troveAdjustment = (params, setToZero) => ({\n    type: \"adjustment\",\n    params,\n    setToZero\n});\nconst valueIsDefined = (entry) => entry[1] !== undefined;\nconst allowedTroveCreationKeys = [\n    \"depositCollateral\",\n    \"borrowLUSD\"\n];\nfunction checkAllowedTroveCreationKeys(entries) {\n    const badKeys = entries\n        .filter(([k]) => !allowedTroveCreationKeys.includes(k))\n        .map(([k]) => `'${k}'`);\n    if (badKeys.length > 0) {\n        throw new Error(`TroveCreationParams: property ${badKeys.join(\", \")} not allowed`);\n    }\n}\nconst troveCreationParamsFromEntries = (entries) => {\n    const params = Object.fromEntries(entries);\n    const missingKeys = allowedTroveCreationKeys.filter(k => !(k in params)).map(k => `'${k}'`);\n    if (missingKeys.length > 0) {\n        throw new Error(`TroveCreationParams: property ${missingKeys.join(\", \")} missing`);\n    }\n    return params;\n};\nconst decimalize = ([k, v]) => [k, Decimal_1.Decimal.from(v)];\nconst nonZero = ([, v]) => !v.isZero;\n/** @internal */\nconst _normalizeTroveCreation = (params) => {\n    const definedEntries = Object.entries(params).filter(valueIsDefined);\n    checkAllowedTroveCreationKeys(definedEntries);\n    const nonZeroEntries = definedEntries.map(decimalize);\n    return troveCreationParamsFromEntries(nonZeroEntries);\n};\nexports._normalizeTroveCreation = _normalizeTroveCreation;\nconst allowedTroveAdjustmentKeys = [\n    \"depositCollateral\",\n    \"withdrawCollateral\",\n    \"borrowLUSD\",\n    \"repayLUSD\"\n];\nfunction checkAllowedTroveAdjustmentKeys(entries) {\n    const badKeys = entries\n        .filter(([k]) => !allowedTroveAdjustmentKeys.includes(k))\n        .map(([k]) => `'${k}'`);\n    if (badKeys.length > 0) {\n        throw new Error(`TroveAdjustmentParams: property ${badKeys.join(\", \")} not allowed`);\n    }\n}\nconst collateralChangeFrom = ({ depositCollateral, withdrawCollateral }) => {\n    if (depositCollateral !== undefined && withdrawCollateral !== undefined) {\n        throw new Error(\"TroveAdjustmentParams: 'depositCollateral' and 'withdrawCollateral' \" +\n            \"can't be present at the same time\");\n    }\n    if (depositCollateral !== undefined) {\n        return { depositCollateral };\n    }\n    if (withdrawCollateral !== undefined) {\n        return { withdrawCollateral };\n    }\n};\nconst debtChangeFrom = ({ borrowLUSD, repayLUSD }) => {\n    if (borrowLUSD !== undefined && repayLUSD !== undefined) {\n        throw new Error(\"TroveAdjustmentParams: 'borrowLUSD' and 'repayLUSD' can't be present at the same time\");\n    }\n    if (borrowLUSD !== undefined) {\n        return { borrowLUSD };\n    }\n    if (repayLUSD !== undefined) {\n        return { repayLUSD };\n    }\n};\nconst troveAdjustmentParamsFromEntries = (entries) => {\n    const params = Object.fromEntries(entries);\n    const collateralChange = collateralChangeFrom(params);\n    const debtChange = debtChangeFrom(params);\n    if (collateralChange !== undefined && debtChange !== undefined) {\n        return { ...collateralChange, ...debtChange };\n    }\n    if (collateralChange !== undefined) {\n        return collateralChange;\n    }\n    if (debtChange !== undefined) {\n        return debtChange;\n    }\n    throw new Error(\"TroveAdjustmentParams: must include at least one non-zero parameter\");\n};\n/** @internal */\nconst _normalizeTroveAdjustment = (params) => {\n    const definedEntries = Object.entries(params).filter(valueIsDefined);\n    checkAllowedTroveAdjustmentKeys(definedEntries);\n    const nonZeroEntries = definedEntries.map(decimalize).filter(nonZero);\n    return troveAdjustmentParamsFromEntries(nonZeroEntries);\n};\nexports._normalizeTroveAdjustment = _normalizeTroveAdjustment;\nconst applyFee = (borrowingRate, debtIncrease) => debtIncrease.mul(Decimal_1.Decimal.ONE.add(borrowingRate));\nconst unapplyFee = (borrowingRate, debtIncrease) => debtIncrease._divCeil(Decimal_1.Decimal.ONE.add(borrowingRate));\nconst NOMINAL_COLLATERAL_RATIO_PRECISION = Decimal_1.Decimal.from(100);\n/**\n * A combination of collateral and debt.\n *\n * @public\n */\nclass Trove {\n    /** @internal */\n    constructor(collateral = Decimal_1.Decimal.ZERO, debt = Decimal_1.Decimal.ZERO) {\n        this.collateral = collateral;\n        this.debt = debt;\n    }\n    get isEmpty() {\n        return this.collateral.isZero && this.debt.isZero;\n    }\n    /**\n     * Amount of LUSD that must be repaid to close this Trove.\n     *\n     * @remarks\n     * This doesn't include the liquidation reserve, which is refunded in case of normal closure.\n     */\n    get netDebt() {\n        if (this.debt.lt(constants_1.LUSD_LIQUIDATION_RESERVE)) {\n            throw new Error(`netDebt should not be used when debt < ${constants_1.LUSD_LIQUIDATION_RESERVE}`);\n        }\n        return this.debt.sub(constants_1.LUSD_LIQUIDATION_RESERVE);\n    }\n    /** @internal */\n    get _nominalCollateralRatio() {\n        return this.collateral.mulDiv(NOMINAL_COLLATERAL_RATIO_PRECISION, this.debt);\n    }\n    /** Calculate the Trove's collateralization ratio at a given price. */\n    collateralRatio(price) {\n        return this.collateral.mulDiv(price, this.debt);\n    }\n    /**\n     * Whether the Trove is undercollateralized at a given price.\n     *\n     * @returns\n     * `true` if the Trove's collateralization ratio is less than the\n     * {@link MINIMUM_COLLATERAL_RATIO}.\n     */\n    collateralRatioIsBelowMinimum(price) {\n        return this.collateralRatio(price).lt(constants_1.MINIMUM_COLLATERAL_RATIO);\n    }\n    /**\n     * Whether the collateralization ratio is less than the {@link CRITICAL_COLLATERAL_RATIO} at a\n     * given price.\n     *\n     * @example\n     * Can be used to check whether the Liquity protocol is in recovery mode by using it on the return\n     * value of {@link ReadableLiquity.getTotal | getTotal()}. For example:\n     *\n     * ```typescript\n     * const total = await liquity.getTotal();\n     * const price = await liquity.getPrice();\n     *\n     * if (total.collateralRatioIsBelowCritical(price)) {\n     *   // Recovery mode is active\n     * }\n     * ```\n     */\n    collateralRatioIsBelowCritical(price) {\n        return this.collateralRatio(price).lt(constants_1.CRITICAL_COLLATERAL_RATIO);\n    }\n    /** Whether the Trove is sufficiently collateralized to be opened during recovery mode. */\n    isOpenableInRecoveryMode(price) {\n        return this.collateralRatio(price).gte(constants_1.CRITICAL_COLLATERAL_RATIO);\n    }\n    /** @internal */\n    toString() {\n        return `{ collateral: ${this.collateral}, debt: ${this.debt} }`;\n    }\n    equals(that) {\n        return this.collateral.eq(that.collateral) && this.debt.eq(that.debt);\n    }\n    add(that) {\n        return new Trove(this.collateral.add(that.collateral), this.debt.add(that.debt));\n    }\n    addCollateral(collateral) {\n        return new Trove(this.collateral.add(collateral), this.debt);\n    }\n    addDebt(debt) {\n        return new Trove(this.collateral, this.debt.add(debt));\n    }\n    subtract(that) {\n        const { collateral, debt } = that;\n        return new Trove(this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal_1.Decimal.ZERO, this.debt.gt(debt) ? this.debt.sub(debt) : Decimal_1.Decimal.ZERO);\n    }\n    subtractCollateral(collateral) {\n        return new Trove(this.collateral.gt(collateral) ? this.collateral.sub(collateral) : Decimal_1.Decimal.ZERO, this.debt);\n    }\n    subtractDebt(debt) {\n        return new Trove(this.collateral, this.debt.gt(debt) ? this.debt.sub(debt) : Decimal_1.Decimal.ZERO);\n    }\n    multiply(multiplier) {\n        return new Trove(this.collateral.mul(multiplier), this.debt.mul(multiplier));\n    }\n    setCollateral(collateral) {\n        return new Trove(Decimal_1.Decimal.from(collateral), this.debt);\n    }\n    setDebt(debt) {\n        return new Trove(this.collateral, Decimal_1.Decimal.from(debt));\n    }\n    _debtChange({ debt }, borrowingRate) {\n        return debt.gt(this.debt)\n            ? { borrowLUSD: unapplyFee(borrowingRate, debt.sub(this.debt)) }\n            : { repayLUSD: this.debt.sub(debt) };\n    }\n    _collateralChange({ collateral }) {\n        return collateral.gt(this.collateral)\n            ? { depositCollateral: collateral.sub(this.collateral) }\n            : { withdrawCollateral: this.collateral.sub(collateral) };\n    }\n    /**\n     * Calculate the difference between this Trove and another.\n     *\n     * @param that - The other Trove.\n     * @param borrowingRate - Borrowing rate to use when calculating a borrowed amount.\n     *\n     * @returns\n     * An object representing the change, or `undefined` if the Troves are equal.\n     */\n    whatChanged(that, borrowingRate = constants_1.MINIMUM_BORROWING_RATE) {\n        var _a;\n        if (this.collateral.eq(that.collateral) && this.debt.eq(that.debt)) {\n            return undefined;\n        }\n        if (this.isEmpty) {\n            if (that.debt.lt(constants_1.LUSD_LIQUIDATION_RESERVE)) {\n                return invalidTroveCreation(that, \"missingLiquidationReserve\");\n            }\n            return troveCreation({\n                depositCollateral: that.collateral,\n                borrowLUSD: unapplyFee(borrowingRate, that.netDebt)\n            });\n        }\n        if (that.isEmpty) {\n            return troveClosure(this.netDebt.nonZero\n                ? { withdrawCollateral: this.collateral, repayLUSD: this.netDebt }\n                : { withdrawCollateral: this.collateral });\n        }\n        return this.collateral.eq(that.collateral)\n            ? troveAdjustment(this._debtChange(that, borrowingRate), that.debt.zero && \"debt\")\n            : this.debt.eq(that.debt)\n                ? troveAdjustment(this._collateralChange(that), that.collateral.zero && \"collateral\")\n                : troveAdjustment({\n                    ...this._debtChange(that, borrowingRate),\n                    ...this._collateralChange(that)\n                }, (_a = (that.debt.zero && \"debt\")) !== null && _a !== void 0 ? _a : (that.collateral.zero && \"collateral\"));\n    }\n    /**\n     * Make a new Trove by applying a {@link TroveChange} to this Trove.\n     *\n     * @param change - The change to apply.\n     * @param borrowingRate - Borrowing rate to use when adding a borrowed amount to the Trove's debt.\n     */\n    apply(change, borrowingRate = constants_1.MINIMUM_BORROWING_RATE) {\n        if (!change) {\n            return this;\n        }\n        switch (change.type) {\n            case \"invalidCreation\":\n                if (!this.isEmpty) {\n                    throw new Error(\"Can't create onto existing Trove\");\n                }\n                return change.invalidTrove;\n            case \"creation\": {\n                if (!this.isEmpty) {\n                    throw new Error(\"Can't create onto existing Trove\");\n                }\n                const { depositCollateral, borrowLUSD } = change.params;\n                return new Trove(depositCollateral, constants_1.LUSD_LIQUIDATION_RESERVE.add(applyFee(borrowingRate, borrowLUSD)));\n            }\n            case \"closure\":\n                if (this.isEmpty) {\n                    throw new Error(\"Can't close empty Trove\");\n                }\n                return exports._emptyTrove;\n            case \"adjustment\": {\n                const { setToZero, params: { depositCollateral, withdrawCollateral, borrowLUSD, repayLUSD } } = change;\n                const collateralDecrease = withdrawCollateral !== null && withdrawCollateral !== void 0 ? withdrawCollateral : Decimal_1.Decimal.ZERO;\n                const collateralIncrease = depositCollateral !== null && depositCollateral !== void 0 ? depositCollateral : Decimal_1.Decimal.ZERO;\n                const debtDecrease = repayLUSD !== null && repayLUSD !== void 0 ? repayLUSD : Decimal_1.Decimal.ZERO;\n                const debtIncrease = borrowLUSD ? applyFee(borrowingRate, borrowLUSD) : Decimal_1.Decimal.ZERO;\n                return setToZero === \"collateral\"\n                    ? this.setCollateral(Decimal_1.Decimal.ZERO).addDebt(debtIncrease).subtractDebt(debtDecrease)\n                    : setToZero === \"debt\"\n                        ? this.setDebt(Decimal_1.Decimal.ZERO)\n                            .addCollateral(collateralIncrease)\n                            .subtractCollateral(collateralDecrease)\n                        : this.add(new Trove(collateralIncrease, debtIncrease)).subtract(new Trove(collateralDecrease, debtDecrease));\n            }\n        }\n    }\n    /**\n     * Calculate the result of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n     *\n     * @param params - Parameters of the transaction.\n     * @param borrowingRate - Borrowing rate to use when calculating the Trove's debt.\n     */\n    static create(params, borrowingRate) {\n        return exports._emptyTrove.apply(troveCreation(exports._normalizeTroveCreation(params)), borrowingRate);\n    }\n    /**\n     * Calculate the parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction\n     * that will result in the given Trove.\n     *\n     * @param that - The Trove to recreate.\n     * @param borrowingRate - Current borrowing rate.\n     */\n    static recreate(that, borrowingRate) {\n        const change = exports._emptyTrove.whatChanged(that, borrowingRate);\n        assert_1.default((change === null || change === void 0 ? void 0 : change.type) === \"creation\");\n        return change.params;\n    }\n    /**\n     * Calculate the result of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction\n     * on this Trove.\n     *\n     * @param params - Parameters of the transaction.\n     * @param borrowingRate - Borrowing rate to use when adding to the Trove's debt.\n     */\n    adjust(params, borrowingRate) {\n        return this.apply(troveAdjustment(exports._normalizeTroveAdjustment(params)), borrowingRate);\n    }\n    /**\n     * Calculate the parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()}\n     * transaction that will change this Trove into the given Trove.\n     *\n     * @param that - The desired result of the transaction.\n     * @param borrowingRate - Current borrowing rate.\n     */\n    adjustTo(that, borrowingRate) {\n        const change = this.whatChanged(that, borrowingRate);\n        assert_1.default((change === null || change === void 0 ? void 0 : change.type) === \"adjustment\");\n        return change.params;\n    }\n}\nexports.Trove = Trove;\n/** @internal */\nexports._emptyTrove = new Trove();\n/**\n * A Trove that is associated with a single owner.\n *\n * @remarks\n * The SDK uses the base {@link Trove} class as a generic container of collateral and debt, for\n * example to represent the {@link ReadableLiquity.getTotal | total collateral and debt} locked up\n * in the protocol.\n *\n * The `UserTrove` class extends `Trove` with extra information that's only available for Troves\n * that are associated with a single owner (such as the owner's address, or the Trove's status).\n *\n * @public\n */\nclass UserTrove extends Trove {\n    /** @internal */\n    constructor(ownerAddress, status, collateral, debt) {\n        super(collateral, debt);\n        this.ownerAddress = ownerAddress;\n        this.status = status;\n    }\n    equals(that) {\n        return (super.equals(that) && this.ownerAddress === that.ownerAddress && this.status === that.status);\n    }\n    /** @internal */\n    toString() {\n        return (`{ ownerAddress: \"${this.ownerAddress}\"` +\n            `, collateral: ${this.collateral}` +\n            `, debt: ${this.debt}` +\n            `, status: \"${this.status}\" }`);\n    }\n}\nexports.UserTrove = UserTrove;\n/**\n * A Trove in its state after the last direct modification.\n *\n * @remarks\n * The Trove may have received collateral and debt shares from liquidations since then.\n * Use {@link TroveWithPendingRedistribution.applyRedistribution | applyRedistribution()} to\n * calculate the Trove's most up-to-date state.\n *\n * @public\n */\nclass TroveWithPendingRedistribution extends UserTrove {\n    /** @internal */\n    constructor(ownerAddress, status, collateral, debt, stake = Decimal_1.Decimal.ZERO, snapshotOfTotalRedistributed = exports._emptyTrove) {\n        super(ownerAddress, status, collateral, debt);\n        this.stake = stake;\n        this.snapshotOfTotalRedistributed = snapshotOfTotalRedistributed;\n    }\n    applyRedistribution(totalRedistributed) {\n        const afterRedistribution = this.add(totalRedistributed.subtract(this.snapshotOfTotalRedistributed).multiply(this.stake));\n        return new UserTrove(this.ownerAddress, this.status, afterRedistribution.collateral, afterRedistribution.debt);\n    }\n    equals(that) {\n        return (super.equals(that) &&\n            this.stake.eq(that.stake) &&\n            this.snapshotOfTotalRedistributed.equals(that.snapshotOfTotalRedistributed));\n    }\n}\nexports.TroveWithPendingRedistribution = TroveWithPendingRedistribution;\n//# sourceMappingURL=Trove.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._connectToMulticall = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst multicallAbi = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"getCurrentBlockTimestamp\",\n        outputs: [\n            {\n                name: \"timestamp\",\n                type: \"uint256\"\n            }\n        ],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n];\nconst multicallAddress = {\n    1: \"0xeefba1e63905ef1d7acba5a8513c70307c1ce441\",\n    3: \"0x53c43764255c17bd724f74c4ef150724ac50a3ed\",\n    4: \"0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821\",\n    5: \"0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e\",\n    42: \"0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a\",\n    56: '0x1Ee38d535d541c55C9dae27B12edf090C608E6Fb',\n    97: \"0xEB5d94D88557f979D1600720215D3d96A39Ffe38\"\n};\nconst hasMulticall = (chainId) => chainId in multicallAddress;\nconst _connectToMulticall = (signerOrProvider, chainId) => hasMulticall(chainId)\n    ? new contracts_1.Contract(multicallAddress[chainId], multicallAbi, signerOrProvider)\n    : undefined;\nexports._connectToMulticall = _connectToMulticall;\n//# sourceMappingURL=_Multicall.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockPolledLiquityStore = void 0;\nconst constants_1 = require(\"@ethersproject/constants\");\nconst lib_base_1 = require(\"@liquity/lib-base\");\nconst EthersLiquityConnection_1 = require(\"./EthersLiquityConnection\");\nconst promiseAllValues = (object) => {\n    const keys = Object.keys(object);\n    return Promise.all(Object.values(object)).then(values => Object.fromEntries(values.map((value, i) => [keys[i], value])));\n};\nconst decimalify = (bigNumber) => lib_base_1.Decimal.fromBigNumberString(bigNumber.toHexString());\n/**\n * Ethers-based {@link @liquity/lib-base#LiquityStore} that updates state whenever there's a new\n * block.\n *\n * @public\n */\nclass BlockPolledLiquityStore extends lib_base_1.LiquityStore {\n    constructor(readable) {\n        super();\n        this.connection = readable.connection;\n        this._readable = readable;\n        this._provider = EthersLiquityConnection_1._getProvider(readable.connection);\n    }\n    async _getRiskiestTroveBeforeRedistribution(overrides) {\n        const riskiestTroves = await this._readable.getTroves({ first: 1, sortedBy: \"ascendingCollateralRatio\", beforeRedistribution: true }, overrides);\n        if (riskiestTroves.length === 0) {\n            return new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, \"nonExistent\");\n        }\n        return riskiestTroves[0];\n    }\n    async _get(blockTag) {\n        const { userAddress, frontendTag } = this.connection;\n        const { blockTimestamp, createFees, calculateRemainingLQTY, ...baseState } = await promiseAllValues({\n            blockTimestamp: EthersLiquityConnection_1._getBlockTimestamp(this.connection, blockTag),\n            createFees: this._readable._getFeesFactory({ blockTag }),\n            calculateRemainingLQTY: this._readable._getRemainingLiquidityMiningLQTYRewardCalculator({\n                blockTag\n            }),\n            price: this._readable.getPrice({ blockTag }),\n            numberOfTroves: this._readable.getNumberOfTroves({ blockTag }),\n            totalRedistributed: this._readable.getTotalRedistributed({ blockTag }),\n            total: this._readable.getTotal({ blockTag }),\n            lusdInStabilityPool: this._readable.getLUSDInStabilityPool({ blockTag }),\n            totalStakedLQTY: this._readable.getTotalStakedLQTY({ blockTag }),\n            _riskiestTroveBeforeRedistribution: this._getRiskiestTroveBeforeRedistribution({ blockTag }),\n            totalStakedUniTokens: this._readable.getTotalStakedUniTokens({ blockTag }),\n            remainingStabilityPoolLQTYReward: this._readable.getRemainingStabilityPoolLQTYReward({\n                blockTag\n            }),\n            frontend: frontendTag\n                ? this._readable.getFrontendStatus(frontendTag, { blockTag })\n                : { status: \"unregistered\" },\n            ...(userAddress\n                ? {\n                    accountBalance: this._provider.getBalance(userAddress, blockTag).then(decimalify),\n                    lusdBalance: this._readable.getLUSDBalance(userAddress, { blockTag }),\n                    lqtyBalance: this._readable.getLQTYBalance(userAddress, { blockTag }),\n                    uniTokenBalance: this._readable.getUniTokenBalance(userAddress, { blockTag }),\n                    uniTokenAllowance: this._readable.getUniTokenAllowance(userAddress, { blockTag }),\n                    liquidityMiningStake: this._readable.getLiquidityMiningStake(userAddress, { blockTag }),\n                    liquidityMiningLQTYReward: this._readable.getLiquidityMiningLQTYReward(userAddress, {\n                        blockTag\n                    }),\n                    collateralSurplusBalance: this._readable.getCollateralSurplusBalance(userAddress, {\n                        blockTag\n                    }),\n                    troveBeforeRedistribution: this._readable.getTroveBeforeRedistribution(userAddress, {\n                        blockTag\n                    }),\n                    stabilityDeposit: this._readable.getStabilityDeposit(userAddress, { blockTag }),\n                    lqtyStake: this._readable.getLQTYStake(userAddress, { blockTag }),\n                    ownFrontend: this._readable.getFrontendStatus(userAddress, { blockTag })\n                }\n                : {\n                    accountBalance: lib_base_1.Decimal.ZERO,\n                    lusdBalance: lib_base_1.Decimal.ZERO,\n                    lqtyBalance: lib_base_1.Decimal.ZERO,\n                    uniTokenBalance: lib_base_1.Decimal.ZERO,\n                    uniTokenAllowance: lib_base_1.Decimal.ZERO,\n                    liquidityMiningStake: lib_base_1.Decimal.ZERO,\n                    liquidityMiningLQTYReward: lib_base_1.Decimal.ZERO,\n                    collateralSurplusBalance: lib_base_1.Decimal.ZERO,\n                    troveBeforeRedistribution: new lib_base_1.TroveWithPendingRedistribution(constants_1.AddressZero, \"nonExistent\"),\n                    stabilityDeposit: new lib_base_1.StabilityDeposit(lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, lib_base_1.Decimal.ZERO, constants_1.AddressZero),\n                    lqtyStake: new lib_base_1.LQTYStake(),\n                    ownFrontend: { status: \"unregistered\" }\n                })\n        });\n        return [\n            {\n                ...baseState,\n                _feesInNormalMode: createFees(blockTimestamp, false),\n                remainingLiquidityMiningLQTYReward: calculateRemainingLQTY(blockTimestamp)\n            },\n            {\n                blockTag,\n                blockTimestamp\n            }\n        ];\n    }\n    /** @internal @override */\n    _doStart() {\n        this._get().then(state => {\n            if (!this._loaded) {\n                this._load(...state);\n            }\n        });\n        const blockListener = async (blockTag) => {\n            const state = await this._get(blockTag);\n            if (this._loaded) {\n                this._update(...state);\n            }\n            else {\n                this._load(...state);\n            }\n        };\n        this._provider.on(\"block\", blockListener);\n        return () => {\n            this._provider.off(\"block\", blockListener);\n        };\n    }\n    /** @internal @override */\n    _reduceExtra(oldState, stateUpdate) {\n        var _a, _b;\n        return {\n            blockTag: (_a = stateUpdate.blockTag) !== null && _a !== void 0 ? _a : oldState.blockTag,\n            blockTimestamp: (_b = stateUpdate.blockTimestamp) !== null && _b !== void 0 ? _b : oldState.blockTimestamp\n        };\n    }\n}\nexports.BlockPolledLiquityStore = BlockPolledLiquityStore;\n//# sourceMappingURL=BlockPolledLiquityStore.js.map"],"sourceRoot":""}